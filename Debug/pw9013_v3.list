
pw9013_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b4  08013fa8  08013fa8  00023fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000002ec  0801535c  0801535c  0002535c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000002b0  08015648  08015648  00025648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080158f8  080158f8  000309e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080158f8  080158f8  000258f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015904  08015904  00025904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e8  20000000  08015908  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cbc  200009e8  080162f0  000309e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200026a4  080162f0  000326a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000309e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00068c91  00000000  00000000  00030a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008af7  00000000  00000000  000996a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004488  00000000  00000000  000a21a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004170  00000000  00000000  000a6628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233f4  00000000  00000000  000aa798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036cdc  00000000  00000000  000cdb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfc6e  00000000  00000000  00104868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c44d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000157e0  00000000  00000000  001c4528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200009e8 	.word	0x200009e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08013f90 	.word	0x08013f90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200009ec 	.word	0x200009ec
 8000148:	08013f90 	.word	0x08013f90

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <selfrel_offset31>:
 800094c:	6803      	ldr	r3, [r0, #0]
 800094e:	005a      	lsls	r2, r3, #1
 8000950:	bf4c      	ite	mi
 8000952:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000956:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800095a:	4418      	add	r0, r3
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <search_EIT_table>:
 8000960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000964:	b339      	cbz	r1, 80009b6 <search_EIT_table+0x56>
 8000966:	1e4f      	subs	r7, r1, #1
 8000968:	4604      	mov	r4, r0
 800096a:	4615      	mov	r5, r2
 800096c:	463e      	mov	r6, r7
 800096e:	f04f 0800 	mov.w	r8, #0
 8000972:	eb08 0106 	add.w	r1, r8, r6
 8000976:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800097a:	1049      	asrs	r1, r1, #1
 800097c:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000980:	4648      	mov	r0, r9
 8000982:	f7ff ffe3 	bl	800094c <selfrel_offset31>
 8000986:	4603      	mov	r3, r0
 8000988:	00c8      	lsls	r0, r1, #3
 800098a:	3008      	adds	r0, #8
 800098c:	428f      	cmp	r7, r1
 800098e:	4420      	add	r0, r4
 8000990:	d00b      	beq.n	80009aa <search_EIT_table+0x4a>
 8000992:	42ab      	cmp	r3, r5
 8000994:	d80b      	bhi.n	80009ae <search_EIT_table+0x4e>
 8000996:	f7ff ffd9 	bl	800094c <selfrel_offset31>
 800099a:	3801      	subs	r0, #1
 800099c:	42a8      	cmp	r0, r5
 800099e:	f101 0801 	add.w	r8, r1, #1
 80009a2:	d3e6      	bcc.n	8000972 <search_EIT_table+0x12>
 80009a4:	4648      	mov	r0, r9
 80009a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009aa:	42ab      	cmp	r3, r5
 80009ac:	d9fa      	bls.n	80009a4 <search_EIT_table+0x44>
 80009ae:	4588      	cmp	r8, r1
 80009b0:	d001      	beq.n	80009b6 <search_EIT_table+0x56>
 80009b2:	1e4e      	subs	r6, r1, #1
 80009b4:	e7dd      	b.n	8000972 <search_EIT_table+0x12>
 80009b6:	f04f 0900 	mov.w	r9, #0
 80009ba:	4648      	mov	r0, r9
 80009bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080009c0 <__gnu_unwind_get_pr_addr>:
 80009c0:	2801      	cmp	r0, #1
 80009c2:	d007      	beq.n	80009d4 <__gnu_unwind_get_pr_addr+0x14>
 80009c4:	2802      	cmp	r0, #2
 80009c6:	d007      	beq.n	80009d8 <__gnu_unwind_get_pr_addr+0x18>
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__gnu_unwind_get_pr_addr+0x1c>)
 80009ca:	2800      	cmp	r0, #0
 80009cc:	bf0c      	ite	eq
 80009ce:	4618      	moveq	r0, r3
 80009d0:	2000      	movne	r0, #0
 80009d2:	4770      	bx	lr
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <__gnu_unwind_get_pr_addr+0x20>)
 80009d6:	4770      	bx	lr
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <__gnu_unwind_get_pr_addr+0x24>)
 80009da:	4770      	bx	lr
 80009dc:	080010b1 	.word	0x080010b1
 80009e0:	080010b5 	.word	0x080010b5
 80009e4:	080010b9 	.word	0x080010b9

080009e8 <get_eit_entry>:
 80009e8:	b530      	push	{r4, r5, lr}
 80009ea:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <get_eit_entry+0x94>)
 80009ec:	4604      	mov	r4, r0
 80009ee:	b083      	sub	sp, #12
 80009f0:	1e8d      	subs	r5, r1, #2
 80009f2:	b33b      	cbz	r3, 8000a44 <get_eit_entry+0x5c>
 80009f4:	4628      	mov	r0, r5
 80009f6:	a901      	add	r1, sp, #4
 80009f8:	f3af 8000 	nop.w
 80009fc:	b1e8      	cbz	r0, 8000a3a <get_eit_entry+0x52>
 80009fe:	9901      	ldr	r1, [sp, #4]
 8000a00:	462a      	mov	r2, r5
 8000a02:	f7ff ffad 	bl	8000960 <search_EIT_table>
 8000a06:	4601      	mov	r1, r0
 8000a08:	b1b8      	cbz	r0, 8000a3a <get_eit_entry+0x52>
 8000a0a:	f7ff ff9f 	bl	800094c <selfrel_offset31>
 8000a0e:	684b      	ldr	r3, [r1, #4]
 8000a10:	64a0      	str	r0, [r4, #72]	; 0x48
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d02e      	beq.n	8000a74 <get_eit_entry+0x8c>
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	db27      	blt.n	8000a6a <get_eit_entry+0x82>
 8000a1a:	1d08      	adds	r0, r1, #4
 8000a1c:	f7ff ff96 	bl	800094c <selfrel_offset31>
 8000a20:	2300      	movs	r3, #0
 8000a22:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000a26:	6803      	ldr	r3, [r0, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db12      	blt.n	8000a52 <get_eit_entry+0x6a>
 8000a2c:	f7ff ff8e 	bl	800094c <selfrel_offset31>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2000      	movs	r0, #0
 8000a34:	6123      	str	r3, [r4, #16]
 8000a36:	b003      	add	sp, #12
 8000a38:	bd30      	pop	{r4, r5, pc}
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	2009      	movs	r0, #9
 8000a3e:	6123      	str	r3, [r4, #16]
 8000a40:	b003      	add	sp, #12
 8000a42:	bd30      	pop	{r4, r5, pc}
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <get_eit_entry+0x98>)
 8000a46:	490f      	ldr	r1, [pc, #60]	; (8000a84 <get_eit_entry+0x9c>)
 8000a48:	4618      	mov	r0, r3
 8000a4a:	1ac9      	subs	r1, r1, r3
 8000a4c:	10c9      	asrs	r1, r1, #3
 8000a4e:	9101      	str	r1, [sp, #4]
 8000a50:	e7d6      	b.n	8000a00 <get_eit_entry+0x18>
 8000a52:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000a56:	f7ff ffb3 	bl	80009c0 <__gnu_unwind_get_pr_addr>
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	bf14      	ite	ne
 8000a60:	2000      	movne	r0, #0
 8000a62:	2009      	moveq	r0, #9
 8000a64:	6123      	str	r3, [r4, #16]
 8000a66:	b003      	add	sp, #12
 8000a68:	bd30      	pop	{r4, r5, pc}
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	1d08      	adds	r0, r1, #4
 8000a6e:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000a72:	e7d8      	b.n	8000a26 <get_eit_entry+0x3e>
 8000a74:	2300      	movs	r3, #0
 8000a76:	2005      	movs	r0, #5
 8000a78:	6123      	str	r3, [r4, #16]
 8000a7a:	e7dc      	b.n	8000a36 <get_eit_entry+0x4e>
 8000a7c:	00000000 	.word	0x00000000
 8000a80:	08015648 	.word	0x08015648
 8000a84:	080158f8 	.word	0x080158f8

08000a88 <restore_non_core_regs>:
 8000a88:	6803      	ldr	r3, [r0, #0]
 8000a8a:	b510      	push	{r4, lr}
 8000a8c:	07da      	lsls	r2, r3, #31
 8000a8e:	4604      	mov	r4, r0
 8000a90:	d406      	bmi.n	8000aa0 <restore_non_core_regs+0x18>
 8000a92:	079b      	lsls	r3, r3, #30
 8000a94:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000a98:	d509      	bpl.n	8000aae <restore_non_core_regs+0x26>
 8000a9a:	f000 fc5d 	bl	8001358 <__gnu_Unwind_Restore_VFP_D>
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	0759      	lsls	r1, r3, #29
 8000aa2:	d509      	bpl.n	8000ab8 <restore_non_core_regs+0x30>
 8000aa4:	071a      	lsls	r2, r3, #28
 8000aa6:	d50e      	bpl.n	8000ac6 <restore_non_core_regs+0x3e>
 8000aa8:	06db      	lsls	r3, r3, #27
 8000aaa:	d513      	bpl.n	8000ad4 <restore_non_core_regs+0x4c>
 8000aac:	bd10      	pop	{r4, pc}
 8000aae:	f000 fc4b 	bl	8001348 <__gnu_Unwind_Restore_VFP>
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	0759      	lsls	r1, r3, #29
 8000ab6:	d4f5      	bmi.n	8000aa4 <restore_non_core_regs+0x1c>
 8000ab8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000abc:	f000 fc54 	bl	8001368 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	071a      	lsls	r2, r3, #28
 8000ac4:	d4f0      	bmi.n	8000aa8 <restore_non_core_regs+0x20>
 8000ac6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000aca:	f000 fc55 	bl	8001378 <__gnu_Unwind_Restore_WMMXD>
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	06db      	lsls	r3, r3, #27
 8000ad2:	d4eb      	bmi.n	8000aac <restore_non_core_regs+0x24>
 8000ad4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000adc:	f000 bc90 	b.w	8001400 <__gnu_Unwind_Restore_WMMXC>

08000ae0 <__gnu_unwind_24bit.constprop.0>:
 8000ae0:	2009      	movs	r0, #9
 8000ae2:	4770      	bx	lr

08000ae4 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	6800      	ldr	r0, [r0, #0]
 8000ae8:	b100      	cbz	r0, 8000aec <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000aea:	4418      	add	r0, r3
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <_Unwind_DebugHook>:
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <unwind_phase2>:
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	4604      	mov	r4, r0
 8000af8:	460e      	mov	r6, r1
 8000afa:	4620      	mov	r0, r4
 8000afc:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000afe:	f7ff ff73 	bl	80009e8 <get_eit_entry>
 8000b02:	4605      	mov	r5, r0
 8000b04:	b998      	cbnz	r0, 8000b2e <unwind_phase2+0x3a>
 8000b06:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 8000b0a:	4632      	mov	r2, r6
 8000b0c:	4621      	mov	r1, r4
 8000b0e:	2001      	movs	r0, #1
 8000b10:	6923      	ldr	r3, [r4, #16]
 8000b12:	f8c4 c014 	str.w	ip, [r4, #20]
 8000b16:	4798      	blx	r3
 8000b18:	2808      	cmp	r0, #8
 8000b1a:	d0ee      	beq.n	8000afa <unwind_phase2+0x6>
 8000b1c:	2807      	cmp	r0, #7
 8000b1e:	d106      	bne.n	8000b2e <unwind_phase2+0x3a>
 8000b20:	4628      	mov	r0, r5
 8000b22:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000b24:	f7ff ffe4 	bl	8000af0 <_Unwind_DebugHook>
 8000b28:	1d30      	adds	r0, r6, #4
 8000b2a:	f000 fc01 	bl	8001330 <__restore_core_regs>
 8000b2e:	f012 fd21 	bl	8013574 <abort>
 8000b32:	bf00      	nop

08000b34 <unwind_phase2_forced>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	f04f 0a00 	mov.w	sl, #0
 8000b3c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000b40:	f10d 0e0c 	add.w	lr, sp, #12
 8000b44:	f101 0c04 	add.w	ip, r1, #4
 8000b48:	68c7      	ldr	r7, [r0, #12]
 8000b4a:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000b4e:	4606      	mov	r6, r0
 8000b50:	4614      	mov	r4, r2
 8000b52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000b56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000b5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000b5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000b62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000b66:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000b6a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000b6e:	ad02      	add	r5, sp, #8
 8000b70:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000b74:	f8c5 a000 	str.w	sl, [r5]
 8000b78:	e021      	b.n	8000bbe <unwind_phase2_forced+0x8a>
 8000b7a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000b7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b80:	4629      	mov	r1, r5
 8000b82:	6173      	str	r3, [r6, #20]
 8000b84:	a87a      	add	r0, sp, #488	; 0x1e8
 8000b86:	f012 fd45 	bl	8013614 <memcpy>
 8000b8a:	4631      	mov	r1, r6
 8000b8c:	4650      	mov	r0, sl
 8000b8e:	6933      	ldr	r3, [r6, #16]
 8000b90:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000b92:	4798      	blx	r3
 8000b94:	9c88      	ldr	r4, [sp, #544]	; 0x220
 8000b96:	4682      	mov	sl, r0
 8000b98:	646c      	str	r4, [r5, #68]	; 0x44
 8000b9a:	4633      	mov	r3, r6
 8000b9c:	4632      	mov	r2, r6
 8000b9e:	4649      	mov	r1, r9
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	e9cd 5800 	strd	r5, r8, [sp]
 8000ba6:	47b8      	blx	r7
 8000ba8:	4604      	mov	r4, r0
 8000baa:	b9f0      	cbnz	r0, 8000bea <unwind_phase2_forced+0xb6>
 8000bac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	a97a      	add	r1, sp, #488	; 0x1e8
 8000bb4:	f012 fd2e 	bl	8013614 <memcpy>
 8000bb8:	f1ba 0f08 	cmp.w	sl, #8
 8000bbc:	d11b      	bne.n	8000bf6 <unwind_phase2_forced+0xc2>
 8000bbe:	4630      	mov	r0, r6
 8000bc0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000bc2:	f7ff ff11 	bl	80009e8 <get_eit_entry>
 8000bc6:	f104 0909 	add.w	r9, r4, #9
 8000bca:	fa5f fa89 	uxtb.w	sl, r9
 8000bce:	4604      	mov	r4, r0
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d0d2      	beq.n	8000b7a <unwind_phase2_forced+0x46>
 8000bd4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000bd6:	4633      	mov	r3, r6
 8000bd8:	6469      	str	r1, [r5, #68]	; 0x44
 8000bda:	4632      	mov	r2, r6
 8000bdc:	2001      	movs	r0, #1
 8000bde:	e9cd 5800 	strd	r5, r8, [sp]
 8000be2:	f04a 0110 	orr.w	r1, sl, #16
 8000be6:	47b8      	blx	r7
 8000be8:	b100      	cbz	r0, 8000bec <unwind_phase2_forced+0xb8>
 8000bea:	2409      	movs	r4, #9
 8000bec:	4620      	mov	r0, r4
 8000bee:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	f1ba 0f07 	cmp.w	sl, #7
 8000bfa:	d1f6      	bne.n	8000bea <unwind_phase2_forced+0xb6>
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000c00:	f7ff ff76 	bl	8000af0 <_Unwind_DebugHook>
 8000c04:	a803      	add	r0, sp, #12
 8000c06:	f000 fb93 	bl	8001330 <__restore_core_regs>
 8000c0a:	bf00      	nop

08000c0c <_Unwind_GetCFA>:
 8000c0c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000c0e:	4770      	bx	lr

08000c10 <__gnu_Unwind_RaiseException>:
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000c16:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000c18:	b0f9      	sub	sp, #484	; 0x1e4
 8000c1a:	640b      	str	r3, [r1, #64]	; 0x40
 8000c1c:	ac01      	add	r4, sp, #4
 8000c1e:	f101 0c04 	add.w	ip, r1, #4
 8000c22:	460e      	mov	r6, r1
 8000c24:	4605      	mov	r5, r0
 8000c26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c38:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c40:	9700      	str	r7, [sp, #0]
 8000c42:	e006      	b.n	8000c52 <__gnu_Unwind_RaiseException+0x42>
 8000c44:	466a      	mov	r2, sp
 8000c46:	4629      	mov	r1, r5
 8000c48:	692b      	ldr	r3, [r5, #16]
 8000c4a:	4798      	blx	r3
 8000c4c:	2808      	cmp	r0, #8
 8000c4e:	4604      	mov	r4, r0
 8000c50:	d108      	bne.n	8000c64 <__gnu_Unwind_RaiseException+0x54>
 8000c52:	4628      	mov	r0, r5
 8000c54:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000c56:	f7ff fec7 	bl	80009e8 <get_eit_entry>
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d0f2      	beq.n	8000c44 <__gnu_Unwind_RaiseException+0x34>
 8000c5e:	2009      	movs	r0, #9
 8000c60:	b079      	add	sp, #484	; 0x1e4
 8000c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c64:	4668      	mov	r0, sp
 8000c66:	f7ff ff0f 	bl	8000a88 <restore_non_core_regs>
 8000c6a:	2c06      	cmp	r4, #6
 8000c6c:	d1f7      	bne.n	8000c5e <__gnu_Unwind_RaiseException+0x4e>
 8000c6e:	4631      	mov	r1, r6
 8000c70:	4628      	mov	r0, r5
 8000c72:	f7ff ff3f 	bl	8000af4 <unwind_phase2>
 8000c76:	bf00      	nop

08000c78 <__gnu_Unwind_ForcedUnwind>:
 8000c78:	b410      	push	{r4}
 8000c7a:	4614      	mov	r4, r2
 8000c7c:	6184      	str	r4, [r0, #24]
 8000c7e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000c80:	60c1      	str	r1, [r0, #12]
 8000c82:	2200      	movs	r2, #0
 8000c84:	641c      	str	r4, [r3, #64]	; 0x40
 8000c86:	4619      	mov	r1, r3
 8000c88:	bc10      	pop	{r4}
 8000c8a:	e753      	b.n	8000b34 <unwind_phase2_forced>

08000c8c <__gnu_Unwind_Resume>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	6943      	ldr	r3, [r0, #20]
 8000c90:	68c6      	ldr	r6, [r0, #12]
 8000c92:	640b      	str	r3, [r1, #64]	; 0x40
 8000c94:	b9ae      	cbnz	r6, 8000cc2 <__gnu_Unwind_Resume+0x36>
 8000c96:	460a      	mov	r2, r1
 8000c98:	6903      	ldr	r3, [r0, #16]
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	460d      	mov	r5, r1
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	4798      	blx	r3
 8000ca4:	2807      	cmp	r0, #7
 8000ca6:	d005      	beq.n	8000cb4 <__gnu_Unwind_Resume+0x28>
 8000ca8:	2808      	cmp	r0, #8
 8000caa:	d10f      	bne.n	8000ccc <__gnu_Unwind_Resume+0x40>
 8000cac:	4629      	mov	r1, r5
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f7ff ff20 	bl	8000af4 <unwind_phase2>
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000cb8:	f7ff ff1a 	bl	8000af0 <_Unwind_DebugHook>
 8000cbc:	1d28      	adds	r0, r5, #4
 8000cbe:	f000 fb37 	bl	8001330 <__restore_core_regs>
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f7ff ff36 	bl	8000b34 <unwind_phase2_forced>
 8000cc8:	f012 fc54 	bl	8013574 <abort>
 8000ccc:	f012 fc52 	bl	8013574 <abort>

08000cd0 <__gnu_Unwind_Resume_or_Rethrow>:
 8000cd0:	68c2      	ldr	r2, [r0, #12]
 8000cd2:	b12a      	cbz	r2, 8000ce0 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000cd4:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 8000cde:	e729      	b.n	8000b34 <unwind_phase2_forced>
 8000ce0:	e796      	b.n	8000c10 <__gnu_Unwind_RaiseException>
 8000ce2:	bf00      	nop

08000ce4 <_Unwind_Complete>:
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <_Unwind_DeleteException>:
 8000ce8:	6883      	ldr	r3, [r0, #8]
 8000cea:	4601      	mov	r1, r0
 8000cec:	b10b      	cbz	r3, 8000cf2 <_Unwind_DeleteException+0xa>
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4718      	bx	r3
 8000cf2:	4770      	bx	lr

08000cf4 <_Unwind_VRS_Get>:
 8000cf4:	2901      	cmp	r1, #1
 8000cf6:	d012      	beq.n	8000d1e <_Unwind_VRS_Get+0x2a>
 8000cf8:	d809      	bhi.n	8000d0e <_Unwind_VRS_Get+0x1a>
 8000cfa:	b973      	cbnz	r3, 8000d1a <_Unwind_VRS_Get+0x26>
 8000cfc:	2a0f      	cmp	r2, #15
 8000cfe:	d80c      	bhi.n	8000d1a <_Unwind_VRS_Get+0x26>
 8000d00:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000d04:	6842      	ldr	r2, [r0, #4]
 8000d06:	4618      	mov	r0, r3
 8000d08:	9b00      	ldr	r3, [sp, #0]
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	4770      	bx	lr
 8000d0e:	3903      	subs	r1, #3
 8000d10:	2901      	cmp	r1, #1
 8000d12:	bf94      	ite	ls
 8000d14:	2001      	movls	r0, #1
 8000d16:	2002      	movhi	r0, #2
 8000d18:	4770      	bx	lr
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	4770      	bx	lr
 8000d1e:	4608      	mov	r0, r1
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <_Unwind_GetGR>:
 8000d24:	2300      	movs	r3, #0
 8000d26:	b500      	push	{lr}
 8000d28:	b085      	sub	sp, #20
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	a903      	add	r1, sp, #12
 8000d2e:	9100      	str	r1, [sp, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f7ff ffdf 	bl	8000cf4 <_Unwind_VRS_Get>
 8000d36:	9803      	ldr	r0, [sp, #12]
 8000d38:	b005      	add	sp, #20
 8000d3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d3e:	bf00      	nop

08000d40 <_Unwind_VRS_Set>:
 8000d40:	2901      	cmp	r1, #1
 8000d42:	d012      	beq.n	8000d6a <_Unwind_VRS_Set+0x2a>
 8000d44:	d809      	bhi.n	8000d5a <_Unwind_VRS_Set+0x1a>
 8000d46:	b973      	cbnz	r3, 8000d66 <_Unwind_VRS_Set+0x26>
 8000d48:	2a0f      	cmp	r2, #15
 8000d4a:	d80c      	bhi.n	8000d66 <_Unwind_VRS_Set+0x26>
 8000d4c:	9900      	ldr	r1, [sp, #0]
 8000d4e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000d52:	6809      	ldr	r1, [r1, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	6051      	str	r1, [r2, #4]
 8000d58:	4770      	bx	lr
 8000d5a:	3903      	subs	r1, #3
 8000d5c:	2901      	cmp	r1, #1
 8000d5e:	bf94      	ite	ls
 8000d60:	2001      	movls	r0, #1
 8000d62:	2002      	movhi	r0, #2
 8000d64:	4770      	bx	lr
 8000d66:	2002      	movs	r0, #2
 8000d68:	4770      	bx	lr
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <_Unwind_SetGR>:
 8000d70:	2300      	movs	r3, #0
 8000d72:	b510      	push	{r4, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	ac03      	add	r4, sp, #12
 8000d78:	9203      	str	r2, [sp, #12]
 8000d7a:	9400      	str	r4, [sp, #0]
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f7ff ffde 	bl	8000d40 <_Unwind_VRS_Set>
 8000d84:	b004      	add	sp, #16
 8000d86:	bd10      	pop	{r4, pc}

08000d88 <__gnu_Unwind_Backtrace>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000d8e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000d90:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8000d9a:	f102 0c04 	add.w	ip, r2, #4
 8000d9e:	4605      	mov	r5, r0
 8000da0:	460c      	mov	r4, r1
 8000da2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000da6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000daa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000dae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000db2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000db6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000dba:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000dbe:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000dc2:	9616      	str	r6, [sp, #88]	; 0x58
 8000dc4:	e012      	b.n	8000dec <__gnu_Unwind_Backtrace+0x64>
 8000dc6:	210c      	movs	r1, #12
 8000dc8:	a816      	add	r0, sp, #88	; 0x58
 8000dca:	466a      	mov	r2, sp
 8000dcc:	f7ff ffd0 	bl	8000d70 <_Unwind_SetGR>
 8000dd0:	4621      	mov	r1, r4
 8000dd2:	a816      	add	r0, sp, #88	; 0x58
 8000dd4:	47a8      	blx	r5
 8000dd6:	b978      	cbnz	r0, 8000df8 <__gnu_Unwind_Backtrace+0x70>
 8000dd8:	4669      	mov	r1, sp
 8000dda:	2008      	movs	r0, #8
 8000ddc:	9b04      	ldr	r3, [sp, #16]
 8000dde:	aa16      	add	r2, sp, #88	; 0x58
 8000de0:	4798      	blx	r3
 8000de2:	2805      	cmp	r0, #5
 8000de4:	4606      	mov	r6, r0
 8000de6:	d008      	beq.n	8000dfa <__gnu_Unwind_Backtrace+0x72>
 8000de8:	2809      	cmp	r0, #9
 8000dea:	d005      	beq.n	8000df8 <__gnu_Unwind_Backtrace+0x70>
 8000dec:	4668      	mov	r0, sp
 8000dee:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000df0:	f7ff fdfa 	bl	80009e8 <get_eit_entry>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d0e6      	beq.n	8000dc6 <__gnu_Unwind_Backtrace+0x3e>
 8000df8:	2609      	movs	r6, #9
 8000dfa:	a816      	add	r0, sp, #88	; 0x58
 8000dfc:	f7ff fe44 	bl	8000a88 <restore_non_core_regs>
 8000e00:	4630      	mov	r0, r6
 8000e02:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8000e06:	bd70      	pop	{r4, r5, r6, pc}

08000e08 <__gnu_unwind_pr_common>:
 8000e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e0c:	461e      	mov	r6, r3
 8000e0e:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000e10:	b089      	sub	sp, #36	; 0x24
 8000e12:	f854 3b04 	ldr.w	r3, [r4], #4
 8000e16:	460d      	mov	r5, r1
 8000e18:	4617      	mov	r7, r2
 8000e1a:	f000 0803 	and.w	r8, r0, #3
 8000e1e:	9406      	str	r4, [sp, #24]
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d079      	beq.n	8000f18 <__gnu_unwind_pr_common+0x110>
 8000e24:	2202      	movs	r2, #2
 8000e26:	f88d 201c 	strb.w	r2, [sp, #28]
 8000e2a:	0c1a      	lsrs	r2, r3, #16
 8000e2c:	f88d 201d 	strb.w	r2, [sp, #29]
 8000e30:	041b      	lsls	r3, r3, #16
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	9305      	str	r3, [sp, #20]
 8000e36:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000e3a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000e3c:	f1b8 0f02 	cmp.w	r8, #2
 8000e40:	bf08      	it	eq
 8000e42:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000e44:	f013 0301 	ands.w	r3, r3, #1
 8000e48:	d00c      	beq.n	8000e64 <__gnu_unwind_pr_common+0x5c>
 8000e4a:	4638      	mov	r0, r7
 8000e4c:	a905      	add	r1, sp, #20
 8000e4e:	f000 fb71 	bl	8001534 <__gnu_unwind_execute>
 8000e52:	b918      	cbnz	r0, 8000e5c <__gnu_unwind_pr_common+0x54>
 8000e54:	2008      	movs	r0, #8
 8000e56:	b009      	add	sp, #36	; 0x24
 8000e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e5c:	2009      	movs	r0, #9
 8000e5e:	b009      	add	sp, #36	; 0x24
 8000e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e64:	f8d4 a000 	ldr.w	sl, [r4]
 8000e68:	f1ba 0f00 	cmp.w	sl, #0
 8000e6c:	d0ed      	beq.n	8000e4a <__gnu_unwind_pr_common+0x42>
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	f000 0308 	and.w	r3, r0, #8
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	2e02      	cmp	r6, #2
 8000e78:	d04a      	beq.n	8000f10 <__gnu_unwind_pr_common+0x108>
 8000e7a:	f8b4 a000 	ldrh.w	sl, [r4]
 8000e7e:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000e82:	3404      	adds	r4, #4
 8000e84:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000e86:	210f      	movs	r1, #15
 8000e88:	4638      	mov	r0, r7
 8000e8a:	f029 0b01 	bic.w	fp, r9, #1
 8000e8e:	4493      	add	fp, r2
 8000e90:	f7ff ff48 	bl	8000d24 <_Unwind_GetGR>
 8000e94:	4583      	cmp	fp, r0
 8000e96:	d839      	bhi.n	8000f0c <__gnu_unwind_pr_common+0x104>
 8000e98:	f02a 0201 	bic.w	r2, sl, #1
 8000e9c:	445a      	add	r2, fp
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	bf94      	ite	ls
 8000ea2:	2000      	movls	r0, #0
 8000ea4:	2001      	movhi	r0, #1
 8000ea6:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	f00a 0a01 	and.w	sl, sl, #1
 8000eb2:	ea43 030a 	orr.w	r3, r3, sl
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d049      	beq.n	8000f4e <__gnu_unwind_pr_common+0x146>
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d032      	beq.n	8000f24 <__gnu_unwind_pr_common+0x11c>
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1cc      	bne.n	8000e5c <__gnu_unwind_pr_common+0x54>
 8000ec2:	f1b8 0f00 	cmp.w	r8, #0
 8000ec6:	d002      	beq.n	8000ece <__gnu_unwind_pr_common+0xc6>
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	f040 80ce 	bne.w	800106a <__gnu_unwind_pr_common+0x262>
 8000ece:	3404      	adds	r4, #4
 8000ed0:	f8d4 a000 	ldr.w	sl, [r4]
 8000ed4:	f1ba 0f00 	cmp.w	sl, #0
 8000ed8:	d1cd      	bne.n	8000e76 <__gnu_unwind_pr_common+0x6e>
 8000eda:	4638      	mov	r0, r7
 8000edc:	a905      	add	r1, sp, #20
 8000ede:	f000 fb29 	bl	8001534 <__gnu_unwind_execute>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	d1ba      	bne.n	8000e5c <__gnu_unwind_pr_common+0x54>
 8000ee6:	9b01      	ldr	r3, [sp, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0b3      	beq.n	8000e54 <__gnu_unwind_pr_common+0x4c>
 8000eec:	210f      	movs	r1, #15
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f7ff ff18 	bl	8000d24 <_Unwind_GetGR>
 8000ef4:	210e      	movs	r1, #14
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	4638      	mov	r0, r7
 8000efa:	f7ff ff39 	bl	8000d70 <_Unwind_SetGR>
 8000efe:	4638      	mov	r0, r7
 8000f00:	210f      	movs	r1, #15
 8000f02:	4a6a      	ldr	r2, [pc, #424]	; (80010ac <__gnu_unwind_pr_common+0x2a4>)
 8000f04:	f7ff ff34 	bl	8000d70 <_Unwind_SetGR>
 8000f08:	2007      	movs	r0, #7
 8000f0a:	e7a8      	b.n	8000e5e <__gnu_unwind_pr_common+0x56>
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	e7ca      	b.n	8000ea6 <__gnu_unwind_pr_common+0x9e>
 8000f10:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000f14:	3408      	adds	r4, #8
 8000f16:	e7b5      	b.n	8000e84 <__gnu_unwind_pr_common+0x7c>
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	9305      	str	r3, [sp, #20]
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000f22:	e78a      	b.n	8000e3a <__gnu_unwind_pr_common+0x32>
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000f2a:	f1b8 0f00 	cmp.w	r8, #0
 8000f2e:	d145      	bne.n	8000fbc <__gnu_unwind_pr_common+0x1b4>
 8000f30:	b128      	cbz	r0, 8000f3e <__gnu_unwind_pr_common+0x136>
 8000f32:	9a02      	ldr	r2, [sp, #8]
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	d05c      	beq.n	8000ff2 <__gnu_unwind_pr_common+0x1ea>
 8000f38:	f1bb 0f00 	cmp.w	fp, #0
 8000f3c:	d074      	beq.n	8001028 <__gnu_unwind_pr_common+0x220>
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da00      	bge.n	8000f44 <__gnu_unwind_pr_common+0x13c>
 8000f42:	3404      	adds	r4, #4
 8000f44:	f10b 0b01 	add.w	fp, fp, #1
 8000f48:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000f4c:	e7c0      	b.n	8000ed0 <__gnu_unwind_pr_common+0xc8>
 8000f4e:	f1b8 0f00 	cmp.w	r8, #0
 8000f52:	d119      	bne.n	8000f88 <__gnu_unwind_pr_common+0x180>
 8000f54:	b1b0      	cbz	r0, 8000f84 <__gnu_unwind_pr_common+0x17c>
 8000f56:	6863      	ldr	r3, [r4, #4]
 8000f58:	6822      	ldr	r2, [r4, #0]
 8000f5a:	1c99      	adds	r1, r3, #2
 8000f5c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000f60:	f43f af7c 	beq.w	8000e5c <__gnu_unwind_pr_common+0x54>
 8000f64:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000f68:	3301      	adds	r3, #1
 8000f6a:	9104      	str	r1, [sp, #16]
 8000f6c:	f000 8091 	beq.w	8001092 <__gnu_unwind_pr_common+0x28a>
 8000f70:	1d20      	adds	r0, r4, #4
 8000f72:	f7ff fdb7 	bl	8000ae4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000f76:	ab04      	add	r3, sp, #16
 8000f78:	4601      	mov	r1, r0
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	f011 fd0a 	bl	8012994 <__cxa_type_match>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d15c      	bne.n	800103e <__gnu_unwind_pr_common+0x236>
 8000f84:	3408      	adds	r4, #8
 8000f86:	e7a3      	b.n	8000ed0 <__gnu_unwind_pr_common+0xc8>
 8000f88:	210d      	movs	r1, #13
 8000f8a:	4638      	mov	r0, r7
 8000f8c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000f90:	f7ff fec8 	bl	8000d24 <_Unwind_GetGR>
 8000f94:	4581      	cmp	r9, r0
 8000f96:	d1f5      	bne.n	8000f84 <__gnu_unwind_pr_common+0x17c>
 8000f98:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000f9a:	429c      	cmp	r4, r3
 8000f9c:	d1f2      	bne.n	8000f84 <__gnu_unwind_pr_common+0x17c>
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f7ff fcd4 	bl	800094c <selfrel_offset31>
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	4638      	mov	r0, r7
 8000faa:	f7ff fee1 	bl	8000d70 <_Unwind_SetGR>
 8000fae:	4638      	mov	r0, r7
 8000fb0:	462a      	mov	r2, r5
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	f7ff fedc 	bl	8000d70 <_Unwind_SetGR>
 8000fb8:	2007      	movs	r0, #7
 8000fba:	e750      	b.n	8000e5e <__gnu_unwind_pr_common+0x56>
 8000fbc:	210d      	movs	r1, #13
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000fc4:	f7ff feae 	bl	8000d24 <_Unwind_GetGR>
 8000fc8:	4581      	cmp	r9, r0
 8000fca:	d001      	beq.n	8000fd0 <__gnu_unwind_pr_common+0x1c8>
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	e7b6      	b.n	8000f3e <__gnu_unwind_pr_common+0x136>
 8000fd0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000fd2:	429c      	cmp	r4, r3
 8000fd4:	d1fa      	bne.n	8000fcc <__gnu_unwind_pr_common+0x1c4>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8000fde:	18e3      	adds	r3, r4, r3
 8000fe0:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000fe4:	636b      	str	r3, [r5, #52]	; 0x34
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db5a      	blt.n	80010a2 <__gnu_unwind_pr_common+0x29a>
 8000fec:	2301      	movs	r3, #1
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	e7a8      	b.n	8000f44 <__gnu_unwind_pr_common+0x13c>
 8000ff2:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000ff6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ffa:	4691      	mov	r9, r2
 8000ffc:	46b0      	mov	r8, r6
 8000ffe:	f104 0a04 	add.w	sl, r4, #4
 8001002:	461e      	mov	r6, r3
 8001004:	e00e      	b.n	8001024 <__gnu_unwind_pr_common+0x21c>
 8001006:	4650      	mov	r0, sl
 8001008:	9604      	str	r6, [sp, #16]
 800100a:	f7ff fd6b 	bl	8000ae4 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800100e:	2200      	movs	r2, #0
 8001010:	4601      	mov	r1, r0
 8001012:	ab04      	add	r3, sp, #16
 8001014:	4628      	mov	r0, r5
 8001016:	f109 0901 	add.w	r9, r9, #1
 800101a:	f10a 0a04 	add.w	sl, sl, #4
 800101e:	f011 fcb9 	bl	8012994 <__cxa_type_match>
 8001022:	b9e8      	cbnz	r0, 8001060 <__gnu_unwind_pr_common+0x258>
 8001024:	45d9      	cmp	r9, fp
 8001026:	d1ee      	bne.n	8001006 <__gnu_unwind_pr_common+0x1fe>
 8001028:	210d      	movs	r1, #13
 800102a:	4638      	mov	r0, r7
 800102c:	f7ff fe7a 	bl	8000d24 <_Unwind_GetGR>
 8001030:	4603      	mov	r3, r0
 8001032:	9a04      	ldr	r2, [sp, #16]
 8001034:	2006      	movs	r0, #6
 8001036:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 800103a:	622b      	str	r3, [r5, #32]
 800103c:	e70f      	b.n	8000e5e <__gnu_unwind_pr_common+0x56>
 800103e:	4681      	mov	r9, r0
 8001040:	210d      	movs	r1, #13
 8001042:	4638      	mov	r0, r7
 8001044:	f7ff fe6e 	bl	8000d24 <_Unwind_GetGR>
 8001048:	f1b9 0f02 	cmp.w	r9, #2
 800104c:	6228      	str	r0, [r5, #32]
 800104e:	d125      	bne.n	800109c <__gnu_unwind_pr_common+0x294>
 8001050:	462b      	mov	r3, r5
 8001052:	9a04      	ldr	r2, [sp, #16]
 8001054:	f843 2f2c 	str.w	r2, [r3, #44]!
 8001058:	626b      	str	r3, [r5, #36]	; 0x24
 800105a:	2006      	movs	r0, #6
 800105c:	62ac      	str	r4, [r5, #40]	; 0x28
 800105e:	e6fe      	b.n	8000e5e <__gnu_unwind_pr_common+0x56>
 8001060:	4646      	mov	r6, r8
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001068:	e769      	b.n	8000f3e <__gnu_unwind_pr_common+0x136>
 800106a:	4620      	mov	r0, r4
 800106c:	f7ff fc6e 	bl	800094c <selfrel_offset31>
 8001070:	4602      	mov	r2, r0
 8001072:	3404      	adds	r4, #4
 8001074:	63ac      	str	r4, [r5, #56]	; 0x38
 8001076:	4628      	mov	r0, r5
 8001078:	4614      	mov	r4, r2
 800107a:	f011 fce9 	bl	8012a50 <__cxa_begin_cleanup>
 800107e:	2800      	cmp	r0, #0
 8001080:	f43f aeec 	beq.w	8000e5c <__gnu_unwind_pr_common+0x54>
 8001084:	4638      	mov	r0, r7
 8001086:	4622      	mov	r2, r4
 8001088:	210f      	movs	r1, #15
 800108a:	f7ff fe71 	bl	8000d70 <_Unwind_SetGR>
 800108e:	2007      	movs	r0, #7
 8001090:	e6e5      	b.n	8000e5e <__gnu_unwind_pr_common+0x56>
 8001092:	210d      	movs	r1, #13
 8001094:	4638      	mov	r0, r7
 8001096:	f7ff fe45 	bl	8000d24 <_Unwind_GetGR>
 800109a:	6228      	str	r0, [r5, #32]
 800109c:	9b04      	ldr	r3, [sp, #16]
 800109e:	626b      	str	r3, [r5, #36]	; 0x24
 80010a0:	e7db      	b.n	800105a <__gnu_unwind_pr_common+0x252>
 80010a2:	f10b 0001 	add.w	r0, fp, #1
 80010a6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80010aa:	e779      	b.n	8000fa0 <__gnu_unwind_pr_common+0x198>
 80010ac:	08013519 	.word	0x08013519

080010b0 <__aeabi_unwind_cpp_pr0>:
 80010b0:	2300      	movs	r3, #0
 80010b2:	e6a9      	b.n	8000e08 <__gnu_unwind_pr_common>

080010b4 <__aeabi_unwind_cpp_pr1>:
 80010b4:	2301      	movs	r3, #1
 80010b6:	e6a7      	b.n	8000e08 <__gnu_unwind_pr_common>

080010b8 <__aeabi_unwind_cpp_pr2>:
 80010b8:	2302      	movs	r3, #2
 80010ba:	e6a5      	b.n	8000e08 <__gnu_unwind_pr_common>

080010bc <_Unwind_VRS_Pop>:
 80010bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010c0:	4606      	mov	r6, r0
 80010c2:	4615      	mov	r5, r2
 80010c4:	461c      	mov	r4, r3
 80010c6:	b0c3      	sub	sp, #268	; 0x10c
 80010c8:	2904      	cmp	r1, #4
 80010ca:	f200 80b8 	bhi.w	800123e <_Unwind_VRS_Pop+0x182>
 80010ce:	e8df f001 	tbb	[pc, r1]
 80010d2:	569c      	.short	0x569c
 80010d4:	2db6      	.short	0x2db6
 80010d6:	03          	.byte	0x03
 80010d7:	00          	.byte	0x00
 80010d8:	2c00      	cmp	r4, #0
 80010da:	f040 80b0 	bne.w	800123e <_Unwind_VRS_Pop+0x182>
 80010de:	2a10      	cmp	r2, #16
 80010e0:	f200 80ad 	bhi.w	800123e <_Unwind_VRS_Pop+0x182>
 80010e4:	6803      	ldr	r3, [r0, #0]
 80010e6:	06d8      	lsls	r0, r3, #27
 80010e8:	f100 80f1 	bmi.w	80012ce <_Unwind_VRS_Pop+0x212>
 80010ec:	af20      	add	r7, sp, #128	; 0x80
 80010ee:	4638      	mov	r0, r7
 80010f0:	f000 f990 	bl	8001414 <__gnu_Unwind_Save_WMMXC>
 80010f4:	2401      	movs	r4, #1
 80010f6:	4638      	mov	r0, r7
 80010f8:	2300      	movs	r3, #0
 80010fa:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80010fc:	fa04 f203 	lsl.w	r2, r4, r3
 8001100:	422a      	tst	r2, r5
 8001102:	f103 0301 	add.w	r3, r3, #1
 8001106:	d005      	beq.n	8001114 <_Unwind_VRS_Pop+0x58>
 8001108:	460a      	mov	r2, r1
 800110a:	f852 cb04 	ldr.w	ip, [r2], #4
 800110e:	4611      	mov	r1, r2
 8001110:	f8c0 c000 	str.w	ip, [r0]
 8001114:	2b04      	cmp	r3, #4
 8001116:	f100 0004 	add.w	r0, r0, #4
 800111a:	d1ef      	bne.n	80010fc <_Unwind_VRS_Pop+0x40>
 800111c:	4638      	mov	r0, r7
 800111e:	63b1      	str	r1, [r6, #56]	; 0x38
 8001120:	f000 f96e 	bl	8001400 <__gnu_Unwind_Restore_WMMXC>
 8001124:	2000      	movs	r0, #0
 8001126:	b043      	add	sp, #268	; 0x10c
 8001128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800112c:	2c03      	cmp	r4, #3
 800112e:	f040 8086 	bne.w	800123e <_Unwind_VRS_Pop+0x182>
 8001132:	b294      	uxth	r4, r2
 8001134:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001138:	2b10      	cmp	r3, #16
 800113a:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800113e:	d87e      	bhi.n	800123e <_Unwind_VRS_Pop+0x182>
 8001140:	6803      	ldr	r3, [r0, #0]
 8001142:	071f      	lsls	r7, r3, #28
 8001144:	f100 80cb 	bmi.w	80012de <_Unwind_VRS_Pop+0x222>
 8001148:	af20      	add	r7, sp, #128	; 0x80
 800114a:	4638      	mov	r0, r7
 800114c:	f000 f936 	bl	80013bc <__gnu_Unwind_Save_WMMXD>
 8001150:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001152:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001156:	b154      	cbz	r4, 800116e <_Unwind_VRS_Pop+0xb2>
 8001158:	460b      	mov	r3, r1
 800115a:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800115e:	1ad0      	subs	r0, r2, r3
 8001160:	00e4      	lsls	r4, r4, #3
 8001162:	581d      	ldr	r5, [r3, r0]
 8001164:	f843 5b04 	str.w	r5, [r3], #4
 8001168:	428b      	cmp	r3, r1
 800116a:	d1fa      	bne.n	8001162 <_Unwind_VRS_Pop+0xa6>
 800116c:	4422      	add	r2, r4
 800116e:	4638      	mov	r0, r7
 8001170:	63b2      	str	r2, [r6, #56]	; 0x38
 8001172:	f000 f901 	bl	8001378 <__gnu_Unwind_Restore_WMMXD>
 8001176:	2000      	movs	r0, #0
 8001178:	b043      	add	sp, #268	; 0x10c
 800117a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800117e:	2c01      	cmp	r4, #1
 8001180:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8001184:	b295      	uxth	r5, r2
 8001186:	d056      	beq.n	8001236 <_Unwind_VRS_Pop+0x17a>
 8001188:	2c05      	cmp	r4, #5
 800118a:	d158      	bne.n	800123e <_Unwind_VRS_Pop+0x182>
 800118c:	eb08 0905 	add.w	r9, r8, r5
 8001190:	f1b9 0f20 	cmp.w	r9, #32
 8001194:	d853      	bhi.n	800123e <_Unwind_VRS_Pop+0x182>
 8001196:	f1b8 0f0f 	cmp.w	r8, #15
 800119a:	d973      	bls.n	8001284 <_Unwind_VRS_Pop+0x1c8>
 800119c:	46a9      	mov	r9, r5
 800119e:	2d00      	cmp	r5, #0
 80011a0:	f040 8084 	bne.w	80012ac <_Unwind_VRS_Pop+0x1f0>
 80011a4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80011a6:	b365      	cbz	r5, 8001202 <_Unwind_VRS_Pop+0x146>
 80011a8:	af20      	add	r7, sp, #128	; 0x80
 80011aa:	f04f 0900 	mov.w	r9, #0
 80011ae:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80011b2:	3f04      	subs	r7, #4
 80011b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80011b8:	f853 1b04 	ldr.w	r1, [r3], #4
 80011bc:	42ab      	cmp	r3, r5
 80011be:	f847 1f04 	str.w	r1, [r7, #4]!
 80011c2:	d1f9      	bne.n	80011b8 <_Unwind_VRS_Pop+0xfc>
 80011c4:	f1b9 0f00 	cmp.w	r9, #0
 80011c8:	d00f      	beq.n	80011ea <_Unwind_VRS_Pop+0x12e>
 80011ca:	466f      	mov	r7, sp
 80011cc:	4641      	mov	r1, r8
 80011ce:	2910      	cmp	r1, #16
 80011d0:	bf38      	it	cc
 80011d2:	2110      	movcc	r1, #16
 80011d4:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80011d8:	3984      	subs	r1, #132	; 0x84
 80011da:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 80011de:	f853 0b04 	ldr.w	r0, [r3], #4
 80011e2:	42ab      	cmp	r3, r5
 80011e4:	f841 0f04 	str.w	r0, [r1, #4]!
 80011e8:	d1f9      	bne.n	80011de <_Unwind_VRS_Pop+0x122>
 80011ea:	2c01      	cmp	r4, #1
 80011ec:	d07f      	beq.n	80012ee <_Unwind_VRS_Pop+0x232>
 80011ee:	f1b8 0f0f 	cmp.w	r8, #15
 80011f2:	63b5      	str	r5, [r6, #56]	; 0x38
 80011f4:	d942      	bls.n	800127c <_Unwind_VRS_Pop+0x1c0>
 80011f6:	f1b9 0f00 	cmp.w	r9, #0
 80011fa:	d002      	beq.n	8001202 <_Unwind_VRS_Pop+0x146>
 80011fc:	4668      	mov	r0, sp
 80011fe:	f000 f8b3 	bl	8001368 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001202:	2000      	movs	r0, #0
 8001204:	b043      	add	sp, #268	; 0x10c
 8001206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800120a:	b9c4      	cbnz	r4, 800123e <_Unwind_VRS_Pop+0x182>
 800120c:	4623      	mov	r3, r4
 800120e:	2401      	movs	r4, #1
 8001210:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001212:	1d37      	adds	r7, r6, #4
 8001214:	b2a8      	uxth	r0, r5
 8001216:	fa04 f103 	lsl.w	r1, r4, r3
 800121a:	4201      	tst	r1, r0
 800121c:	bf1c      	itt	ne
 800121e:	f852 1b04 	ldrne.w	r1, [r2], #4
 8001222:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8001226:	3301      	adds	r3, #1
 8001228:	2b10      	cmp	r3, #16
 800122a:	d1f4      	bne.n	8001216 <_Unwind_VRS_Pop+0x15a>
 800122c:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8001230:	d1e7      	bne.n	8001202 <_Unwind_VRS_Pop+0x146>
 8001232:	63b2      	str	r2, [r6, #56]	; 0x38
 8001234:	e004      	b.n	8001240 <_Unwind_VRS_Pop+0x184>
 8001236:	eb08 0305 	add.w	r3, r8, r5
 800123a:	2b10      	cmp	r3, #16
 800123c:	d903      	bls.n	8001246 <_Unwind_VRS_Pop+0x18a>
 800123e:	2002      	movs	r0, #2
 8001240:	b043      	add	sp, #268	; 0x10c
 8001242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001246:	f1b8 0f0f 	cmp.w	r8, #15
 800124a:	d8f8      	bhi.n	800123e <_Unwind_VRS_Pop+0x182>
 800124c:	6833      	ldr	r3, [r6, #0]
 800124e:	07da      	lsls	r2, r3, #31
 8001250:	d506      	bpl.n	8001260 <_Unwind_VRS_Pop+0x1a4>
 8001252:	4630      	mov	r0, r6
 8001254:	f023 0303 	bic.w	r3, r3, #3
 8001258:	f840 3b48 	str.w	r3, [r0], #72
 800125c:	f000 f878 	bl	8001350 <__gnu_Unwind_Save_VFP>
 8001260:	af20      	add	r7, sp, #128	; 0x80
 8001262:	4638      	mov	r0, r7
 8001264:	f000 f874 	bl	8001350 <__gnu_Unwind_Save_VFP>
 8001268:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800126a:	2d00      	cmp	r5, #0
 800126c:	d19d      	bne.n	80011aa <_Unwind_VRS_Pop+0xee>
 800126e:	461d      	mov	r5, r3
 8001270:	3504      	adds	r5, #4
 8001272:	4638      	mov	r0, r7
 8001274:	63b5      	str	r5, [r6, #56]	; 0x38
 8001276:	f000 f867 	bl	8001348 <__gnu_Unwind_Restore_VFP>
 800127a:	e7c2      	b.n	8001202 <_Unwind_VRS_Pop+0x146>
 800127c:	a820      	add	r0, sp, #128	; 0x80
 800127e:	f000 f86b 	bl	8001358 <__gnu_Unwind_Restore_VFP_D>
 8001282:	e7b8      	b.n	80011f6 <_Unwind_VRS_Pop+0x13a>
 8001284:	f1b9 0f10 	cmp.w	r9, #16
 8001288:	d93f      	bls.n	800130a <_Unwind_VRS_Pop+0x24e>
 800128a:	f1a9 0910 	sub.w	r9, r9, #16
 800128e:	6833      	ldr	r3, [r6, #0]
 8001290:	07d9      	lsls	r1, r3, #31
 8001292:	d508      	bpl.n	80012a6 <_Unwind_VRS_Pop+0x1ea>
 8001294:	4630      	mov	r0, r6
 8001296:	f023 0301 	bic.w	r3, r3, #1
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	f840 3b48 	str.w	r3, [r0], #72
 80012a2:	f000 f85d 	bl	8001360 <__gnu_Unwind_Save_VFP_D>
 80012a6:	f1b9 0f00 	cmp.w	r9, #0
 80012aa:	d031      	beq.n	8001310 <_Unwind_VRS_Pop+0x254>
 80012ac:	6833      	ldr	r3, [r6, #0]
 80012ae:	075a      	lsls	r2, r3, #29
 80012b0:	d41f      	bmi.n	80012f2 <_Unwind_VRS_Pop+0x236>
 80012b2:	f1b8 0f0f 	cmp.w	r8, #15
 80012b6:	d924      	bls.n	8001302 <_Unwind_VRS_Pop+0x246>
 80012b8:	466f      	mov	r7, sp
 80012ba:	f1c8 0510 	rsb	r5, r8, #16
 80012be:	4638      	mov	r0, r7
 80012c0:	f000 f856 	bl	8001370 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80012c4:	2d00      	cmp	r5, #0
 80012c6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80012c8:	dd80      	ble.n	80011cc <_Unwind_VRS_Pop+0x110>
 80012ca:	af20      	add	r7, sp, #128	; 0x80
 80012cc:	e76f      	b.n	80011ae <_Unwind_VRS_Pop+0xf2>
 80012ce:	f023 0310 	bic.w	r3, r3, #16
 80012d2:	6033      	str	r3, [r6, #0]
 80012d4:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 80012d8:	f000 f89c 	bl	8001414 <__gnu_Unwind_Save_WMMXC>
 80012dc:	e706      	b.n	80010ec <_Unwind_VRS_Pop+0x30>
 80012de:	f023 0308 	bic.w	r3, r3, #8
 80012e2:	6003      	str	r3, [r0, #0]
 80012e4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 80012e8:	f000 f868 	bl	80013bc <__gnu_Unwind_Save_WMMXD>
 80012ec:	e72c      	b.n	8001148 <_Unwind_VRS_Pop+0x8c>
 80012ee:	af20      	add	r7, sp, #128	; 0x80
 80012f0:	e7be      	b.n	8001270 <_Unwind_VRS_Pop+0x1b4>
 80012f2:	4630      	mov	r0, r6
 80012f4:	f023 0304 	bic.w	r3, r3, #4
 80012f8:	f840 3bd0 	str.w	r3, [r0], #208
 80012fc:	f000 f838 	bl	8001370 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001300:	e7d7      	b.n	80012b2 <_Unwind_VRS_Pop+0x1f6>
 8001302:	a820      	add	r0, sp, #128	; 0x80
 8001304:	f000 f82c 	bl	8001360 <__gnu_Unwind_Save_VFP_D>
 8001308:	e7d6      	b.n	80012b8 <_Unwind_VRS_Pop+0x1fc>
 800130a:	f04f 0900 	mov.w	r9, #0
 800130e:	e7be      	b.n	800128e <_Unwind_VRS_Pop+0x1d2>
 8001310:	f1b8 0f0f 	cmp.w	r8, #15
 8001314:	f63f af46 	bhi.w	80011a4 <_Unwind_VRS_Pop+0xe8>
 8001318:	af20      	add	r7, sp, #128	; 0x80
 800131a:	4638      	mov	r0, r7
 800131c:	f000 f820 	bl	8001360 <__gnu_Unwind_Save_VFP_D>
 8001320:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001322:	2d00      	cmp	r5, #0
 8001324:	f47f af41 	bne.w	80011aa <_Unwind_VRS_Pop+0xee>
 8001328:	4638      	mov	r0, r7
 800132a:	f000 f815 	bl	8001358 <__gnu_Unwind_Restore_VFP_D>
 800132e:	e768      	b.n	8001202 <_Unwind_VRS_Pop+0x146>

08001330 <__restore_core_regs>:
 8001330:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001334:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001338:	469c      	mov	ip, r3
 800133a:	46a6      	mov	lr, r4
 800133c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001340:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001344:	46e5      	mov	sp, ip
 8001346:	bd00      	pop	{pc}

08001348 <__gnu_Unwind_Restore_VFP>:
 8001348:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop

08001350 <__gnu_Unwind_Save_VFP>:
 8001350:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <__gnu_Unwind_Restore_VFP_D>:
 8001358:	ec90 0b20 	vldmia	r0, {d0-d15}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop

08001360 <__gnu_Unwind_Save_VFP_D>:
 8001360:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001368:	ecd0 0b20 	vldmia	r0, {d16-d31}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001370:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop

08001378 <__gnu_Unwind_Restore_WMMXD>:
 8001378:	ecf0 0102 	ldfe	f0, [r0], #8
 800137c:	ecf0 1102 	ldfe	f1, [r0], #8
 8001380:	ecf0 2102 	ldfe	f2, [r0], #8
 8001384:	ecf0 3102 	ldfe	f3, [r0], #8
 8001388:	ecf0 4102 	ldfe	f4, [r0], #8
 800138c:	ecf0 5102 	ldfe	f5, [r0], #8
 8001390:	ecf0 6102 	ldfe	f6, [r0], #8
 8001394:	ecf0 7102 	ldfe	f7, [r0], #8
 8001398:	ecf0 8102 	ldfp	f0, [r0], #8
 800139c:	ecf0 9102 	ldfp	f1, [r0], #8
 80013a0:	ecf0 a102 	ldfp	f2, [r0], #8
 80013a4:	ecf0 b102 	ldfp	f3, [r0], #8
 80013a8:	ecf0 c102 	ldfp	f4, [r0], #8
 80013ac:	ecf0 d102 	ldfp	f5, [r0], #8
 80013b0:	ecf0 e102 	ldfp	f6, [r0], #8
 80013b4:	ecf0 f102 	ldfp	f7, [r0], #8
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop

080013bc <__gnu_Unwind_Save_WMMXD>:
 80013bc:	ece0 0102 	stfe	f0, [r0], #8
 80013c0:	ece0 1102 	stfe	f1, [r0], #8
 80013c4:	ece0 2102 	stfe	f2, [r0], #8
 80013c8:	ece0 3102 	stfe	f3, [r0], #8
 80013cc:	ece0 4102 	stfe	f4, [r0], #8
 80013d0:	ece0 5102 	stfe	f5, [r0], #8
 80013d4:	ece0 6102 	stfe	f6, [r0], #8
 80013d8:	ece0 7102 	stfe	f7, [r0], #8
 80013dc:	ece0 8102 	stfp	f0, [r0], #8
 80013e0:	ece0 9102 	stfp	f1, [r0], #8
 80013e4:	ece0 a102 	stfp	f2, [r0], #8
 80013e8:	ece0 b102 	stfp	f3, [r0], #8
 80013ec:	ece0 c102 	stfp	f4, [r0], #8
 80013f0:	ece0 d102 	stfp	f5, [r0], #8
 80013f4:	ece0 e102 	stfp	f6, [r0], #8
 80013f8:	ece0 f102 	stfp	f7, [r0], #8
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop

08001400 <__gnu_Unwind_Restore_WMMXC>:
 8001400:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001404:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001408:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800140c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop

08001414 <__gnu_Unwind_Save_WMMXC>:
 8001414:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001418:	fca0 9101 	stc2	1, cr9, [r0], #4
 800141c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001420:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop

08001428 <_Unwind_RaiseException>:
 8001428:	46ec      	mov	ip, sp
 800142a:	b500      	push	{lr}
 800142c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001430:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e92d 000c 	stmdb	sp!, {r2, r3}
 800143c:	a901      	add	r1, sp, #4
 800143e:	f7ff fbe7 	bl	8000c10 <__gnu_Unwind_RaiseException>
 8001442:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001446:	b012      	add	sp, #72	; 0x48
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop

0800144c <_Unwind_Resume>:
 800144c:	46ec      	mov	ip, sp
 800144e:	b500      	push	{lr}
 8001450:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001454:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001460:	a901      	add	r1, sp, #4
 8001462:	f7ff fc13 	bl	8000c8c <__gnu_Unwind_Resume>
 8001466:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800146a:	b012      	add	sp, #72	; 0x48
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop

08001470 <_Unwind_Resume_or_Rethrow>:
 8001470:	46ec      	mov	ip, sp
 8001472:	b500      	push	{lr}
 8001474:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001478:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001484:	a901      	add	r1, sp, #4
 8001486:	f7ff fc23 	bl	8000cd0 <__gnu_Unwind_Resume_or_Rethrow>
 800148a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800148e:	b012      	add	sp, #72	; 0x48
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <_Unwind_ForcedUnwind>:
 8001494:	46ec      	mov	ip, sp
 8001496:	b500      	push	{lr}
 8001498:	e92d 5000 	stmdb	sp!, {ip, lr}
 800149c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80014a8:	ab01      	add	r3, sp, #4
 80014aa:	f7ff fbe5 	bl	8000c78 <__gnu_Unwind_ForcedUnwind>
 80014ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80014b2:	b012      	add	sp, #72	; 0x48
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop

080014b8 <_Unwind_Backtrace>:
 80014b8:	46ec      	mov	ip, sp
 80014ba:	b500      	push	{lr}
 80014bc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80014c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80014cc:	aa01      	add	r2, sp, #4
 80014ce:	f7ff fc5b 	bl	8000d88 <__gnu_Unwind_Backtrace>
 80014d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80014d6:	b012      	add	sp, #72	; 0x48
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop

080014dc <next_unwind_byte>:
 80014dc:	7a02      	ldrb	r2, [r0, #8]
 80014de:	4603      	mov	r3, r0
 80014e0:	b97a      	cbnz	r2, 8001502 <next_unwind_byte+0x26>
 80014e2:	7a42      	ldrb	r2, [r0, #9]
 80014e4:	b1a2      	cbz	r2, 8001510 <next_unwind_byte+0x34>
 80014e6:	f04f 0c03 	mov.w	ip, #3
 80014ea:	6841      	ldr	r1, [r0, #4]
 80014ec:	3a01      	subs	r2, #1
 80014ee:	7242      	strb	r2, [r0, #9]
 80014f0:	6808      	ldr	r0, [r1, #0]
 80014f2:	1d0a      	adds	r2, r1, #4
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	0202      	lsls	r2, r0, #8
 80014f8:	f883 c008 	strb.w	ip, [r3, #8]
 80014fc:	0e00      	lsrs	r0, r0, #24
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	4770      	bx	lr
 8001502:	6800      	ldr	r0, [r0, #0]
 8001504:	3a01      	subs	r2, #1
 8001506:	721a      	strb	r2, [r3, #8]
 8001508:	0202      	lsls	r2, r0, #8
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	0e00      	lsrs	r0, r0, #24
 800150e:	4770      	bx	lr
 8001510:	20b0      	movs	r0, #176	; 0xb0
 8001512:	4770      	bx	lr

08001514 <_Unwind_GetGR.constprop.0>:
 8001514:	2300      	movs	r3, #0
 8001516:	b500      	push	{lr}
 8001518:	b085      	sub	sp, #20
 800151a:	a903      	add	r1, sp, #12
 800151c:	9100      	str	r1, [sp, #0]
 800151e:	220c      	movs	r2, #12
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fbe7 	bl	8000cf4 <_Unwind_VRS_Get>
 8001526:	9803      	ldr	r0, [sp, #12]
 8001528:	b005      	add	sp, #20
 800152a:	f85d fb04 	ldr.w	pc, [sp], #4
 800152e:	bf00      	nop

08001530 <unwind_UCB_from_context>:
 8001530:	e7f0      	b.n	8001514 <_Unwind_GetGR.constprop.0>
 8001532:	bf00      	nop

08001534 <__gnu_unwind_execute>:
 8001534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001538:	f04f 0800 	mov.w	r8, #0
 800153c:	4605      	mov	r5, r0
 800153e:	460e      	mov	r6, r1
 8001540:	b085      	sub	sp, #20
 8001542:	4630      	mov	r0, r6
 8001544:	f7ff ffca 	bl	80014dc <next_unwind_byte>
 8001548:	28b0      	cmp	r0, #176	; 0xb0
 800154a:	4604      	mov	r4, r0
 800154c:	f000 80ba 	beq.w	80016c4 <__gnu_unwind_execute+0x190>
 8001550:	0607      	lsls	r7, r0, #24
 8001552:	d520      	bpl.n	8001596 <__gnu_unwind_execute+0x62>
 8001554:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001558:	2b80      	cmp	r3, #128	; 0x80
 800155a:	d04d      	beq.n	80015f8 <__gnu_unwind_execute+0xc4>
 800155c:	2b90      	cmp	r3, #144	; 0x90
 800155e:	d036      	beq.n	80015ce <__gnu_unwind_execute+0x9a>
 8001560:	2ba0      	cmp	r3, #160	; 0xa0
 8001562:	d060      	beq.n	8001626 <__gnu_unwind_execute+0xf2>
 8001564:	2bb0      	cmp	r3, #176	; 0xb0
 8001566:	d073      	beq.n	8001650 <__gnu_unwind_execute+0x11c>
 8001568:	2bc0      	cmp	r3, #192	; 0xc0
 800156a:	f000 808a 	beq.w	8001682 <__gnu_unwind_execute+0x14e>
 800156e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001572:	2bd0      	cmp	r3, #208	; 0xd0
 8001574:	d10b      	bne.n	800158e <__gnu_unwind_execute+0x5a>
 8001576:	f000 0207 	and.w	r2, r0, #7
 800157a:	3201      	adds	r2, #1
 800157c:	2305      	movs	r3, #5
 800157e:	2101      	movs	r1, #1
 8001580:	4628      	mov	r0, r5
 8001582:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001586:	f7ff fd99 	bl	80010bc <_Unwind_VRS_Pop>
 800158a:	2800      	cmp	r0, #0
 800158c:	d0d9      	beq.n	8001542 <__gnu_unwind_execute+0xe>
 800158e:	2009      	movs	r0, #9
 8001590:	b005      	add	sp, #20
 8001592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001596:	0083      	lsls	r3, r0, #2
 8001598:	b2db      	uxtb	r3, r3
 800159a:	1d1f      	adds	r7, r3, #4
 800159c:	2300      	movs	r3, #0
 800159e:	f10d 090c 	add.w	r9, sp, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	220d      	movs	r2, #13
 80015a6:	4628      	mov	r0, r5
 80015a8:	f8cd 9000 	str.w	r9, [sp]
 80015ac:	f7ff fba2 	bl	8000cf4 <_Unwind_VRS_Get>
 80015b0:	9b03      	ldr	r3, [sp, #12]
 80015b2:	0660      	lsls	r0, r4, #25
 80015b4:	bf4c      	ite	mi
 80015b6:	1bdf      	submi	r7, r3, r7
 80015b8:	18ff      	addpl	r7, r7, r3
 80015ba:	2300      	movs	r3, #0
 80015bc:	220d      	movs	r2, #13
 80015be:	4628      	mov	r0, r5
 80015c0:	4619      	mov	r1, r3
 80015c2:	f8cd 9000 	str.w	r9, [sp]
 80015c6:	9703      	str	r7, [sp, #12]
 80015c8:	f7ff fbba 	bl	8000d40 <_Unwind_VRS_Set>
 80015cc:	e7b9      	b.n	8001542 <__gnu_unwind_execute+0xe>
 80015ce:	f000 030d 	and.w	r3, r0, #13
 80015d2:	2b0d      	cmp	r3, #13
 80015d4:	d0db      	beq.n	800158e <__gnu_unwind_execute+0x5a>
 80015d6:	2300      	movs	r3, #0
 80015d8:	af03      	add	r7, sp, #12
 80015da:	4619      	mov	r1, r3
 80015dc:	f000 020f 	and.w	r2, r0, #15
 80015e0:	9700      	str	r7, [sp, #0]
 80015e2:	4628      	mov	r0, r5
 80015e4:	f7ff fb86 	bl	8000cf4 <_Unwind_VRS_Get>
 80015e8:	2300      	movs	r3, #0
 80015ea:	220d      	movs	r2, #13
 80015ec:	4628      	mov	r0, r5
 80015ee:	4619      	mov	r1, r3
 80015f0:	9700      	str	r7, [sp, #0]
 80015f2:	f7ff fba5 	bl	8000d40 <_Unwind_VRS_Set>
 80015f6:	e7a4      	b.n	8001542 <__gnu_unwind_execute+0xe>
 80015f8:	4630      	mov	r0, r6
 80015fa:	f7ff ff6f 	bl	80014dc <next_unwind_byte>
 80015fe:	0224      	lsls	r4, r4, #8
 8001600:	4320      	orrs	r0, r4
 8001602:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001606:	d0c2      	beq.n	800158e <__gnu_unwind_execute+0x5a>
 8001608:	2300      	movs	r3, #0
 800160a:	0104      	lsls	r4, r0, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4628      	mov	r0, r5
 8001610:	b2a2      	uxth	r2, r4
 8001612:	f7ff fd53 	bl	80010bc <_Unwind_VRS_Pop>
 8001616:	2800      	cmp	r0, #0
 8001618:	d1b9      	bne.n	800158e <__gnu_unwind_execute+0x5a>
 800161a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800161e:	bf18      	it	ne
 8001620:	f04f 0801 	movne.w	r8, #1
 8001624:	e78d      	b.n	8001542 <__gnu_unwind_execute+0xe>
 8001626:	43c3      	mvns	r3, r0
 8001628:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	411a      	asrs	r2, r3
 8001632:	2300      	movs	r3, #0
 8001634:	0701      	lsls	r1, r0, #28
 8001636:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800163a:	bf48      	it	mi
 800163c:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001640:	4628      	mov	r0, r5
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fd3a 	bl	80010bc <_Unwind_VRS_Pop>
 8001648:	2800      	cmp	r0, #0
 800164a:	f43f af7a 	beq.w	8001542 <__gnu_unwind_execute+0xe>
 800164e:	e79e      	b.n	800158e <__gnu_unwind_execute+0x5a>
 8001650:	28b1      	cmp	r0, #177	; 0xb1
 8001652:	d03c      	beq.n	80016ce <__gnu_unwind_execute+0x19a>
 8001654:	28b2      	cmp	r0, #178	; 0xb2
 8001656:	f000 80b0 	beq.w	80017ba <__gnu_unwind_execute+0x286>
 800165a:	28b3      	cmp	r0, #179	; 0xb3
 800165c:	d04a      	beq.n	80016f4 <__gnu_unwind_execute+0x1c0>
 800165e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001662:	2bb4      	cmp	r3, #180	; 0xb4
 8001664:	d093      	beq.n	800158e <__gnu_unwind_execute+0x5a>
 8001666:	2301      	movs	r3, #1
 8001668:	f000 0207 	and.w	r2, r0, #7
 800166c:	441a      	add	r2, r3
 800166e:	4628      	mov	r0, r5
 8001670:	4619      	mov	r1, r3
 8001672:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001676:	f7ff fd21 	bl	80010bc <_Unwind_VRS_Pop>
 800167a:	2800      	cmp	r0, #0
 800167c:	f43f af61 	beq.w	8001542 <__gnu_unwind_execute+0xe>
 8001680:	e785      	b.n	800158e <__gnu_unwind_execute+0x5a>
 8001682:	28c6      	cmp	r0, #198	; 0xc6
 8001684:	d04f      	beq.n	8001726 <__gnu_unwind_execute+0x1f2>
 8001686:	28c7      	cmp	r0, #199	; 0xc7
 8001688:	d061      	beq.n	800174e <__gnu_unwind_execute+0x21a>
 800168a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800168e:	2bc0      	cmp	r3, #192	; 0xc0
 8001690:	d070      	beq.n	8001774 <__gnu_unwind_execute+0x240>
 8001692:	28c8      	cmp	r0, #200	; 0xc8
 8001694:	d07c      	beq.n	8001790 <__gnu_unwind_execute+0x25c>
 8001696:	28c9      	cmp	r0, #201	; 0xc9
 8001698:	f47f af79 	bne.w	800158e <__gnu_unwind_execute+0x5a>
 800169c:	4630      	mov	r0, r6
 800169e:	f7ff ff1d 	bl	80014dc <next_unwind_byte>
 80016a2:	2305      	movs	r3, #5
 80016a4:	4602      	mov	r2, r0
 80016a6:	2101      	movs	r1, #1
 80016a8:	4628      	mov	r0, r5
 80016aa:	0314      	lsls	r4, r2, #12
 80016ac:	f002 020f 	and.w	r2, r2, #15
 80016b0:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 80016b4:	440a      	add	r2, r1
 80016b6:	4322      	orrs	r2, r4
 80016b8:	f7ff fd00 	bl	80010bc <_Unwind_VRS_Pop>
 80016bc:	2800      	cmp	r0, #0
 80016be:	f43f af40 	beq.w	8001542 <__gnu_unwind_execute+0xe>
 80016c2:	e764      	b.n	800158e <__gnu_unwind_execute+0x5a>
 80016c4:	f1b8 0f00 	cmp.w	r8, #0
 80016c8:	d01c      	beq.n	8001704 <__gnu_unwind_execute+0x1d0>
 80016ca:	2000      	movs	r0, #0
 80016cc:	e760      	b.n	8001590 <__gnu_unwind_execute+0x5c>
 80016ce:	4630      	mov	r0, r6
 80016d0:	f7ff ff04 	bl	80014dc <next_unwind_byte>
 80016d4:	4602      	mov	r2, r0
 80016d6:	2800      	cmp	r0, #0
 80016d8:	f43f af59 	beq.w	800158e <__gnu_unwind_execute+0x5a>
 80016dc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80016e0:	f47f af55 	bne.w	800158e <__gnu_unwind_execute+0x5a>
 80016e4:	4619      	mov	r1, r3
 80016e6:	4628      	mov	r0, r5
 80016e8:	f7ff fce8 	bl	80010bc <_Unwind_VRS_Pop>
 80016ec:	2800      	cmp	r0, #0
 80016ee:	f43f af28 	beq.w	8001542 <__gnu_unwind_execute+0xe>
 80016f2:	e74c      	b.n	800158e <__gnu_unwind_execute+0x5a>
 80016f4:	4630      	mov	r0, r6
 80016f6:	f7ff fef1 	bl	80014dc <next_unwind_byte>
 80016fa:	2301      	movs	r3, #1
 80016fc:	4602      	mov	r2, r0
 80016fe:	4619      	mov	r1, r3
 8001700:	4628      	mov	r0, r5
 8001702:	e7d2      	b.n	80016aa <__gnu_unwind_execute+0x176>
 8001704:	ac03      	add	r4, sp, #12
 8001706:	4643      	mov	r3, r8
 8001708:	220e      	movs	r2, #14
 800170a:	4641      	mov	r1, r8
 800170c:	4628      	mov	r0, r5
 800170e:	9400      	str	r4, [sp, #0]
 8001710:	f7ff faf0 	bl	8000cf4 <_Unwind_VRS_Get>
 8001714:	4643      	mov	r3, r8
 8001716:	220f      	movs	r2, #15
 8001718:	4628      	mov	r0, r5
 800171a:	4641      	mov	r1, r8
 800171c:	9400      	str	r4, [sp, #0]
 800171e:	f7ff fb0f 	bl	8000d40 <_Unwind_VRS_Set>
 8001722:	4640      	mov	r0, r8
 8001724:	e734      	b.n	8001590 <__gnu_unwind_execute+0x5c>
 8001726:	4630      	mov	r0, r6
 8001728:	f7ff fed8 	bl	80014dc <next_unwind_byte>
 800172c:	4602      	mov	r2, r0
 800172e:	2303      	movs	r3, #3
 8001730:	0314      	lsls	r4, r2, #12
 8001732:	f002 020f 	and.w	r2, r2, #15
 8001736:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 800173a:	3201      	adds	r2, #1
 800173c:	4628      	mov	r0, r5
 800173e:	4619      	mov	r1, r3
 8001740:	4322      	orrs	r2, r4
 8001742:	f7ff fcbb 	bl	80010bc <_Unwind_VRS_Pop>
 8001746:	2800      	cmp	r0, #0
 8001748:	f43f aefb 	beq.w	8001542 <__gnu_unwind_execute+0xe>
 800174c:	e71f      	b.n	800158e <__gnu_unwind_execute+0x5a>
 800174e:	4630      	mov	r0, r6
 8001750:	f7ff fec4 	bl	80014dc <next_unwind_byte>
 8001754:	4602      	mov	r2, r0
 8001756:	2800      	cmp	r0, #0
 8001758:	f43f af19 	beq.w	800158e <__gnu_unwind_execute+0x5a>
 800175c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001760:	f47f af15 	bne.w	800158e <__gnu_unwind_execute+0x5a>
 8001764:	2104      	movs	r1, #4
 8001766:	4628      	mov	r0, r5
 8001768:	f7ff fca8 	bl	80010bc <_Unwind_VRS_Pop>
 800176c:	2800      	cmp	r0, #0
 800176e:	f43f aee8 	beq.w	8001542 <__gnu_unwind_execute+0xe>
 8001772:	e70c      	b.n	800158e <__gnu_unwind_execute+0x5a>
 8001774:	2303      	movs	r3, #3
 8001776:	f000 020f 	and.w	r2, r0, #15
 800177a:	3201      	adds	r2, #1
 800177c:	4628      	mov	r0, r5
 800177e:	4619      	mov	r1, r3
 8001780:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001784:	f7ff fc9a 	bl	80010bc <_Unwind_VRS_Pop>
 8001788:	2800      	cmp	r0, #0
 800178a:	f43f aeda 	beq.w	8001542 <__gnu_unwind_execute+0xe>
 800178e:	e6fe      	b.n	800158e <__gnu_unwind_execute+0x5a>
 8001790:	4630      	mov	r0, r6
 8001792:	f7ff fea3 	bl	80014dc <next_unwind_byte>
 8001796:	4602      	mov	r2, r0
 8001798:	2101      	movs	r1, #1
 800179a:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 800179e:	f002 020f 	and.w	r2, r2, #15
 80017a2:	3410      	adds	r4, #16
 80017a4:	440a      	add	r2, r1
 80017a6:	2305      	movs	r3, #5
 80017a8:	4628      	mov	r0, r5
 80017aa:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80017ae:	f7ff fc85 	bl	80010bc <_Unwind_VRS_Pop>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	f43f aec5 	beq.w	8001542 <__gnu_unwind_execute+0xe>
 80017b8:	e6e9      	b.n	800158e <__gnu_unwind_execute+0x5a>
 80017ba:	2300      	movs	r3, #0
 80017bc:	f10d 090c 	add.w	r9, sp, #12
 80017c0:	220d      	movs	r2, #13
 80017c2:	4619      	mov	r1, r3
 80017c4:	4628      	mov	r0, r5
 80017c6:	f8cd 9000 	str.w	r9, [sp]
 80017ca:	f7ff fa93 	bl	8000cf4 <_Unwind_VRS_Get>
 80017ce:	4630      	mov	r0, r6
 80017d0:	f7ff fe84 	bl	80014dc <next_unwind_byte>
 80017d4:	0602      	lsls	r2, r0, #24
 80017d6:	f04f 0402 	mov.w	r4, #2
 80017da:	d50c      	bpl.n	80017f6 <__gnu_unwind_execute+0x2c2>
 80017dc:	9b03      	ldr	r3, [sp, #12]
 80017de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80017e2:	40a0      	lsls	r0, r4
 80017e4:	4418      	add	r0, r3
 80017e6:	9003      	str	r0, [sp, #12]
 80017e8:	4630      	mov	r0, r6
 80017ea:	f7ff fe77 	bl	80014dc <next_unwind_byte>
 80017ee:	0603      	lsls	r3, r0, #24
 80017f0:	f104 0407 	add.w	r4, r4, #7
 80017f4:	d4f2      	bmi.n	80017dc <__gnu_unwind_execute+0x2a8>
 80017f6:	9b03      	ldr	r3, [sp, #12]
 80017f8:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80017fc:	40a2      	lsls	r2, r4
 80017fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001802:	441a      	add	r2, r3
 8001804:	2300      	movs	r3, #0
 8001806:	9203      	str	r2, [sp, #12]
 8001808:	4628      	mov	r0, r5
 800180a:	220d      	movs	r2, #13
 800180c:	4619      	mov	r1, r3
 800180e:	f8cd 9000 	str.w	r9, [sp]
 8001812:	f7ff fa95 	bl	8000d40 <_Unwind_VRS_Set>
 8001816:	e694      	b.n	8001542 <__gnu_unwind_execute+0xe>

08001818 <__gnu_unwind_frame>:
 8001818:	460b      	mov	r3, r1
 800181a:	f04f 0c03 	mov.w	ip, #3
 800181e:	b500      	push	{lr}
 8001820:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001822:	4618      	mov	r0, r3
 8001824:	6853      	ldr	r3, [r2, #4]
 8001826:	b085      	sub	sp, #20
 8001828:	3208      	adds	r2, #8
 800182a:	9202      	str	r2, [sp, #8]
 800182c:	a901      	add	r1, sp, #4
 800182e:	0e1a      	lsrs	r2, r3, #24
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	f88d c00c 	strb.w	ip, [sp, #12]
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	f88d 200d 	strb.w	r2, [sp, #13]
 800183c:	f7ff fe7a 	bl	8001534 <__gnu_unwind_execute>
 8001840:	b005      	add	sp, #20
 8001842:	f85d fb04 	ldr.w	pc, [sp], #4
 8001846:	bf00      	nop

08001848 <_Unwind_GetRegionStart>:
 8001848:	b508      	push	{r3, lr}
 800184a:	f7ff fe71 	bl	8001530 <unwind_UCB_from_context>
 800184e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001850:	bd08      	pop	{r3, pc}
 8001852:	bf00      	nop

08001854 <_Unwind_GetLanguageSpecificData>:
 8001854:	b508      	push	{r3, lr}
 8001856:	f7ff fe6b 	bl	8001530 <unwind_UCB_from_context>
 800185a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800185c:	79c3      	ldrb	r3, [r0, #7]
 800185e:	3302      	adds	r3, #2
 8001860:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001864:	bd08      	pop	{r3, pc}
 8001866:	bf00      	nop

08001868 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	2203      	movs	r2, #3
 800189c:	4798      	blx	r3
    }
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bf0c      	ite	eq
 80018b8:	2301      	moveq	r3, #1
 80018ba:	2300      	movne	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <_ZN12CFPushButton6millisEv>:
        
        // Methods.
        void _buttonReleased(int pressedTime);                                                      // Called when the button is released.

		bool digitalRead(int pin);
        long millis()
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
        {return HAL_GetTick();}
 80018d0:	f004 ffa6 	bl	8006820 <HAL_GetTick>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ffca 	bl	8001882 <_ZNSt14_Function_baseD1Ev>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_ZN12CFPushButtonC1EP12GPIO_TypeDeftii>:
/**
 * Constructor.
 *
 * @param pinPushButton Push Button pin.
 */
CFPushButton::CFPushButton( GPIO_TypeDef* pinBank, uint16_t pinPushButton, int shortPressTime, int longPressTime):
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	80fb      	strh	r3, [r7, #6]
		_shortPressTime(shortPressTime),
		_longPressTime(longPressTime),
		_state(0),
		_pressTime(0),
        _pulledHigh(false),
        _callbackTime(0) {
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	801a      	strh	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	761a      	strb	r2, [r3, #24]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	61da      	str	r2, [r3, #28]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3320      	adds	r3, #32
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f916 	bl	8001b6e <_ZNSt8functionIFvvEEC1Ev>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3330      	adds	r3, #48	; 0x30
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f911 	bl	8001b6e <_ZNSt8functionIFvvEEC1Ev>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3340      	adds	r3, #64	; 0x40
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f90c 	bl	8001b6e <_ZNSt8functionIFvvEEC1Ev>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3350      	adds	r3, #80	; 0x50
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f907 	bl	8001b6e <_ZNSt8functionIFvvEEC1Ev>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3360      	adds	r3, #96	; 0x60
 8001964:	4618      	mov	r0, r3
 8001966:	f000 f902 	bl	8001b6e <_ZNSt8functionIFvvEEC1Ev>
    
}
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_ZN12CFPushButton11digitalReadEi>:
//	pin%=16;
//	return bank;
//}

bool CFPushButton::digitalRead(int pin)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
//	GPIO_TypeDef *bank = getBankAndHALPin(pin);
	return HAL_GPIO_ReadPin(_pinBank, _pinPushButton);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	4610      	mov	r0, r2
 800198a:	f006 fa5f 	bl	8007e4c <HAL_GPIO_ReadPin>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf14      	ite	ne
 8001994:	2301      	movne	r3, #1
 8001996:	2300      	moveq	r3, #0
 8001998:	b2db      	uxtb	r3, r3
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_ZN12CFPushButton4loopEv>:

/**
 * Control push button state.
 */
void CFPushButton::loop() {
 80019a2:	b590      	push	{r4, r7, lr}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
    _state = digitalRead(_pinPushButton);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	4619      	mov	r1, r3
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ffdf 	bl	8001974 <_ZN12CFPushButton11digitalReadEi>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	611a      	str	r2, [r3, #16]
    /*
        Check if button is not pressed.
        - If the button is pulled up, LOW is pressed.
        - If the button is pulled down, HIGH is pressed.
    */
    if (_state == (isPulledUp()) ? LOW : HIGH) {
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691c      	ldr	r4, [r3, #16]
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f8ad 	bl	8001b22 <_ZN12CFPushButton10isPulledUpEv>
 80019c8:	4603      	mov	r3, r0
 80019ca:	429c      	cmp	r4, r3
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d04c      	beq.n	8001a72 <_ZN12CFPushButton4loopEv+0xd0>
        // Button is pressed.
        // Check if _pressTime is zero, if true, this is the first loop when pressed.
        long currTime = millis();
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff75 	bl	80018c8 <_ZN12CFPushButton6millisEv>
 80019de:	4603      	mov	r3, r0
 80019e0:	60fb      	str	r3, [r7, #12]
        if (_pressTime == 0) {
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d103      	bne.n	80019f2 <_ZN12CFPushButton4loopEv+0x50>
            _pressTime = currTime; // Store the time it was pressed.
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	615a      	str	r2, [r3, #20]
            _buttonReleased(millis() - _pressTime);
            _pressTime = 0;
            _callbackTime = 0;
        }
    }
}
 80019f0:	e054      	b.n	8001a9c <_ZN12CFPushButton4loopEv+0xfa>
            if (currTime - _pressTime > _longPressTime && _callbackTime == 1) {
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	1ad2      	subs	r2, r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dd17      	ble.n	8001a32 <_ZN12CFPushButton4loopEv+0x90>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d113      	bne.n	8001a32 <_ZN12CFPushButton4loopEv+0x90>
                if (_onLongPressReachedCallback != NULL) {
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3330      	adds	r3, #48	; 0x30
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f8b9 	bl	8001b88 <_ZStneIvJEEbRKSt8functionIFT_DpT0_EEDn>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <_ZN12CFPushButton4loopEv+0x84>
                    _onLongPressReachedCallback();
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3330      	adds	r3, #48	; 0x30
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 f8be 	bl	8001ba2 <_ZNKSt8functionIFvvEEclEv>
                _callbackTime++;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	61da      	str	r2, [r3, #28]
}
 8001a30:	e034      	b.n	8001a9c <_ZN12CFPushButton4loopEv+0xfa>
            } else if (currTime - _pressTime > _shortPressTime && _callbackTime == 0) {
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	1ad2      	subs	r2, r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	dd2c      	ble.n	8001a9c <_ZN12CFPushButton4loopEv+0xfa>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d128      	bne.n	8001a9c <_ZN12CFPushButton4loopEv+0xfa>
                if (_onShortPressReachedCallback != NULL) {
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3320      	adds	r3, #32
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f899 	bl	8001b88 <_ZStneIvJEEbRKSt8functionIFT_DpT0_EEDn>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <_ZN12CFPushButton4loopEv+0xc4>
                    _onShortPressReachedCallback();
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3320      	adds	r3, #32
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 f89e 	bl	8001ba2 <_ZNKSt8functionIFvvEEclEv>
                _callbackTime++;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	61da      	str	r2, [r3, #28]
}
 8001a70:	e014      	b.n	8001a9c <_ZN12CFPushButton4loopEv+0xfa>
        if (_pressTime > 0) {
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	dd10      	ble.n	8001a9c <_ZN12CFPushButton4loopEv+0xfa>
            _buttonReleased(millis() - _pressTime);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ff24 	bl	80018c8 <_ZN12CFPushButton6millisEv>
 8001a80:	4602      	mov	r2, r0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4619      	mov	r1, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f80a 	bl	8001aa4 <_ZN12CFPushButton15_buttonReleasedEi>
            _pressTime = 0;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
            _callbackTime = 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	61da      	str	r2, [r3, #28]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}

08001aa4 <_ZN12CFPushButton15_buttonReleasedEi>:
/**
 * Called when the button is released.
 
 * @param pressedTime Time that button was pressed.
 */
void CFPushButton::_buttonReleased(int pressedTime) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
     if (pressedTime > _longPressTime) {
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dd0e      	ble.n	8001ad6 <_ZN12CFPushButton15_buttonReleasedEi+0x32>
        if (_onLongPressCallback != NULL) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3360      	adds	r3, #96	; 0x60
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f862 	bl	8001b88 <_ZStneIvJEEbRKSt8functionIFT_DpT0_EEDn>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d027      	beq.n	8001b1a <_ZN12CFPushButton15_buttonReleasedEi+0x76>
            _onLongPressCallback();
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3360      	adds	r3, #96	; 0x60
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f867 	bl	8001ba2 <_ZNKSt8functionIFvvEEclEv>
    } else {
        if (_onPressCallback != NULL) {
            _onPressCallback();
        }
    }
}
 8001ad4:	e021      	b.n	8001b1a <_ZN12CFPushButton15_buttonReleasedEi+0x76>
    } else if (pressedTime > _shortPressTime) {
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dd0e      	ble.n	8001afe <_ZN12CFPushButton15_buttonReleasedEi+0x5a>
        if (_onShortPressCallback != NULL) {
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3350      	adds	r3, #80	; 0x50
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f84e 	bl	8001b88 <_ZStneIvJEEbRKSt8functionIFT_DpT0_EEDn>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d013      	beq.n	8001b1a <_ZN12CFPushButton15_buttonReleasedEi+0x76>
            _onShortPressCallback();
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3350      	adds	r3, #80	; 0x50
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f853 	bl	8001ba2 <_ZNKSt8functionIFvvEEclEv>
}
 8001afc:	e00d      	b.n	8001b1a <_ZN12CFPushButton15_buttonReleasedEi+0x76>
        if (_onPressCallback != NULL) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3340      	adds	r3, #64	; 0x40
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 f83f 	bl	8001b88 <_ZStneIvJEEbRKSt8functionIFT_DpT0_EEDn>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d004      	beq.n	8001b1a <_ZN12CFPushButton15_buttonReleasedEi+0x76>
            _onPressCallback();
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3340      	adds	r3, #64	; 0x40
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 f844 	bl	8001ba2 <_ZNKSt8functionIFvvEEclEv>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZN12CFPushButton10isPulledUpEv>:
/**
 * True if button is pulled up.
 * 
 * @returns True if button is pulled high.
 */
bool CFPushButton::isPulledUp() {
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
    return _pulledHigh;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7e1b      	ldrb	r3, [r3, #24]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <_ZN12CFPushButton11setPulledUpEv>:

/**
 * Define button is pulled up.
 */
void CFPushButton::setPulledUp() {
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    _pulledHigh = true;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	761a      	strb	r2, [r3, #24]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <_ZN12CFPushButton30setOnShortPressReachedCallbackESt8functionIFvvEE>:
/**
 * Define method that should be called when short time is reached.
 *
 * @param func No-parameter and no-return function.
 */
void CFPushButton::setOnShortPressReachedCallback(std::function<void()> func) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
    _onShortPressReachedCallback = func;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3320      	adds	r3, #32
 8001b5e:	6839      	ldr	r1, [r7, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f834 	bl	8001bce <_ZNSt8functionIFvvEEaSERKS1_>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fe75 	bl	8001868 <_ZNSt14_Function_baseC1Ev>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_ZStneIvJEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f836 	bl	8001c04 <_ZNKSt8functionIFvvEEcvbEv>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_ZNKSt8functionIFvvEEclEv>:
    function<_Res(_ArgTypes...)>::
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
      if (_M_empty())
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fe7b 	bl	80018a8 <_ZNKSt14_Function_base8_M_emptyEv>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 8001bb8:	f011 fc7d 	bl	80134b6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4798      	blx	r3
 8001bc6:	bf00      	nop
    }
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_ZNSt8functionIFvvEEaSERKS1_>:
      operator=(const function& __x)
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8001bd8:	f107 0308 	add.w	r3, r7, #8
 8001bdc:	6839      	ldr	r1, [r7, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f820 	bl	8001c24 <_ZNSt8functionIFvvEEC1ERKS1_>
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f843 	bl	8001c76 <_ZNSt8functionIFvvEE4swapERS1_>
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fe72 	bl	80018de <_ZNSt8functionIFvvEED1Ev>
	return *this;
 8001bfa:	687b      	ldr	r3, [r7, #4]
      }
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fe4a 	bl	80018a8 <_ZNKSt14_Function_base8_M_emptyEv>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f083 0301 	eor.w	r3, r3, #1
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fe19 	bl	8001868 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8001c36:	6838      	ldr	r0, [r7, #0]
 8001c38:	f7ff ffe4 	bl	8001c04 <_ZNKSt8functionIFvvEEcvbEv>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00d      	beq.n	8001c5e <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	6839      	ldr	r1, [r7, #0]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
    }
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	e005      	b.n	8001c6e <_ZNSt8functionIFvvEEC1ERKS1_+0x4a>
    : _Function_base()
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fe0c 	bl	8001882 <_ZNSt14_Function_baseD1Ev>
 8001c6a:	f010 fe6f 	bl	801294c <__cxa_end_cleanup>
    }
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f820 	bl	8001ccc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f103 0208 	add.w	r2, r3, #8
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	3308      	adds	r3, #8
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f000 f848 	bl	8001d2e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f103 020c 	add.w	r2, r3, #12
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	330c      	adds	r3, #12
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4610      	mov	r0, r2
 8001cac:	f000 f868 	bl	8001d80 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffee 	bl	8001cb8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f107 0308 	add.w	r3, r7, #8
 8001ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ce6:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff ffe4 	bl	8001cb8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cf8:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001cfc:	f107 0308 	add.w	r3, r7, #8
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ffd9 	bl	8001cb8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001d06:	4602      	mov	r2, r0
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d0e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ffee 	bl	8001d1a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001d44:	6838      	ldr	r0, [r7, #0]
 8001d46:	f7ff ffe8 	bl	8001d1a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ffdf 	bl	8001d1a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	601a      	str	r2, [r3, #0]
    }
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffee 	bl	8001d6c <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8001d90:	4603      	mov	r3, r0
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001d96:	6838      	ldr	r0, [r7, #0]
 8001d98:	f7ff ffe8 	bl	8001d6c <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ffdf 	bl	8001d6c <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8001dae:	4603      	mov	r3, r0
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	601a      	str	r2, [r3, #0]
    }
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <_ZNSt9exceptionC1Ev>:
   *  throw non-class data (e.g., fundamental types).
   */
  class exception
  {
  public:
    exception() _GLIBCXX_NOTHROW { }
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <_ZNSt9exceptionC1Ev+0x1c>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	080151fc 	.word	0x080151fc

08001de0 <_ZN13FlashHandlersC1Emm>:
#include <Eeprom_class_exc.hpp>
#include <stdexcept>
#include <stm32f1xx_hal.h>


FlashHandlers::FlashHandlers(const uint32_t page0, const uint32_t page1 ): PAGE0_BASE_ADDRESS(page0), PAGE1_BASE_ADDRESS(page1)
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	605a      	str	r2, [r3, #4]
{};
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <_ZN13FlashHandlers15programHalfWordEmt>:

void FlashHandlers::programHalfWord(uint32_t Address, uint16_t Data)
{
 8001e04:	b5b0      	push	{r4, r5, r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	80fb      	strh	r3, [r7, #6]
    if ( HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data))
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	2200      	movs	r2, #0
 8001e16:	461c      	mov	r4, r3
 8001e18:	4615      	mov	r5, r2
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	462b      	mov	r3, r5
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	2001      	movs	r0, #1
 8001e22:	f005 fc9f 	bl	8007764 <HAL_FLASH_Program>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf14      	ite	ne
 8001e2c:	2301      	movne	r3, #1
 8001e2e:	2300      	moveq	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00c      	beq.n	8001e50 <_ZN13FlashHandlers15programHalfWordEmt+0x4c>
            throw std::exception();
 8001e36:	2004      	movs	r0, #4
 8001e38:	f010 fd4e 	bl	80128d8 <__cxa_allocate_exception>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461c      	mov	r4, r3
 8001e40:	4620      	mov	r0, r4
 8001e42:	f7ff ffbd 	bl	8001dc0 <_ZNSt9exceptionC1Ev>
 8001e46:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <_ZN13FlashHandlers15programHalfWordEmt+0x54>)
 8001e48:	4904      	ldr	r1, [pc, #16]	; (8001e5c <_ZN13FlashHandlers15programHalfWordEmt+0x58>)
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f011 f9a2 	bl	8013194 <__cxa_throw>
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bdb0      	pop	{r4, r5, r7, pc}
 8001e58:	08012b91 	.word	0x08012b91
 8001e5c:	08015198 	.word	0x08015198

08001e60 <_ZN13FlashHandlers9erasePageEm>:

void FlashHandlers::erasePage(const uint32_t address)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
    FLASH_EraseInitTypeDef eraseCfg = {FLASH_TYPEERASE_PAGES, FLASH_BANK_1, address, 1};
 8001e6a:	f107 0310 	add.w	r3, r7, #16
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	2301      	movs	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	61bb      	str	r3, [r7, #24]
    uint32_t PageError;
    if (HAL_OK !=  HAL_FLASHEx_Erase(&eraseCfg, &PageError))
 8001e84:	f107 020c 	add.w	r2, r7, #12
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f005 fdb0 	bl	80079f4 <HAL_FLASHEx_Erase>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf14      	ite	ne
 8001e9a:	2301      	movne	r3, #1
 8001e9c:	2300      	moveq	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00c      	beq.n	8001ebe <_ZN13FlashHandlers9erasePageEm+0x5e>
        throw std::exception();
 8001ea4:	2004      	movs	r0, #4
 8001ea6:	f010 fd17 	bl	80128d8 <__cxa_allocate_exception>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461c      	mov	r4, r3
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff ff86 	bl	8001dc0 <_ZNSt9exceptionC1Ev>
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <_ZN13FlashHandlers9erasePageEm+0x68>)
 8001eb6:	4905      	ldr	r1, [pc, #20]	; (8001ecc <_ZN13FlashHandlers9erasePageEm+0x6c>)
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f011 f96b 	bl	8013194 <__cxa_throw>
}
 8001ebe:	bf00      	nop
 8001ec0:	3724      	adds	r7, #36	; 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd90      	pop	{r4, r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	08012b91 	.word	0x08012b91
 8001ecc:	08015198 	.word	0x08015198

08001ed0 <_ZN6Eeprom12transferPageEmm>:


void Eeprom::transferPage(const uint32_t page_addrFrom, const uint32_t page_addrTo)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
    int16_t x = -1;
 8001edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee0:	82fb      	strh	r3, [r7, #22]
    /* Transfer data from Page0 to Page1 */
    for (int VarIdx = 0; VarIdx < NumbOfVar; VarIdx++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001eec:	461a      	mov	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	da3d      	bge.n	8001f70 <_ZN6Eeprom12transferPageEmm+0xa0>
    {
      if ((*(__IO uint16_t*)(page_addrTo + 6)) == VarIdx)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3306      	adds	r3, #6
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4293      	cmp	r3, r2
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <_ZN6Eeprom12transferPageEmm+0x42>
        x = VarIdx;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	82fb      	strh	r3, [r7, #22]
      if (VarIdx != x)
 8001f12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d025      	beq.n	8001f68 <_ZN6Eeprom12transferPageEmm+0x98>
      {

      if(FLASH_OPER_ERR == readVariable(VarIdx, &DataVar)) /* Read the last variables' updates */
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	b299      	uxth	r1, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3320      	adds	r3, #32
 8001f24:	461a      	mov	r2, r3
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f944 	bl	80021b4 <_ZN6Eeprom12readVariableEtPt>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	bf0c      	ite	eq
 8001f32:	2301      	moveq	r3, #1
 8001f34:	2300      	movne	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <_ZN6Eeprom12transferPageEmm+0x7e>
        /* In case variable corresponding to the virtual address was found */
          /* Transfer the variable to the Page1 */
          verifyPageFullWriteVariable(VarIdx, DataVar);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	b299      	uxth	r1, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8c1b      	ldrh	r3, [r3, #32]
 8001f44:	461a      	mov	r2, r3
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 fa42 	bl	80023d0 <_ZN6Eeprom27verifyPageFullWriteVariableEtt>
 8001f4c:	e00c      	b.n	8001f68 <_ZN6Eeprom12transferPageEmm+0x98>
      else
          throw std::exception(); //variable not found
 8001f4e:	2004      	movs	r0, #4
 8001f50:	f010 fcc2 	bl	80128d8 <__cxa_allocate_exception>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461c      	mov	r4, r3
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7ff ff31 	bl	8001dc0 <_ZNSt9exceptionC1Ev>
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <_ZN6Eeprom12transferPageEmm+0xc8>)
 8001f60:	490e      	ldr	r1, [pc, #56]	; (8001f9c <_ZN6Eeprom12transferPageEmm+0xcc>)
 8001f62:	4620      	mov	r0, r4
 8001f64:	f011 f916 	bl	8013194 <__cxa_throw>
    for (int VarIdx = 0; VarIdx < NumbOfVar; VarIdx++)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	e7ba      	b.n	8001ee6 <_ZN6Eeprom12transferPageEmm+0x16>
      }
    }
    flash.programHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE); /* Mark Page1 as valid */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f103 0018 	add.w	r0, r3, #24
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7ff ff41 	bl	8001e04 <_ZN13FlashHandlers15programHalfWordEmt>
    flash.erasePage(page_addrFrom);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3318      	adds	r3, #24
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff69 	bl	8001e60 <_ZN13FlashHandlers9erasePageEm>
}
 8001f8e:	bf00      	nop
 8001f90:	371c      	adds	r7, #28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd90      	pop	{r4, r7, pc}
 8001f96:	bf00      	nop
 8001f98:	08012b91 	.word	0x08012b91
 8001f9c:	08015198 	.word	0x08015198

08001fa0 <_ZN13FlashHandlers6formatEv>:
  * @brief  Erases PAGE0 and PAGE1 and writes VALID_PAGE header to PAGE0
  * @param  None
  * @throw  in case of error std:exception
  */
void FlashHandlers::format(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  erasePage(PAGE0_BASE_ADDRESS);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ff56 	bl	8001e60 <_ZN13FlashHandlers9erasePageEm>
  programHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);   /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff21 	bl	8001e04 <_ZN13FlashHandlers15programHalfWordEmt>
  erasePage(PAGE1_BASE_ADDRESS);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff49 	bl	8001e60 <_ZN13FlashHandlers9erasePageEm>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <_ZN6EepromC1Eh>:
  *   corruption after a power loss.
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_OPER_ERR: on success
  */
Eeprom::Eeprom( const uint8_t maxNumOfVal = MAX_NUMB_OF_VAR ):
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
        flash(PAGE0_BASE_ADDRESS,PAGE1_BASE_ADDRESS),
        DataVar(0),
        NumbOfVar (maxNumOfVal)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a19      	ldr	r2, [pc, #100]	; (800204c <_ZN6EepromC1Eh+0x74>)
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f203 72ff 	addw	r2, r3, #2047	; 0x7ff
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f603 72ff 	addw	r2, r3, #4095	; 0xfff
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	615a      	str	r2, [r3, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f103 0018 	add.w	r0, r3, #24
        flash(PAGE0_BASE_ADDRESS,PAGE1_BASE_ADDRESS),
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6899      	ldr	r1, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
        NumbOfVar (maxNumOfVal)
 800202c:	461a      	mov	r2, r3
 800202e:	f7ff fed7 	bl	8001de0 <_ZN13FlashHandlersC1Emm>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	841a      	strh	r2, [r3, #32]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

{};
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	0801f000 	.word	0x0801f000

08002050 <_ZN6Eeprom4initEv>:

FlashStatusTypeDef Eeprom::init( void )
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
    uint16_t PageStatus0= (*(__IO uint16_t*)PAGE0_BASE_ADDRESS); /* Get Page0 status */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	81fb      	strh	r3, [r7, #14]
    uint16_t PageStatus1= (*(__IO uint16_t*)PAGE1_BASE_ADDRESS); /* Get Page1 status */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	81bb      	strh	r3, [r7, #12]
    try{
        /* Check for invalid header states and repair if necessary */
        switch ( PageStatus0 )
 8002068:	89fb      	ldrh	r3, [r7, #14]
 800206a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800206e:	4293      	cmp	r3, r2
 8002070:	d009      	beq.n	8002086 <_ZN6Eeprom4initEv+0x36>
 8002072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002076:	da7f      	bge.n	8002178 <_ZN6Eeprom4initEv+0x128>
 8002078:	2b00      	cmp	r3, #0
 800207a:	d05b      	beq.n	8002134 <_ZN6Eeprom4initEv+0xe4>
 800207c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002080:	4293      	cmp	r3, r2
 8002082:	d02c      	beq.n	80020de <_ZN6Eeprom4initEv+0x8e>
 8002084:	e078      	b.n	8002178 <_ZN6Eeprom4initEv+0x128>
        {
            case ERASED:
                switch ( PageStatus1 )
 8002086:	89bb      	ldrh	r3, [r7, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <_ZN6Eeprom4initEv+0x46>
 800208c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002090:	4293      	cmp	r3, r2
 8002092:	d00a      	beq.n	80020aa <_ZN6Eeprom4initEv+0x5a>
 8002094:	e01c      	b.n	80020d0 <_ZN6Eeprom4initEv+0x80>
                {
                    case VALID_PAGE: /* Page0 erased, Page1 valid */
                        flash.erasePage(PAGE0_BASE_ADDRESS);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f103 0218 	add.w	r2, r3, #24
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4619      	mov	r1, r3
 80020a2:	4610      	mov	r0, r2
 80020a4:	f7ff fedc 	bl	8001e60 <_ZN13FlashHandlers9erasePageEm>
                        break;
 80020a8:	e018      	b.n	80020dc <_ZN6Eeprom4initEv+0x8c>
                    case RECEIVE_DATA: /* Page0 erased, Page1 receive */
                        flash.erasePage(PAGE0_BASE_ADDRESS);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f103 0218 	add.w	r2, r3, #24
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f7ff fed2 	bl	8001e60 <_ZN13FlashHandlers9erasePageEm>
                        flash.programHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f103 0018 	add.w	r0, r3, #24
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2200      	movs	r2, #0
 80020c8:	4619      	mov	r1, r3
 80020ca:	f7ff fe9b 	bl	8001e04 <_ZN13FlashHandlers15programHalfWordEmt>
                        break;
 80020ce:	e005      	b.n	80020dc <_ZN6Eeprom4initEv+0x8c>
                    default: /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
                        flash.format(); /* Erase both Page0 and Page1 and set Page0 as valid page */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3318      	adds	r3, #24
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff63 	bl	8001fa0 <_ZN13FlashHandlers6formatEv>
                        break;
 80020da:	bf00      	nop
                }
                break;
 80020dc:	e052      	b.n	8002184 <_ZN6Eeprom4initEv+0x134>
            case RECEIVE_DATA:
                switch ( PageStatus1 )
 80020de:	89bb      	ldrh	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d004      	beq.n	80020ee <_ZN6Eeprom4initEv+0x9e>
 80020e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d009      	beq.n	8002100 <_ZN6Eeprom4initEv+0xb0>
 80020ec:	e01b      	b.n	8002126 <_ZN6Eeprom4initEv+0xd6>
                {
                    case VALID_PAGE: /* Page0 receive, Page1 valid */
                        transferPage(PAGE1_BASE_ADDRESS, PAGE0_BASE_ADDRESS);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6919      	ldr	r1, [r3, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	461a      	mov	r2, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fee9 	bl	8001ed0 <_ZN6Eeprom12transferPageEmm>
                        break;
 80020fe:	e018      	b.n	8002132 <_ZN6Eeprom4initEv+0xe2>
                    case ERASED:
                        flash.erasePage(PAGE1_BASE_ADDRESS);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f103 0218 	add.w	r2, r3, #24
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	4619      	mov	r1, r3
 800210c:	4610      	mov	r0, r2
 800210e:	f7ff fea7 	bl	8001e60 <_ZN13FlashHandlers9erasePageEm>
                        flash.programHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f103 0018 	add.w	r0, r3, #24
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2200      	movs	r2, #0
 800211e:	4619      	mov	r1, r3
 8002120:	f7ff fe70 	bl	8001e04 <_ZN13FlashHandlers15programHalfWordEmt>
                        break;
 8002124:	e005      	b.n	8002132 <_ZN6Eeprom4initEv+0xe2>
                    default: /*  invalid state -> format EEPROM */
                        flash.format(); /* Erase both Page0 and Page1 and set Page0 as valid page */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3318      	adds	r3, #24
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff38 	bl	8001fa0 <_ZN13FlashHandlers6formatEv>
                        break;
 8002130:	bf00      	nop
                }
                break;
 8002132:	e027      	b.n	8002184 <_ZN6Eeprom4initEv+0x134>
            case VALID_PAGE:
                switch ( PageStatus1 )
 8002134:	89bb      	ldrh	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d004      	beq.n	8002144 <_ZN6Eeprom4initEv+0xf4>
 800213a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213e:	4293      	cmp	r3, r2
 8002140:	d006      	beq.n	8002150 <_ZN6Eeprom4initEv+0x100>
 8002142:	e00f      	b.n	8002164 <_ZN6Eeprom4initEv+0x114>
                {
                    case VALID_PAGE:
                        flash.format();/* Invalid state -> format eeprom */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3318      	adds	r3, #24
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff29 	bl	8001fa0 <_ZN13FlashHandlers6formatEv>
                        break;
 800214e:	e012      	b.n	8002176 <_ZN6Eeprom4initEv+0x126>
                    case ERASED:
                        flash.erasePage(PAGE1_BASE_ADDRESS);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f103 0218 	add.w	r2, r3, #24
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	4619      	mov	r1, r3
 800215c:	4610      	mov	r0, r2
 800215e:	f7ff fe7f 	bl	8001e60 <_ZN13FlashHandlers9erasePageEm>
                        break;
 8002162:	e008      	b.n	8002176 <_ZN6Eeprom4initEv+0x126>
                    default: /* Page0 valid, Page1 receive */
                        transferPage(PAGE0_BASE_ADDRESS, PAGE1_BASE_ADDRESS);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6899      	ldr	r1, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	461a      	mov	r2, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff feae 	bl	8001ed0 <_ZN6Eeprom12transferPageEmm>
                        break;
 8002174:	bf00      	nop
                }
                break;
 8002176:	e005      	b.n	8002184 <_ZN6Eeprom4initEv+0x134>

            default: /* Any other state -> format eeprom */
                /* Erase both Page0 and Page1 and set Page0 as valid page */
                flash.format();
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3318      	adds	r3, #24
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff0f 	bl	8001fa0 <_ZN13FlashHandlers6formatEv>
                break;
 8002182:	bf00      	nop
        }
    } catch ( const std::exception &e ){
        return FLASH_OPER_ERR;
    }

    return FLASH_OPER_OK;
 8002184:	2400      	movs	r4, #0
}
 8002186:	4623      	mov	r3, r4
 8002188:	e00f      	b.n	80021aa <_ZN6Eeprom4initEv+0x15a>
    } catch ( const std::exception &e ){
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	2b01      	cmp	r3, #1
 8002190:	d001      	beq.n	8002196 <_ZN6Eeprom4initEv+0x146>
 8002192:	f010 fbdb 	bl	801294c <__cxa_end_cleanup>
 8002196:	4613      	mov	r3, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f010 fcac 	bl	8012af6 <__cxa_begin_catch>
 800219e:	4603      	mov	r3, r0
 80021a0:	60bb      	str	r3, [r7, #8]
        return FLASH_OPER_ERR;
 80021a2:	2401      	movs	r4, #1
    } catch ( const std::exception &e ){
 80021a4:	f010 fcd0 	bl	8012b48 <__cxa_end_catch>
 80021a8:	e7ed      	b.n	8002186 <_ZN6Eeprom4initEv+0x136>
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}
	...

080021b4 <_ZN6Eeprom12readVariableEtPt>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
FlashStatusTypeDef Eeprom::readVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	460b      	mov	r3, r1
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	817b      	strh	r3, [r7, #10]
    uint16_t ValidPage= PAGE0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	837b      	strh	r3, [r7, #26]
    uint16_t AddressValue=0x5555;
 80021c6:	f245 5355 	movw	r3, #21845	; 0x5555
 80021ca:	833b      	strh	r3, [r7, #24]
    uint32_t CurrentAddress=0x08010000;
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <_ZN6Eeprom12readVariableEtPt+0xa8>)
 80021ce:	61fb      	str	r3, [r7, #28]
    uint32_t PageStartAddress=0x08010000;
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <_ZN6Eeprom12readVariableEtPt+0xa8>)
 80021d2:	617b      	str	r3, [r7, #20]

    try{
        ValidPage=findValidPage(READ_FROM_VALID_PAGE); /* Get active Page for read operation */
 80021d4:	2100      	movs	r1, #0
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f890 	bl	80022fc <_ZN6Eeprom13findValidPageE19operationValidPageT>
 80021dc:	4603      	mov	r3, r0
 80021de:	837b      	strh	r3, [r7, #26]
    } catch ( const std::exception &e ){
        return FLASH_OPER_NO_VALID_PAGE;
    }

    PageStartAddress=(uint32_t) (EEPROM_START_ADDRESS + (uint32_t) (ValidPage*PAGE_SIZE )); /* Get the valid Page start Address */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	8b7a      	ldrh	r2, [r7, #26]
 80021e6:	02d2      	lsls	r2, r2, #11
 80021e8:	4413      	add	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]
    CurrentAddress=(uint32_t) ( (EEPROM_START_ADDRESS-2) + (uint32_t) ( (1 + ValidPage) * PAGE_SIZE )); /* Get the valid Page end Address */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	8b7a      	ldrh	r2, [r7, #26]
 80021f2:	3201      	adds	r2, #1
 80021f4:	02d2      	lsls	r2, r2, #11
 80021f6:	4413      	add	r3, r2
 80021f8:	3b02      	subs	r3, #2
 80021fa:	61fb      	str	r3, [r7, #28]

    /* Check each active page address starting from end */
    while ( CurrentAddress > (PageStartAddress+2) ){
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3302      	adds	r3, #2
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	429a      	cmp	r2, r3
 8002204:	d912      	bls.n	800222c <_ZN6Eeprom12readVariableEtPt+0x78>
        AddressValue= (*(__IO uint16_t*)CurrentAddress); /* Get the current location content to be compared with virtual address */
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	833b      	strh	r3, [r7, #24]
        /* Compare the read address with the virtual address */
        if(AddressValue==VirtAddress){
 800220c:	8b3a      	ldrh	r2, [r7, #24]
 800220e:	897b      	ldrh	r3, [r7, #10]
 8002210:	429a      	cmp	r2, r3
 8002212:	d107      	bne.n	8002224 <_ZN6Eeprom12readVariableEtPt+0x70>
            *Data = (*(__IO uint16_t*) (CurrentAddress-2)); /* Get content of Address-2 which is variable value */
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	3b02      	subs	r3, #2
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b29a      	uxth	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	801a      	strh	r2, [r3, #0]
            return FLASH_OPER_ERR; /* In case variable value is read */
 8002220:	2401      	movs	r4, #1
 8002222:	e004      	b.n	800222e <_ZN6Eeprom12readVariableEtPt+0x7a>
        }else
            CurrentAddress=CurrentAddress-4; /* Next address location */
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3b04      	subs	r3, #4
 8002228:	61fb      	str	r3, [r7, #28]
    while ( CurrentAddress > (PageStartAddress+2) ){
 800222a:	e7e7      	b.n	80021fc <_ZN6Eeprom12readVariableEtPt+0x48>
    }
    return FLASH_OPER_ERR;
 800222c:	2401      	movs	r4, #1
}
 800222e:	4623      	mov	r3, r4
 8002230:	e00f      	b.n	8002252 <_ZN6Eeprom12readVariableEtPt+0x9e>
    } catch ( const std::exception &e ){
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d001      	beq.n	800223e <_ZN6Eeprom12readVariableEtPt+0x8a>
 800223a:	f010 fb87 	bl	801294c <__cxa_end_cleanup>
 800223e:	4613      	mov	r3, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f010 fc58 	bl	8012af6 <__cxa_begin_catch>
 8002246:	4603      	mov	r3, r0
 8002248:	613b      	str	r3, [r7, #16]
        return FLASH_OPER_NO_VALID_PAGE;
 800224a:	24ab      	movs	r4, #171	; 0xab
    } catch ( const std::exception &e ){
 800224c:	f010 fc7c 	bl	8012b48 <__cxa_end_catch>
 8002250:	e7ed      	b.n	800222e <_ZN6Eeprom12readVariableEtPt+0x7a>
}
 8002252:	4618      	mov	r0, r3
 8002254:	3724      	adds	r7, #36	; 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd90      	pop	{r4, r7, pc}
 800225a:	bf00      	nop
 800225c:	08010000 	.word	0x08010000

08002260 <_ZN6Eeprom13writeVariableEtt>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
FlashStatusTypeDef Eeprom::writeVariable( uint16_t VirtAddress, uint16_t Data )
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	803b      	strh	r3, [r7, #0]
    FlashStatusTypeDef Status=FLASH_OPER_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	75fb      	strb	r3, [r7, #23]
    try{
        /* Write the variable virtual address and value in the EEPROM */
        verifyPageFullWriteVariable(VirtAddress, Data);
 8002274:	883a      	ldrh	r2, [r7, #0]
 8002276:	887b      	ldrh	r3, [r7, #2]
 8002278:	4619      	mov	r1, r3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f8a8 	bl	80023d0 <_ZN6Eeprom27verifyPageFullWriteVariableEtt>
        }
    }catch ( const std::exception &e ){
        return FLASH_OPER_ERR;
    }

    return Status;
 8002280:	7dfc      	ldrb	r4, [r7, #23]
}
 8002282:	4623      	mov	r3, r4
 8002284:	e035      	b.n	80022f2 <_ZN6Eeprom13writeVariableEtt+0x92>
    }catch ( const std::range_error &e){ //page full
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d003      	beq.n	8002296 <_ZN6Eeprom13writeVariableEtt+0x36>
 800228e:	2b02      	cmp	r3, #2
 8002290:	d013      	beq.n	80022ba <_ZN6Eeprom13writeVariableEtt+0x5a>
 8002292:	f010 fb5b 	bl	801294c <__cxa_end_cleanup>
 8002296:	4613      	mov	r3, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f010 fc2c 	bl	8012af6 <__cxa_begin_catch>
 800229e:	4603      	mov	r3, r0
 80022a0:	60fb      	str	r3, [r7, #12]
            return pageTransfer(VirtAddress, Data); /* Perform Page transfer */
 80022a2:	883a      	ldrh	r2, [r7, #0]
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	4619      	mov	r1, r3
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f8f7 	bl	800249c <_ZN6Eeprom12pageTransferEtt>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461c      	mov	r4, r3
 80022b2:	bf00      	nop
    }catch ( const std::range_error &e){ //page full
 80022b4:	f010 fc48 	bl	8012b48 <__cxa_end_catch>
 80022b8:	e7e3      	b.n	8002282 <_ZN6Eeprom13writeVariableEtt+0x22>
    }catch ( const std::exception &e ){
 80022ba:	4613      	mov	r3, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f010 fc1a 	bl	8012af6 <__cxa_begin_catch>
 80022c2:	4603      	mov	r3, r0
 80022c4:	613b      	str	r3, [r7, #16]
        return FLASH_OPER_ERR;
 80022c6:	2401      	movs	r4, #1
    }catch ( const std::exception &e ){
 80022c8:	f010 fc3e 	bl	8012b48 <__cxa_end_catch>
 80022cc:	e7d9      	b.n	8002282 <_ZN6Eeprom13writeVariableEtt+0x22>
        }catch ( const std::exception &e ){
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d003      	beq.n	80022de <_ZN6Eeprom13writeVariableEtt+0x7e>
    }catch ( const std::range_error &e){ //page full
 80022d6:	f010 fc37 	bl	8012b48 <__cxa_end_catch>
 80022da:	f010 fb37 	bl	801294c <__cxa_end_cleanup>
        }catch ( const std::exception &e ){
 80022de:	4613      	mov	r3, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f010 fc08 	bl	8012af6 <__cxa_begin_catch>
 80022e6:	4603      	mov	r3, r0
 80022e8:	60bb      	str	r3, [r7, #8]
            return FLASH_OPER_ERR;
 80022ea:	2401      	movs	r4, #1
        }catch ( const std::exception &e ){
 80022ec:	f010 fc2c 	bl	8012b48 <__cxa_end_catch>
 80022f0:	e7e0      	b.n	80022b4 <_ZN6Eeprom13writeVariableEtt+0x54>
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd90      	pop	{r4, r7, pc}
	...

080022fc <_ZN6Eeprom13findValidPageE19operationValidPageT>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE0 or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
uint16_t Eeprom::findValidPage( operationValidPageT Operation )
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
    uint16_t PageStatus0=6, PageStatus1=6;
 8002308:	2306      	movs	r3, #6
 800230a:	81fb      	strh	r3, [r7, #14]
 800230c:	2306      	movs	r3, #6
 800230e:	81bb      	strh	r3, [r7, #12]
    PageStatus0= (*(__IO uint16_t*)PAGE0_BASE_ADDRESS); /* Get Page0 actual status */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	81fb      	strh	r3, [r7, #14]
    PageStatus1= (*(__IO uint16_t*)PAGE1_BASE_ADDRESS); /* Get Page1 actual status */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	81bb      	strh	r3, [r7, #12]

    /* Write or read operation */
    switch ( Operation )
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d027      	beq.n	8002376 <_ZN6Eeprom13findValidPageE19operationValidPageT+0x7a>
 8002326:	2b01      	cmp	r3, #1
 8002328:	d13c      	bne.n	80023a4 <_ZN6Eeprom13findValidPageE19operationValidPageT+0xa8>
    {
        case WRITE_IN_VALID_PAGE: /* ---- Write operation ---- */
            if(PageStatus1==VALID_PAGE)
 800232a:	89bb      	ldrh	r3, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d109      	bne.n	8002344 <_ZN6Eeprom13findValidPageE19operationValidPageT+0x48>
                return (PageStatus0==RECEIVE_DATA) ? PAGE0 : PAGE1; /* Page0 receiving data */
 8002330:	89fb      	ldrh	r3, [r7, #14]
 8002332:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002336:	4293      	cmp	r3, r2
 8002338:	bf14      	ite	ne
 800233a:	2301      	movne	r3, #1
 800233c:	2300      	moveq	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	b29b      	uxth	r3, r3
 8002342:	e03c      	b.n	80023be <_ZN6Eeprom13findValidPageE19operationValidPageT+0xc2>
            else if(PageStatus0==VALID_PAGE)
 8002344:	89fb      	ldrh	r3, [r7, #14]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d108      	bne.n	800235c <_ZN6Eeprom13findValidPageE19operationValidPageT+0x60>
                return (PageStatus0==RECEIVE_DATA) ? PAGE1 : PAGE0; /* Page1 receiving data */
 800234a:	89fb      	ldrh	r3, [r7, #14]
 800234c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002350:	4293      	cmp	r3, r2
 8002352:	d101      	bne.n	8002358 <_ZN6Eeprom13findValidPageE19operationValidPageT+0x5c>
 8002354:	2301      	movs	r3, #1
 8002356:	e032      	b.n	80023be <_ZN6Eeprom13findValidPageE19operationValidPageT+0xc2>
 8002358:	2300      	movs	r3, #0
 800235a:	e030      	b.n	80023be <_ZN6Eeprom13findValidPageE19operationValidPageT+0xc2>
            else
                throw std::exception(); /* No valid Page */
 800235c:	2004      	movs	r0, #4
 800235e:	f010 fabb 	bl	80128d8 <__cxa_allocate_exception>
 8002362:	4603      	mov	r3, r0
 8002364:	461c      	mov	r4, r3
 8002366:	4620      	mov	r0, r4
 8002368:	f7ff fd2a 	bl	8001dc0 <_ZNSt9exceptionC1Ev>
 800236c:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <_ZN6Eeprom13findValidPageE19operationValidPageT+0xcc>)
 800236e:	4917      	ldr	r1, [pc, #92]	; (80023cc <_ZN6Eeprom13findValidPageE19operationValidPageT+0xd0>)
 8002370:	4620      	mov	r0, r4
 8002372:	f010 ff0f 	bl	8013194 <__cxa_throw>

        case READ_FROM_VALID_PAGE: /* ---- Read operation ---- */
            if(PageStatus0==VALID_PAGE)
 8002376:	89fb      	ldrh	r3, [r7, #14]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <_ZN6Eeprom13findValidPageE19operationValidPageT+0x84>
                return PAGE0; /* Page0 valid */
 800237c:	2300      	movs	r3, #0
 800237e:	e01e      	b.n	80023be <_ZN6Eeprom13findValidPageE19operationValidPageT+0xc2>
            else if(PageStatus1==VALID_PAGE)
 8002380:	89bb      	ldrh	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <_ZN6Eeprom13findValidPageE19operationValidPageT+0x8e>
                return PAGE1; /* Page1 valid */
 8002386:	2301      	movs	r3, #1
 8002388:	e019      	b.n	80023be <_ZN6Eeprom13findValidPageE19operationValidPageT+0xc2>
            else
                throw std::exception(); /* No valid Page */
 800238a:	2004      	movs	r0, #4
 800238c:	f010 faa4 	bl	80128d8 <__cxa_allocate_exception>
 8002390:	4603      	mov	r3, r0
 8002392:	461c      	mov	r4, r3
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff fd13 	bl	8001dc0 <_ZNSt9exceptionC1Ev>
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <_ZN6Eeprom13findValidPageE19operationValidPageT+0xcc>)
 800239c:	490b      	ldr	r1, [pc, #44]	; (80023cc <_ZN6Eeprom13findValidPageE19operationValidPageT+0xd0>)
 800239e:	4620      	mov	r0, r4
 80023a0:	f010 fef8 	bl	8013194 <__cxa_throw>
        default:
            throw std::exception();     //wrong operation
 80023a4:	2004      	movs	r0, #4
 80023a6:	f010 fa97 	bl	80128d8 <__cxa_allocate_exception>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461c      	mov	r4, r3
 80023ae:	4620      	mov	r0, r4
 80023b0:	f7ff fd06 	bl	8001dc0 <_ZNSt9exceptionC1Ev>
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <_ZN6Eeprom13findValidPageE19operationValidPageT+0xcc>)
 80023b6:	4905      	ldr	r1, [pc, #20]	; (80023cc <_ZN6Eeprom13findValidPageE19operationValidPageT+0xd0>)
 80023b8:	4620      	mov	r0, r4
 80023ba:	f010 feeb 	bl	8013194 <__cxa_throw>
    }
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd90      	pop	{r4, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	08012b91 	.word	0x08012b91
 80023cc:	08015198 	.word	0x08015198

080023d0 <_ZN6Eeprom27verifyPageFullWriteVariableEtt>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
void Eeprom::verifyPageFullWriteVariable(const uint16_t VirtAddress, const uint16_t Data)
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]
 80023dc:	4613      	mov	r3, r2
 80023de:	803b      	strh	r3, [r7, #0]
  uint16_t ValidPage = PAGE0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	827b      	strh	r3, [r7, #18]
  uint32_t Address = 0x08010000, PageEndAddress = 0x080107FF;
 80023e4:	4b28      	ldr	r3, [pc, #160]	; (8002488 <_ZN6Eeprom27verifyPageFullWriteVariableEtt+0xb8>)
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <_ZN6Eeprom27verifyPageFullWriteVariableEtt+0xbc>)
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = findValidPage(WRITE_IN_VALID_PAGE);
 80023ec:	2101      	movs	r1, #1
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ff84 	bl	80022fc <_ZN6Eeprom13findValidPageE19operationValidPageT>
 80023f4:	4603      	mov	r3, r0
 80023f6:	827b      	strh	r3, [r7, #18]
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));   /* Get the valid Page start Address */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	8a7a      	ldrh	r2, [r7, #18]
 80023fe:	02d2      	lsls	r2, r2, #11
 8002400:	4413      	add	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));    /* Get the valid Page end Address */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	8a7a      	ldrh	r2, [r7, #18]
 800240a:	3201      	adds	r2, #1
 800240c:	02d2      	lsls	r2, r2, #11
 800240e:	4413      	add	r3, r2
 8002410:	3b02      	subs	r3, #2
 8002412:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	429a      	cmp	r2, r3
 800241a:	d21f      	bcs.n	800245c <_ZN6Eeprom27verifyPageFullWriteVariableEtt+0x8c>
  {
    if ((*(__IO uint32_t*)Address) == FlashEmptyValue) /* Verify if Address and Address+2 contents are 0xFFFF */
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d010      	beq.n	8002454 <_ZN6Eeprom27verifyPageFullWriteVariableEtt+0x84>
    {
        flash.programHalfWord(Address, Data);              /* Set variable data */
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3318      	adds	r3, #24
 8002436:	883a      	ldrh	r2, [r7, #0]
 8002438:	6979      	ldr	r1, [r7, #20]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fce2 	bl	8001e04 <_ZN13FlashHandlers15programHalfWordEmt>
        flash.programHalfWord(Address + 2, VirtAddress); /* Set variable virtual address */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f103 0018 	add.w	r0, r3, #24
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	3302      	adds	r3, #2
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	4619      	mov	r1, r3
 800244e:	f7ff fcd9 	bl	8001e04 <_ZN13FlashHandlers15programHalfWordEmt>
        return;
 8002452:	e016      	b.n	8002482 <_ZN6Eeprom27verifyPageFullWriteVariableEtt+0xb2>
    }
    else
      Address = Address + 4;    /* Next address location */
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3304      	adds	r3, #4
 8002458:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800245a:	e7db      	b.n	8002414 <_ZN6Eeprom27verifyPageFullWriteVariableEtt+0x44>
  }
  throw std::range_error("EE_VerifyPageFullWriteVariable:PAGE FULL");   // PAGE_FULL; /* Return PAGE_FULL in case the valid page is full */
 800245c:	2008      	movs	r0, #8
 800245e:	f010 fa3b 	bl	80128d8 <__cxa_allocate_exception>
 8002462:	4603      	mov	r3, r0
 8002464:	461c      	mov	r4, r3
 8002466:	490a      	ldr	r1, [pc, #40]	; (8002490 <_ZN6Eeprom27verifyPageFullWriteVariableEtt+0xc0>)
 8002468:	4620      	mov	r0, r4
 800246a:	f010 ffb3 	bl	80133d4 <_ZNSt11range_errorC1EPKc>
 800246e:	4a09      	ldr	r2, [pc, #36]	; (8002494 <_ZN6Eeprom27verifyPageFullWriteVariableEtt+0xc4>)
 8002470:	4909      	ldr	r1, [pc, #36]	; (8002498 <_ZN6Eeprom27verifyPageFullWriteVariableEtt+0xc8>)
 8002472:	4620      	mov	r0, r4
 8002474:	f010 fe8e 	bl	8013194 <__cxa_throw>
 8002478:	4620      	mov	r0, r4
 800247a:	f010 fa43 	bl	8012904 <__cxa_free_exception>
 800247e:	f010 fa65 	bl	801294c <__cxa_end_cleanup>
}
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	bd90      	pop	{r4, r7, pc}
 8002488:	08010000 	.word	0x08010000
 800248c:	080107ff 	.word	0x080107ff
 8002490:	08013fa8 	.word	0x08013fa8
 8002494:	08013339 	.word	0x08013339
 8002498:	08015280 	.word	0x08015280

0800249c <_ZN6Eeprom12pageTransferEtt>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
FlashStatusTypeDef Eeprom::pageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
 80024a8:	4613      	mov	r3, r2
 80024aa:	803b      	strh	r3, [r7, #0]
  uint32_t NewPageAddress = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
  uint32_t  OldPageAddress = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	81bb      	strh	r3, [r7, #12]
 80024b8:	2300      	movs	r3, #0
 80024ba:	81fb      	strh	r3, [r7, #14]

  /* Get active Page for read operation */
  ValidPage = findValidPage(READ_FROM_VALID_PAGE);
 80024bc:	2100      	movs	r1, #0
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ff1c 	bl	80022fc <_ZN6Eeprom13findValidPageE19operationValidPageT>
 80024c4:	4603      	mov	r3, r0
 80024c6:	81bb      	strh	r3, [r7, #12]

  if (ValidPage == PAGE1)       /* Page1 valid */
 80024c8:	89bb      	ldrh	r3, [r7, #12]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d106      	bne.n	80024dc <_ZN6Eeprom12pageTransferEtt+0x40>
  {
    NewPageAddress = PAGE0_BASE_ADDRESS;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	617b      	str	r3, [r7, #20]
    OldPageAddress = PAGE1_BASE_ADDRESS;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	e00b      	b.n	80024f4 <_ZN6Eeprom12pageTransferEtt+0x58>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80024dc:	89bb      	ldrh	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <_ZN6Eeprom12pageTransferEtt+0x54>
  {
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	617b      	str	r3, [r7, #20]
    OldPageAddress = PAGE0_BASE_ADDRESS;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	e001      	b.n	80024f4 <_ZN6Eeprom12pageTransferEtt+0x58>
  }
  else
    return FLASH_OPER_NO_VALID_PAGE;       /* No valid Page */
 80024f0:	23ab      	movs	r3, #171	; 0xab
 80024f2:	e043      	b.n	800257c <_ZN6Eeprom12pageTransferEtt+0xe0>

  flash.programHalfWord(NewPageAddress, RECEIVE_DATA); /* Set the new Page status to RECEIVE_DATA status */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3318      	adds	r3, #24
 80024f8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80024fc:	6979      	ldr	r1, [r7, #20]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fc80 	bl	8001e04 <_ZN13FlashHandlers15programHalfWordEmt>
  verifyPageFullWriteVariable(VirtAddress, Data);    /* Write the variable passed as parameter in the new active page */
 8002504:	883a      	ldrh	r2, [r7, #0]
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	4619      	mov	r1, r3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ff60 	bl	80023d0 <_ZN6Eeprom27verifyPageFullWriteVariableEtt>
  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NumbOfVar; VarIdx++)
 8002510:	2300      	movs	r3, #0
 8002512:	81fb      	strh	r3, [r7, #14]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800251a:	b29b      	uxth	r3, r3
 800251c:	89fa      	ldrh	r2, [r7, #14]
 800251e:	429a      	cmp	r2, r3
 8002520:	d21e      	bcs.n	8002560 <_ZN6Eeprom12pageTransferEtt+0xc4>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 8002522:	89fa      	ldrh	r2, [r7, #14]
 8002524:	887b      	ldrh	r3, [r7, #2]
 8002526:	429a      	cmp	r2, r3
 8002528:	d016      	beq.n	8002558 <_ZN6Eeprom12pageTransferEtt+0xbc>
      if( FLASH_OPER_ERR == readVariable(VarIdx, &DataVar))   /* Read the other last variable updates */
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f103 0220 	add.w	r2, r3, #32
 8002530:	89fb      	ldrh	r3, [r7, #14]
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fe3d 	bl	80021b4 <_ZN6Eeprom12readVariableEtPt>
 800253a:	4603      	mov	r3, r0
 800253c:	2b01      	cmp	r3, #1
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <_ZN6Eeprom12pageTransferEtt+0xbc>
        verifyPageFullWriteVariable(VarIdx, DataVar); /* Transfer the variable to the new active page */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	8c1a      	ldrh	r2, [r3, #32]
 800254e:	89fb      	ldrh	r3, [r7, #14]
 8002550:	4619      	mov	r1, r3
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ff3c 	bl	80023d0 <_ZN6Eeprom27verifyPageFullWriteVariableEtt>
  for (VarIdx = 0; VarIdx < NumbOfVar; VarIdx++)
 8002558:	89fb      	ldrh	r3, [r7, #14]
 800255a:	3301      	adds	r3, #1
 800255c:	81fb      	strh	r3, [r7, #14]
 800255e:	e7d9      	b.n	8002514 <_ZN6Eeprom12pageTransferEtt+0x78>

  flash.erasePage(OldPageAddress); /* Erase the old Page: Set old Page status to ERASED status */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3318      	adds	r3, #24
 8002564:	6939      	ldr	r1, [r7, #16]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fc7a 	bl	8001e60 <_ZN13FlashHandlers9erasePageEm>
  flash.programHalfWord(NewPageAddress, VALID_PAGE);   /* Set new Page status to VALID_PAGE status */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3318      	adds	r3, #24
 8002570:	2200      	movs	r2, #0
 8002572:	6979      	ldr	r1, [r7, #20]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fc45 	bl	8001e04 <_ZN13FlashHandlers15programHalfWordEmt>
  return FLASH_OPER_ERR;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_Init_Peryf>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_adc1;


void HAL_Init_Peryf()
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
    HAL_Init();
 8002588:	f004 f8f2 	bl	8006770 <HAL_Init>
    /* Configure the system clock */
    SystemClock_Config();
 800258c:	f000 f85e 	bl	800264c <SystemClock_Config>
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8002590:	f000 fad4 	bl	8002b3c <MX_GPIO_Init>
    MX_ADC1_Init();
 8002594:	f000 f8be 	bl	8002714 <MX_ADC1_Init>
    MX_I2C2_Init();
 8002598:	f000 f934 	bl	8002804 <MX_I2C2_Init>
    MX_SPI2_Init();
 800259c:	f000 f9aa 	bl	80028f4 <MX_SPI2_Init>
    MX_TIM2_Init();
 80025a0:	f000 f9de 	bl	8002960 <MX_TIM2_Init>
    MX_TIM3_Init();
 80025a4:	f000 fa30 	bl	8002a08 <MX_TIM3_Init>
    MX_RTC_Init();
 80025a8:	f000 f95a 	bl	8002860 <MX_RTC_Init>
    MX_DMA_Init();
 80025ac:	f000 f806 	bl	80025bc <MX_DMA_Init>
    MX_USART1_UART_Init();
 80025b0:	f000 fa9a 	bl	8002ae8 <MX_USART1_UART_Init>
    MX_USB_DEVICE_Init();
 80025b4:	f00f fc4a 	bl	8011e4c <MX_USB_DEVICE_Init>
}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}

080025bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025c2:	4b1e      	ldr	r3, [pc, #120]	; (800263c <MX_DMA_Init+0x80>)
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	4a1d      	ldr	r2, [pc, #116]	; (800263c <MX_DMA_Init+0x80>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6153      	str	r3, [r2, #20]
 80025ce:	4b1b      	ldr	r3, [pc, #108]	; (800263c <MX_DMA_Init+0x80>)
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	200b      	movs	r0, #11
 80025e0:	f004 fe9b 	bl	800731a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025e4:	200b      	movs	r0, #11
 80025e6:	f004 feb4 	bl	8007352 <HAL_NVIC_EnableIRQ>
  hdma_adc1.Instance = DMA1_Channel1;
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <MX_DMA_Init+0x84>)
 80025ec:	4a15      	ldr	r2, [pc, #84]	; (8002644 <MX_DMA_Init+0x88>)
 80025ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <MX_DMA_Init+0x84>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <MX_DMA_Init+0x84>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025fc:	4b10      	ldr	r3, [pc, #64]	; (8002640 <MX_DMA_Init+0x84>)
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <MX_DMA_Init+0x84>)
 8002604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002608:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <MX_DMA_Init+0x84>)
 800260c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002610:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <MX_DMA_Init+0x84>)
 8002614:	2220      	movs	r2, #32
 8002616:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <MX_DMA_Init+0x84>)
 800261a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800261e:	61da      	str	r2, [r3, #28]
    HAL_DMA_Init(&hdma_adc1);
 8002620:	4807      	ldr	r0, [pc, #28]	; (8002640 <MX_DMA_Init+0x84>)
 8002622:	f004 feb1 	bl	8007388 <HAL_DMA_Init>
    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <MX_DMA_Init+0x8c>)
 8002628:	4a05      	ldr	r2, [pc, #20]	; (8002640 <MX_DMA_Init+0x84>)
 800262a:	621a      	str	r2, [r3, #32]
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <MX_DMA_Init+0x84>)
 800262e:	4a06      	ldr	r2, [pc, #24]	; (8002648 <MX_DMA_Init+0x8c>)
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	20000bc8 	.word	0x20000bc8
 8002644:	40020008 	.word	0x40020008
 8002648:	20000a04 	.word	0x20000a04

0800264c <SystemClock_Config>:
}*/



void SystemClock_Config(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b094      	sub	sp, #80	; 0x50
 8002650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002656:	2228      	movs	r2, #40	; 0x28
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f011 f802 	bl	8013664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	60da      	str	r2, [r3, #12]

  /* Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800267c:	2309      	movs	r3, #9
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002686:	2300      	movs	r3, #0
 8002688:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800268a:	2301      	movs	r3, #1
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800268e:	2301      	movs	r3, #1
 8002690:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002692:	2302      	movs	r3, #2
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800269a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800269c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a6:	4618      	mov	r0, r3
 80026a8:	f008 fbfe 	bl	800aea8 <HAL_RCC_OscConfig>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80026b2:	f000 facb 	bl	8002c4c <Error_Handler>
  }

  /* Initializes the CPU, AHB and APB buses clocks */

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026b6:	230f      	movs	r3, #15
 80026b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ba:	2302      	movs	r3, #2
 80026bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f008 fe6a 	bl	800b3ac <HAL_RCC_ClockConfig>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80026de:	f000 fab5 	bl	8002c4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 80026e2:	2313      	movs	r3, #19
 80026e4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80026f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026f6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	4618      	mov	r0, r3
 80026fc:	f008 ffee 	bl	800b6dc <HAL_RCCEx_PeriphCLKConfig>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002706:	f000 faa1 	bl	8002c4c <Error_Handler>
  }
}
 800270a:	bf00      	nop
 800270c:	3750      	adds	r7, #80	; 0x50
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002724:	4b35      	ldr	r3, [pc, #212]	; (80027fc <MX_ADC1_Init+0xe8>)
 8002726:	4a36      	ldr	r2, [pc, #216]	; (8002800 <MX_ADC1_Init+0xec>)
 8002728:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800272a:	4b34      	ldr	r3, [pc, #208]	; (80027fc <MX_ADC1_Init+0xe8>)
 800272c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002730:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002732:	4b32      	ldr	r3, [pc, #200]	; (80027fc <MX_ADC1_Init+0xe8>)
 8002734:	2201      	movs	r2, #1
 8002736:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002738:	4b30      	ldr	r3, [pc, #192]	; (80027fc <MX_ADC1_Init+0xe8>)
 800273a:	2200      	movs	r2, #0
 800273c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800273e:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <MX_ADC1_Init+0xe8>)
 8002740:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002744:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002746:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <MX_ADC1_Init+0xe8>)
 8002748:	2200      	movs	r2, #0
 800274a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <MX_ADC1_Init+0xe8>)
 800274e:	2205      	movs	r2, #5
 8002750:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002752:	482a      	ldr	r0, [pc, #168]	; (80027fc <MX_ADC1_Init+0xe8>)
 8002754:	f004 f892 	bl	800687c <HAL_ADC_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800275e:	f000 fa75 	bl	8002c4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002762:	2303      	movs	r3, #3
 8002764:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002766:	2301      	movs	r3, #1
 8002768:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800276a:	2307      	movs	r3, #7
 800276c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4822      	ldr	r0, [pc, #136]	; (80027fc <MX_ADC1_Init+0xe8>)
 8002774:	f004 fa54 	bl	8006c20 <HAL_ADC_ConfigChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800277e:	f000 fa65 	bl	8002c4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002782:	2304      	movs	r3, #4
 8002784:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002786:	2302      	movs	r3, #2
 8002788:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	481b      	ldr	r0, [pc, #108]	; (80027fc <MX_ADC1_Init+0xe8>)
 8002790:	f004 fa46 	bl	8006c20 <HAL_ADC_ConfigChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800279a:	f000 fa57 	bl	8002c4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800279e:	2305      	movs	r3, #5
 80027a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80027a2:	2303      	movs	r3, #3
 80027a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4814      	ldr	r0, [pc, #80]	; (80027fc <MX_ADC1_Init+0xe8>)
 80027ac:	f004 fa38 	bl	8006c20 <HAL_ADC_ConfigChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80027b6:	f000 fa49 	bl	8002c4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80027ba:	2306      	movs	r3, #6
 80027bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80027be:	2304      	movs	r3, #4
 80027c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	4619      	mov	r1, r3
 80027c6:	480d      	ldr	r0, [pc, #52]	; (80027fc <MX_ADC1_Init+0xe8>)
 80027c8:	f004 fa2a 	bl	8006c20 <HAL_ADC_ConfigChannel>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80027d2:	f000 fa3b 	bl	8002c4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80027d6:	2309      	movs	r3, #9
 80027d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80027da:	2305      	movs	r3, #5
 80027dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	4806      	ldr	r0, [pc, #24]	; (80027fc <MX_ADC1_Init+0xe8>)
 80027e4:	f004 fa1c 	bl	8006c20 <HAL_ADC_ConfigChannel>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80027ee:	f000 fa2d 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000a04 	.word	0x20000a04
 8002800:	40012400 	.word	0x40012400

08002804 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2C2_Init( void ){
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
    hi2c2.Instance= I2C2;
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <MX_I2C2_Init+0x50>)
 800280a:	4a13      	ldr	r2, [pc, #76]	; (8002858 <MX_I2C2_Init+0x54>)
 800280c:	601a      	str	r2, [r3, #0]
    hi2c2.Init.ClockSpeed=100000;
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_I2C2_Init+0x50>)
 8002810:	4a12      	ldr	r2, [pc, #72]	; (800285c <MX_I2C2_Init+0x58>)
 8002812:	605a      	str	r2, [r3, #4]
    hi2c2.Init.DutyCycle= I2C_DUTYCYCLE_2;
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <MX_I2C2_Init+0x50>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
    hi2c2.Init.OwnAddress1=0;
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <MX_I2C2_Init+0x50>)
 800281c:	2200      	movs	r2, #0
 800281e:	60da      	str	r2, [r3, #12]
    hi2c2.Init.AddressingMode= I2C_ADDRESSINGMODE_7BIT;
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <MX_I2C2_Init+0x50>)
 8002822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002826:	611a      	str	r2, [r3, #16]
    hi2c2.Init.DualAddressMode= I2C_DUALADDRESS_DISABLE;
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <MX_I2C2_Init+0x50>)
 800282a:	2200      	movs	r2, #0
 800282c:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2=0;
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MX_I2C2_Init+0x50>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode= I2C_GENERALCALL_DISABLE;
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <MX_I2C2_Init+0x50>)
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode= I2C_NOSTRETCH_DISABLE;
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <MX_I2C2_Init+0x50>)
 800283c:	2200      	movs	r2, #0
 800283e:	621a      	str	r2, [r3, #32]
    if(HAL_I2C_Init(&hi2c2)!=HAL_OK)
 8002840:	4804      	ldr	r0, [pc, #16]	; (8002854 <MX_I2C2_Init+0x50>)
 8002842:	f005 fb33 	bl	8007eac <HAL_I2C_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_I2C2_Init+0x4c>
    {
        Error_Handler();
 800284c:	f000 f9fe 	bl	8002c4c <Error_Handler>
    }
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000a34 	.word	0x20000a34
 8002858:	40005800 	.word	0x40005800
 800285c:	000186a0 	.word	0x000186a0

08002860 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
void MX_RTC_Init( void ){
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime={ 0 };
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	2100      	movs	r1, #0
 800286a:	460a      	mov	r2, r1
 800286c:	801a      	strh	r2, [r3, #0]
 800286e:	460a      	mov	r2, r1
 8002870:	709a      	strb	r2, [r3, #2]
    RTC_DateTypeDef DateToUpdate={ 0 };
 8002872:	2300      	movs	r3, #0
 8002874:	603b      	str	r3, [r7, #0]
    /** Initialize RTC Only
     */
    hrtc.Instance= RTC;
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <MX_RTC_Init+0x8c>)
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <MX_RTC_Init+0x90>)
 800287a:	601a      	str	r2, [r3, #0]
    hrtc.Init.AsynchPrediv= RTC_AUTO_1_SECOND;
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <MX_RTC_Init+0x8c>)
 800287e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002882:	605a      	str	r2, [r3, #4]
    hrtc.Init.OutPut= RTC_OUTPUTSOURCE_ALARM;
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <MX_RTC_Init+0x8c>)
 8002886:	f44f 7280 	mov.w	r2, #256	; 0x100
 800288a:	609a      	str	r2, [r3, #8]
    if(HAL_RTC_Init(&hrtc)!=HAL_OK)
 800288c:	4817      	ldr	r0, [pc, #92]	; (80028ec <MX_RTC_Init+0x8c>)
 800288e:	f009 f89b 	bl	800b9c8 <HAL_RTC_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_RTC_Init+0x3c>
    {
        Error_Handler();
 8002898:	f000 f9d8 	bl	8002c4c <Error_Handler>
    }
    /** Initialize RTC and set the Time and Date
     */
    sTime.Hours=15;
 800289c:	230f      	movs	r3, #15
 800289e:	713b      	strb	r3, [r7, #4]
    sTime.Minutes=0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	717b      	strb	r3, [r7, #5]
    sTime.Seconds=0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	71bb      	strb	r3, [r7, #6]
    if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN)!=HAL_OK)
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2200      	movs	r2, #0
 80028ac:	4619      	mov	r1, r3
 80028ae:	480f      	ldr	r0, [pc, #60]	; (80028ec <MX_RTC_Init+0x8c>)
 80028b0:	f009 f920 	bl	800baf4 <HAL_RTC_SetTime>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_RTC_Init+0x5e>
    {
        Error_Handler();
 80028ba:	f000 f9c7 	bl	8002c4c <Error_Handler>
    }
    DateToUpdate.WeekDay= RTC_WEEKDAY_MONDAY;
 80028be:	2301      	movs	r3, #1
 80028c0:	703b      	strb	r3, [r7, #0]
    DateToUpdate.Month= RTC_MONTH_JANUARY;
 80028c2:	2301      	movs	r3, #1
 80028c4:	707b      	strb	r3, [r7, #1]
    DateToUpdate.Date=1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	70bb      	strb	r3, [r7, #2]
    DateToUpdate.Year=0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	70fb      	strb	r3, [r7, #3]
    if(HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN)!=HAL_OK)
 80028ce:	463b      	mov	r3, r7
 80028d0:	2200      	movs	r2, #0
 80028d2:	4619      	mov	r1, r3
 80028d4:	4805      	ldr	r0, [pc, #20]	; (80028ec <MX_RTC_Init+0x8c>)
 80028d6:	f009 fa7d 	bl	800bdd4 <HAL_RTC_SetDate>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_RTC_Init+0x84>
    {
        Error_Handler();
 80028e0:	f000 f9b4 	bl	8002c4c <Error_Handler>
    }
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000a88 	.word	0x20000a88
 80028f0:	40002800 	.word	0x40002800

080028f4 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI2_Init( void ){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
    /* SPI2 parameter configuration*/
    hspi2.Instance= SPI2;
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <MX_SPI2_Init+0x64>)
 80028fa:	4a18      	ldr	r2, [pc, #96]	; (800295c <MX_SPI2_Init+0x68>)
 80028fc:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode= SPI_MODE_MASTER;
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <MX_SPI2_Init+0x64>)
 8002900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002904:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction= SPI_DIRECTION_2LINES;
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <MX_SPI2_Init+0x64>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize= SPI_DATASIZE_8BIT;
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <MX_SPI2_Init+0x64>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity= SPI_POLARITY_LOW;
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <MX_SPI2_Init+0x64>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase= SPI_PHASE_1EDGE;
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <MX_SPI2_Init+0x64>)
 800291a:	2200      	movs	r2, #0
 800291c:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS= SPI_NSS_SOFT;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <MX_SPI2_Init+0x64>)
 8002920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002924:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler= SPI_BAUDRATEPRESCALER_2;
 8002926:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <MX_SPI2_Init+0x64>)
 8002928:	2200      	movs	r2, #0
 800292a:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit= SPI_FIRSTBIT_MSB;
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <MX_SPI2_Init+0x64>)
 800292e:	2200      	movs	r2, #0
 8002930:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode= SPI_TIMODE_DISABLE;
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <MX_SPI2_Init+0x64>)
 8002934:	2200      	movs	r2, #0
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation= SPI_CRCCALCULATION_DISABLE;
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <MX_SPI2_Init+0x64>)
 800293a:	2200      	movs	r2, #0
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial=10;
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <MX_SPI2_Init+0x64>)
 8002940:	220a      	movs	r2, #10
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
    if(HAL_SPI_Init(&hspi2)!=HAL_OK)
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <MX_SPI2_Init+0x64>)
 8002946:	f009 fd9d 	bl	800c484 <HAL_SPI_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_SPI2_Init+0x60>
    {
        Error_Handler();
 8002950:	f000 f97c 	bl	8002c4c <Error_Handler>
    }
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000a9c 	.word	0x20000a9c
 800295c:	40003800 	.word	0x40003800

08002960 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM2_Init( void ){
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	; 0x30
 8002964:	af00      	add	r7, sp, #0
    TIM_Encoder_InitTypeDef sConfig={ 0 };
 8002966:	f107 030c 	add.w	r3, r7, #12
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f010 fe78 	bl	8013664 <memset>
    TIM_MasterConfigTypeDef sMasterConfig={ 0 };
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
    htim2.Instance= TIM2;
 800297c:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <MX_TIM2_Init+0xa4>)
 800297e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002982:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler=0;
 8002984:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <MX_TIM2_Init+0xa4>)
 8002986:	2200      	movs	r2, #0
 8002988:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode= TIM_COUNTERMODE_UP;
 800298a:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <MX_TIM2_Init+0xa4>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
    htim2.Init.Period=65535;
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <MX_TIM2_Init+0xa4>)
 8002992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002996:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision= TIM_CLOCKDIVISION_DIV1;
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <MX_TIM2_Init+0xa4>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload= TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <MX_TIM2_Init+0xa4>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode= TIM_ENCODERMODE_TI1;
 80029a4:	2301      	movs	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity= TIM_ICPOLARITY_RISING;
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection= TIM_ICSELECTION_DIRECTTI;
 80029ac:	2301      	movs	r3, #1
 80029ae:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler= TIM_ICPSC_DIV2;
 80029b0:	2304      	movs	r3, #4
 80029b2:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter=10;
 80029b4:	230a      	movs	r3, #10
 80029b6:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity= TIM_ICPOLARITY_RISING;
 80029b8:	2300      	movs	r3, #0
 80029ba:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection= TIM_ICSELECTION_DIRECTTI;
 80029bc:	2301      	movs	r3, #1
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
    sConfig.IC2Prescaler= TIM_ICPSC_DIV2;
 80029c0:	2304      	movs	r3, #4
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfig.IC2Filter=10;
 80029c4:	230a      	movs	r3, #10
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(HAL_TIM_Encoder_Init(&htim2, &sConfig)!=HAL_OK)
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	4619      	mov	r1, r3
 80029ce:	480d      	ldr	r0, [pc, #52]	; (8002a04 <MX_TIM2_Init+0xa4>)
 80029d0:	f00a f9b6 	bl	800cd40 <HAL_TIM_Encoder_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM2_Init+0x7e>
    {
        Error_Handler();
 80029da:	f000 f937 	bl	8002c4c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger= TIM_TRGO_RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode= TIM_MASTERSLAVEMODE_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
    if(HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)!=HAL_OK)
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	4619      	mov	r1, r3
 80029ea:	4806      	ldr	r0, [pc, #24]	; (8002a04 <MX_TIM2_Init+0xa4>)
 80029ec:	f00a ffd6 	bl	800d99c <HAL_TIMEx_MasterConfigSynchronization>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM2_Init+0x9a>
    {
        Error_Handler();
 80029f6:	f000 f929 	bl	8002c4c <Error_Handler>
    }
}
 80029fa:	bf00      	nop
 80029fc:	3730      	adds	r7, #48	; 0x30
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000af4 	.word	0x20000af4

08002a08 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM3_Init( void ){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a0e:	f107 0318 	add.w	r3, r7, #24
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a1c:	f107 0310 	add.w	r3, r7, #16
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
    TIM_IC_InitTypeDef sConfigIC = {0};
 8002a26:	463b      	mov	r3, r7
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8002a32:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <MX_TIM3_Init+0xd8>)
 8002a34:	4a2b      	ldr	r2, [pc, #172]	; (8002ae4 <MX_TIM3_Init+0xdc>)
 8002a36:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 71;
 8002a38:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <MX_TIM3_Init+0xd8>)
 8002a3a:	2247      	movs	r2, #71	; 0x47
 8002a3c:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3e:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <MX_TIM3_Init+0xd8>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 8002a44:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <MX_TIM3_Init+0xd8>)
 8002a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a4a:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a4c:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <MX_TIM3_Init+0xd8>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a52:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <MX_TIM3_Init+0xd8>)
 8002a54:	2280      	movs	r2, #128	; 0x80
 8002a56:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a58:	4821      	ldr	r0, [pc, #132]	; (8002ae0 <MX_TIM3_Init+0xd8>)
 8002a5a:	f009 ff79 	bl	800c950 <HAL_TIM_Base_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_TIM3_Init+0x60>
    {
      Error_Handler();
 8002a64:	f000 f8f2 	bl	8002c4c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a6c:	61bb      	str	r3, [r7, #24]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a6e:	f107 0318 	add.w	r3, r7, #24
 8002a72:	4619      	mov	r1, r3
 8002a74:	481a      	ldr	r0, [pc, #104]	; (8002ae0 <MX_TIM3_Init+0xd8>)
 8002a76:	f00a fc2f 	bl	800d2d8 <HAL_TIM_ConfigClockSource>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_TIM3_Init+0x7c>
    {
      Error_Handler();
 8002a80:	f000 f8e4 	bl	8002c4c <Error_Handler>
    }
    if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002a84:	4816      	ldr	r0, [pc, #88]	; (8002ae0 <MX_TIM3_Init+0xd8>)
 8002a86:	f009 fffd 	bl	800ca84 <HAL_TIM_IC_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM3_Init+0x8c>
    {
      Error_Handler();
 8002a90:	f000 f8dc 	bl	8002c4c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a9c:	f107 0310 	add.w	r3, r7, #16
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480f      	ldr	r0, [pc, #60]	; (8002ae0 <MX_TIM3_Init+0xd8>)
 8002aa4:	f00a ff7a 	bl	800d99c <HAL_TIMEx_MasterConfigSynchronization>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM3_Init+0xaa>
    {
      Error_Handler();
 8002aae:	f000 f8cd 	bl	8002c4c <Error_Handler>
    }
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	603b      	str	r3, [r7, #0]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	607b      	str	r3, [r7, #4]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
    sConfigIC.ICFilter = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
    if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <MX_TIM3_Init+0xd8>)
 8002aca:	f00a fb71 	bl	800d1b0 <HAL_TIM_IC_ConfigChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM3_Init+0xd0>
    {
      Error_Handler();
 8002ad4:	f000 f8ba 	bl	8002c4c <Error_Handler>
    }
}
 8002ad8:	bf00      	nop
 8002ada:	3728      	adds	r7, #40	; 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000b3c 	.word	0x20000b3c
 8002ae4:	40000400 	.word	0x40000400

08002ae8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART1_UART_Init( void ){
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
    huart1.Instance= USART1;
 8002aec:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002aee:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <MX_USART1_UART_Init+0x50>)
 8002af0:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate=115200;
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002af8:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength= UART_WORDLENGTH_8B;
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits= UART_STOPBITS_1;
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity= UART_PARITY_NONE;
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode= UART_MODE_TX_RX;
 8002b0c:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002b0e:	220c      	movs	r2, #12
 8002b10:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl= UART_HWCONTROL_NONE;
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart1)!=HAL_OK)
 8002b1e:	4805      	ldr	r0, [pc, #20]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002b20:	f00a ffac 	bl	800da7c <HAL_UART_Init>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 8002b2a:	f000 f88f 	bl	8002c4c <Error_Handler>
    }
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000b84 	.word	0x20000b84
 8002b38:	40013800 	.word	0x40013800

08002b3c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
 void MX_GPIO_Init( void ){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct={ 0 };
 8002b42:	f107 0310 	add.w	r3, r7, #16
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b50:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <MX_GPIO_Init+0x104>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	4a3a      	ldr	r2, [pc, #232]	; (8002c40 <MX_GPIO_Init+0x104>)
 8002b56:	f043 0310 	orr.w	r3, r3, #16
 8002b5a:	6193      	str	r3, [r2, #24]
 8002b5c:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <MX_GPIO_Init+0x104>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b68:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <MX_GPIO_Init+0x104>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	4a34      	ldr	r2, [pc, #208]	; (8002c40 <MX_GPIO_Init+0x104>)
 8002b6e:	f043 0320 	orr.w	r3, r3, #32
 8002b72:	6193      	str	r3, [r2, #24]
 8002b74:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <MX_GPIO_Init+0x104>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b80:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <MX_GPIO_Init+0x104>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	4a2e      	ldr	r2, [pc, #184]	; (8002c40 <MX_GPIO_Init+0x104>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	6193      	str	r3, [r2, #24]
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <MX_GPIO_Init+0x104>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b98:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <MX_GPIO_Init+0x104>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	4a28      	ldr	r2, [pc, #160]	; (8002c40 <MX_GPIO_Init+0x104>)
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	6193      	str	r3, [r2, #24]
 8002ba4:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <MX_GPIO_Init+0x104>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	603b      	str	r3, [r7, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB,OLED_DC_Pin|DRV_R_Pin|DRV_L_Pin, GPIO_PIN_RESET);    /*Configure GPIO pin : ENC_BTN_Pin */
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f244 01c0 	movw	r1, #16576	; 0x40c0
 8002bb6:	4823      	ldr	r0, [pc, #140]	; (8002c44 <MX_GPIO_Init+0x108>)
 8002bb8:	f005 f95f 	bl	8007e7a <HAL_GPIO_WritePin>
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, OLED_CS_Pin, GPIO_PIN_RESET);    /*Configure GPIO pin : ENC_BTN_Pin OLED_CS*/
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bc2:	4821      	ldr	r0, [pc, #132]	; (8002c48 <MX_GPIO_Init+0x10c>)
 8002bc4:	f005 f959 	bl	8007e7a <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin= ENC_BTN_Pin;
 8002bc8:	2304      	movs	r3, #4
 8002bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode= GPIO_MODE_INPUT;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull= GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8002bd4:	f107 0310 	add.w	r3, r7, #16
 8002bd8:	4619      	mov	r1, r3
 8002bda:	481b      	ldr	r0, [pc, #108]	; (8002c48 <MX_GPIO_Init+0x10c>)
 8002bdc:	f004 ffb2 	bl	8007b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin= OLED_CS_Pin;
 8002be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002be4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode= GPIO_MODE_OUTPUT_PP;
 8002be6:	2301      	movs	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull= GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed= GPIO_SPEED_FREQ_LOW;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8002bf2:	f107 0310 	add.w	r3, r7, #16
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4813      	ldr	r0, [pc, #76]	; (8002c48 <MX_GPIO_Init+0x10c>)
 8002bfa:	f004 ffa3 	bl	8007b44 <HAL_GPIO_Init>

    /*Configure GPIO pins : OLED_DC_Pin SW_LOW_Pin SW_HIGH_Pin DRV_R_Pin DRV_L_Pin */
    GPIO_InitStruct.Pin= OLED_DC_Pin|DRV_R_Pin|DRV_L_Pin;
 8002bfe:	f244 03c0 	movw	r3, #16576	; 0x40c0
 8002c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode= GPIO_MODE_OUTPUT_PP;
 8002c04:	2301      	movs	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull= GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed= GPIO_SPEED_FREQ_LOW;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c10:	f107 0310 	add.w	r3, r7, #16
 8002c14:	4619      	mov	r1, r3
 8002c16:	480b      	ldr	r0, [pc, #44]	; (8002c44 <MX_GPIO_Init+0x108>)
 8002c18:	f004 ff94 	bl	8007b44 <HAL_GPIO_Init>

    /*Configure GPIO pins : SW_LOW_Pin SW_HIGH_Pin */
    GPIO_InitStruct.Pin = SW_LOW_Pin|SW_HIGH_Pin;
 8002c1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2a:	f107 0310 	add.w	r3, r7, #16
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4804      	ldr	r0, [pc, #16]	; (8002c44 <MX_GPIO_Init+0x108>)
 8002c32:	f004 ff87 	bl	8007b44 <HAL_GPIO_Init>
}
 8002c36:	bf00      	nop
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40010c00 	.word	0x40010c00
 8002c48:	40010800 	.word	0x40010800

08002c4c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler( void ){
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c50:	b672      	cpsid	i
}
 8002c52:	bf00      	nop
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while ( 1 )
 8002c54:	e7fe      	b.n	8002c54 <Error_Handler+0x8>
	...

08002c58 <_ZN7RDA5807C1EPv>:
#include "RDA5807.hpp"
#include "stm32f1xx_hal.h"
#include <stdio.h>


RDA5807::RDA5807(void* _hi2c):hi2c(_hi2c)
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f103 020c 	add.w	r2, r3, #12
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	621a      	str	r2, [r3, #32]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f103 020e 	add.w	r2, r3, #14
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f103 0210 	add.w	r2, r3, #16
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f103 0212 	add.w	r2, r3, #18
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f103 0214 	add.w	r2, r3, #20
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f103 0216 	add.w	r2, r3, #22
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f103 0218 	add.w	r2, r3, #24
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f103 021a 	add.w	r2, r3, #26
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f103 021c 	add.w	r2, r3, #28
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	1c9a      	adds	r2, r3, #2
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	649a      	str	r2, [r3, #72]	; 0x48
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	1d1a      	adds	r2, r3, #4
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	1d9a      	adds	r2, r3, #6
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	651a      	str	r2, [r3, #80]	; 0x50
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f103 0208 	add.w	r2, r3, #8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f103 020a 	add.w	r2, r3, #10
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	; 0x58
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a26      	ldr	r2, [pc, #152]	; (8002d8c <_ZN7RDA5807C1EPv+0x134>)
 8002cf2:	335c      	adds	r3, #92	; 0x5c
 8002cf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cf8:	e883 0003 	stmia.w	r3, {r0, r1}
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a24      	ldr	r2, [pc, #144]	; (8002d90 <_ZN7RDA5807C1EPv+0x138>)
 8002d00:	3364      	adds	r3, #100	; 0x64
 8002d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d06:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <_ZN7RDA5807C1EPv+0x13c>)
 8002d0e:	336c      	adds	r3, #108	; 0x6c
 8002d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d14:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2211      	movs	r2, #17
 8002d1c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2210      	movs	r2, #16
 8002d24:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d46:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d50:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d5a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d74:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
{}
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	08013fd4 	.word	0x08013fd4
 8002d90:	08013fdc 	.word	0x08013fdc
 8002d94:	08013fe4 	.word	0x08013fe4

08002d98 <_ZN7RDA580718getStatusRegistersEv>:
 * @see RDA5807M - SINGLE-CHIP BROADCAST FMRADIO TUNER; pages 5, 9, 12 and 13. 
 * @see rda_reg0a, rda_reg0b, rda_reg0c, rda_reg0d, rda_reg0e, rda_reg0f
 * @see shadowStatusRegisters;
 */
void RDA5807::getStatusRegisters()
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	6078      	str	r0, [r7, #4]
    HAL_I2C_Master_Receive((I2C_HandleTypeDef*)hi2c, this->deviceAddressFullAccess<<1, (uint8_t*)&shadowStatusRegisters, 12, 2000);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	b299      	uxth	r1, r3
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	230c      	movs	r3, #12
 8002dbc:	f005 f9ba 	bl	8008134 <HAL_I2C_Master_Receive>
    for (uint8_t i=0; i <sizeof(shadowStatusRegisters);++i)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b0b      	cmp	r3, #11
 8002dc8:	d811      	bhi.n	8002dee <_ZN7RDA580718getStatusRegistersEv+0x56>
        shadowStatusRegisters[i] = swapU16(shadowStatusRegisters[i]);
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002dd2:	7bfc      	ldrb	r4, [r7, #15]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa13 	bl	8003202 <_ZN7RDA58077swapU16Et>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	461a      	mov	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    for (uint8_t i=0; i <sizeof(shadowStatusRegisters);++i)
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	3301      	adds	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	e7ea      	b.n	8002dc4 <_ZN7RDA580718getStatusRegistersEv+0x2c>
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd90      	pop	{r4, r7, pc}

08002df6 <_ZN7RDA58077readRegEh>:


uint16_t RDA5807::readReg(uint8_t reg)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b088      	sub	sp, #32
 8002dfa:	af04      	add	r7, sp, #16
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	70fb      	strb	r3, [r7, #3]
    uint16_t val;
    if (HAL_OK == HAL_I2C_Mem_Read((I2C_HandleTypeDef*)hi2c, this->deviceAddressDirectAccess<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&val, sizeof(val), 2000))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	b299      	uxth	r1, r3
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002e1c:	9302      	str	r3, [sp, #8]
 8002e1e:	2302      	movs	r3, #2
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	f107 030e 	add.w	r3, r7, #14
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f005 fcdd 	bl	80087e8 <HAL_I2C_Mem_Read>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d006      	beq.n	8002e4c <_ZN7RDA58077readRegEh+0x56>
        return swapU16(val);
 8002e3e:	89fb      	ldrh	r3, [r7, #14]
 8002e40:	4619      	mov	r1, r3
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f9dd 	bl	8003202 <_ZN7RDA58077swapU16Et>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	e000      	b.n	8002e4e <_ZN7RDA58077readRegEh+0x58>
    return 0;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <_ZN7RDA58079getStatusEh>:
 * @details Useful when you need just a specific status register content.
 * @details This methos update the first element of the shadowStatusRegisters linked to the register
 * @return rdax_reg0a the reference to current value of the 0x0A register. 
 */
void *RDA5807::getStatus(uint8_t reg)
{
 8002e56:	b590      	push	{r4, r7, lr}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	70fb      	strb	r3, [r7, #3]
//    word16_to_bytes aux;

    if ( reg < 0x0A || reg > 0x0F )
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	2b09      	cmp	r3, #9
 8002e66:	d902      	bls.n	8002e6e <_ZN7RDA58079getStatusEh+0x18>
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	d901      	bls.n	8002e72 <_ZN7RDA58079getStatusEh+0x1c>
        return NULL;  // Maybe not necessary.
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e011      	b.n	8002e96 <_ZN7RDA58079getStatusEh+0x40>
    shadowStatusRegisters[reg - 0x0A] = readReg(reg);
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	f1a3 040a 	sub.w	r4, r3, #10
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff ffba 	bl	8002df6 <_ZN7RDA58077readRegEh>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return &shadowStatusRegisters[reg - 0x0A];
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	3b0a      	subs	r3, #10
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2

}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd90      	pop	{r4, r7, pc}

08002e9e <_ZN7RDA580711setRegisterEht>:
 *
 * @param reg    register number (valid values is between 0x02 and 0x07)   
 * @param value  the unsigned 16 bits word value (see rda_rec0x data types)   
 */
void RDA5807::setRegister(uint8_t reg, uint16_t value)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b088      	sub	sp, #32
 8002ea2:	af04      	add	r7, sp, #16
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	70fb      	strb	r3, [r7, #3]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	803b      	strh	r3, [r7, #0]
    if (reg > 8)
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d82c      	bhi.n	8002f0e <_ZN7RDA580711setRegisterEht+0x70>
        return; // Maybe not necessary.
    uint16_t val=swapU16(value);
 8002eb4:	883b      	ldrh	r3, [r7, #0]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f9a2 	bl	8003202 <_ZN7RDA58077swapU16Et>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	81fb      	strh	r3, [r7, #14]
    if( HAL_OK == HAL_I2C_Mem_Write((I2C_HandleTypeDef*)hi2c, this->deviceAddressDirectAccess<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&val, sizeof(value), 2000))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8d3 0118 	ldr.w	r0, [r3, #280]	; 0x118
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	b299      	uxth	r1, r3
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002edc:	9302      	str	r3, [sp, #8]
 8002ede:	2302      	movs	r3, #2
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	f107 030e 	add.w	r3, r7, #14
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f005 fb83 	bl	80085f4 <HAL_I2C_Mem_Write>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <_ZN7RDA580711setRegisterEht+0x72>
        shadowRegisters[reg] = value;  // Updates the shadowRegisters element
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	4413      	add	r3, r2
 8002f08:	883a      	ldrh	r2, [r7, #0]
 8002f0a:	809a      	strh	r2, [r3, #4]
 8002f0c:	e000      	b.n	8002f10 <_ZN7RDA580711setRegisterEht+0x72>
        return; // Maybe not necessary.
 8002f0e:	bf00      	nop
}
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <_ZN7RDA580717waitAndFinishTuneEv>:
/**
 * @ingroup GA03
 * @brief Waits for Seek or Tune finish
 */
void RDA5807::waitAndFinishTune()
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
    do {
        getStatus(REG0A);
 8002f1e:	210a      	movs	r1, #10
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ff98 	bl	8002e56 <_ZN7RDA58079getStatusEh>
    } while (reg0a->refined.STC == 0);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	785b      	ldrb	r3, [r3, #1]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d100      	bne.n	8002f38 <_ZN7RDA580717waitAndFinishTuneEv+0x22>
    do {
 8002f36:	e7f2      	b.n	8002f1e <_ZN7RDA580717waitAndFinishTuneEv+0x8>
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_ZN7RDA58077powerUpEv>:
/**
 * @ingroup GA03
 * @brief Powers the receiver on
 */
void RDA5807::powerUp()
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
    reg02->raw = 0;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	801a      	strh	r2, [r3, #0]
    reg02->refined.NEW_METHOD = 0;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f54:	7813      	ldrb	r3, [r2, #0]
 8002f56:	f36f 0382 	bfc	r3, #2, #1
 8002f5a:	7013      	strb	r3, [r2, #0]
    reg02->refined.RDS_EN = 0;  // RDS disable
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f60:	7813      	ldrb	r3, [r2, #0]
 8002f62:	f36f 03c3 	bfc	r3, #3, #1
 8002f66:	7013      	strb	r3, [r2, #0]
    reg02->refined.CLK_MODE = this->clockType;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 1114 	ldrb.w	r1, [r3, #276]	; 0x114
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f72:	460b      	mov	r3, r1
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	b2d9      	uxtb	r1, r3
 8002f7a:	7813      	ldrb	r3, [r2, #0]
 8002f7c:	f361 1306 	bfi	r3, r1, #4, #3
 8002f80:	7013      	strb	r3, [r2, #0]
    reg02->refined.RCLK_DIRECT_IN = this->oscillatorType;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 1115 	ldrb.w	r1, [r3, #277]	; 0x115
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	b2d9      	uxtb	r1, r3
 8002f94:	7853      	ldrb	r3, [r2, #1]
 8002f96:	f361 0382 	bfi	r3, r1, #2, #1
 8002f9a:	7053      	strb	r3, [r2, #1]
    reg02->refined.MONO = 1;    // Force mono
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fa0:	7853      	ldrb	r3, [r2, #1]
 8002fa2:	f043 0320 	orr.w	r3, r3, #32
 8002fa6:	7053      	strb	r3, [r2, #1]
    reg02->refined.DMUTE = 1;   // Normal operation
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fac:	7853      	ldrb	r3, [r2, #1]
 8002fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb2:	7053      	strb	r3, [r2, #1]
    reg02->refined.DHIZ = 1;    // Normal operation
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb8:	7853      	ldrb	r3, [r2, #1]
 8002fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fbe:	7053      	strb	r3, [r2, #1]
    reg02->refined.ENABLE = 1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc4:	7813      	ldrb	r3, [r2, #0]
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	7013      	strb	r3, [r2, #0]
    reg02->refined.BASS = 1;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fd0:	7853      	ldrb	r3, [r2, #1]
 8002fd2:	f043 0310 	orr.w	r3, r3, #16
 8002fd6:	7053      	strb	r3, [r2, #1]
    reg02->refined.SEEK = 0;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fdc:	7853      	ldrb	r3, [r2, #1]
 8002fde:	f36f 0300 	bfc	r3, #0, #1
 8002fe2:	7053      	strb	r3, [r2, #1]

    setRegister(REG02,reg02->raw);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	2102      	movs	r1, #2
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ff55 	bl	8002e9e <_ZN7RDA580711setRegisterEht>
    
    reg05->raw = 0x00;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	801a      	strh	r2, [r3, #0]
    reg05->refined.INT_MODE = 0;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003000:	7853      	ldrb	r3, [r2, #1]
 8003002:	f36f 13c7 	bfc	r3, #7, #1
 8003006:	7053      	strb	r3, [r2, #1]
    reg05->refined.LNA_PORT_SEL = 2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300c:	7813      	ldrb	r3, [r2, #0]
 800300e:	2102      	movs	r1, #2
 8003010:	f361 1387 	bfi	r3, r1, #6, #2
 8003014:	7013      	strb	r3, [r2, #0]
    reg05->refined.LNA_ICSEL_BIT = 0;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800301a:	7813      	ldrb	r3, [r2, #0]
 800301c:	f36f 1305 	bfc	r3, #4, #2
 8003020:	7013      	strb	r3, [r2, #0]
    reg05->refined.SEEKTH = 8;  // 0b1000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003026:	7853      	ldrb	r3, [r2, #1]
 8003028:	2108      	movs	r1, #8
 800302a:	f361 0303 	bfi	r3, r1, #0, #4
 800302e:	7053      	strb	r3, [r2, #1]
    reg05->refined.VOLUME = 0;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003034:	7813      	ldrb	r3, [r2, #0]
 8003036:	f36f 0303 	bfc	r3, #0, #4
 800303a:	7013      	strb	r3, [r2, #0]

    setRegister(REG05, reg05->raw);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	2105      	movs	r1, #5
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ff29 	bl	8002e9e <_ZN7RDA580711setRegisterEht>
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_ZN7RDA58074initEhh>:
 * @brief Starts the device
 * @param clock_type       Clock used.
 * @param oscillator_type  optional. Sets the Oscillator type used (Default Crystal or Ref. Clock).
 */
int RDA5807::init(uint8_t clock_type, uint8_t oscillator_type)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	70fb      	strb	r3, [r7, #3]
 8003060:	4613      	mov	r3, r2
 8003062:	70bb      	strb	r3, [r7, #2]
    this->oscillatorType = oscillator_type;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	78ba      	ldrb	r2, [r7, #2]
 8003068:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    this->clockType = clock_type;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
//    getStatusRegisters();
    if (RDA5807_ID != readReg(REG00))
 8003074:	2100      	movs	r1, #0
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff febd 	bl	8002df6 <_ZN7RDA58077readRegEh>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	f645 0304 	movw	r3, #22532	; 0x5804
 8003084:	429a      	cmp	r2, r3
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <_ZN7RDA58074initEhh+0x44>
            return -1;
 8003092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003096:	e006      	b.n	80030a6 <_ZN7RDA58074initEhh+0x52>

//    Wire.begin();
//    delay(1);
    powerUp();
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff ff51 	bl	8002f40 <_ZN7RDA58077powerUpEv>
    getStatusRegisters();
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff fe7a 	bl	8002d98 <_ZN7RDA580718getStatusRegistersEv>
    return 0;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <_ZN7RDA580710setChannelEt>:
 * @see RDA5807M - SINGLE-CHIP BROADCAST FM RADIO TUNER - Rev.1.1–Aug.2015; pages 9 and 12.
 * 
 * @param channel
 */
void RDA5807::setChannel(uint16_t channel)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	807b      	strh	r3, [r7, #2]
    reg03->refined.CHAN = channel;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c4:	b299      	uxth	r1, r3
 80030c6:	8813      	ldrh	r3, [r2, #0]
 80030c8:	f361 138f 	bfi	r3, r1, #6, #10
 80030cc:	8013      	strh	r3, [r2, #0]
    reg03->refined.TUNE = 1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d2:	7813      	ldrb	r3, [r2, #0]
 80030d4:	f043 0310 	orr.w	r3, r3, #16
 80030d8:	7013      	strb	r3, [r2, #0]
    reg03->refined.BAND = this->currentFMBand;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 1102 	ldrb.w	r1, [r3, #258]	; 0x102
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	460b      	mov	r3, r1
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	b2d9      	uxtb	r1, r3
 80030ec:	7813      	ldrb	r3, [r2, #0]
 80030ee:	f361 0383 	bfi	r3, r1, #2, #2
 80030f2:	7013      	strb	r3, [r2, #0]
    reg03->refined.SPACE = this->currentFMSpace;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 1103 	ldrb.w	r1, [r3, #259]	; 0x103
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fe:	460b      	mov	r3, r1
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	b2d9      	uxtb	r1, r3
 8003106:	7813      	ldrb	r3, [r2, #0]
 8003108:	f361 0301 	bfi	r3, r1, #0, #2
 800310c:	7013      	strb	r3, [r2, #0]
    reg03->refined.DIRECT_MODE = 0;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003112:	7813      	ldrb	r3, [r2, #0]
 8003114:	f36f 1345 	bfc	r3, #5, #1
 8003118:	7013      	strb	r3, [r2, #0]
    setRegister(REG03, reg03->raw);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	2103      	movs	r1, #3
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff feba 	bl	8002e9e <_ZN7RDA580711setRegisterEht>
    waitAndFinishTune();
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff fef3 	bl	8002f16 <_ZN7RDA580717waitAndFinishTuneEv>
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <_ZN7RDA580712setFrequencyEt>:
 * @ingroup GA03
 * @brief Sets the frequency
 * @param frequency
 */
void RDA5807::setFrequency(uint16_t frequency)
{
 8003138:	b5b0      	push	{r4, r5, r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]
    uint16_t channel = (frequency - this->startBand[currentFMBand] ) / (this->fmSpace[this->currentFMSpace] / 10.0);
 8003144:	887a      	ldrh	r2, [r7, #2]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	332c      	adds	r3, #44	; 0x2c
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	440b      	add	r3, r1
 8003154:	889b      	ldrh	r3, [r3, #4]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd f95b 	bl	8000414 <__aeabi_i2d>
 800315e:	4604      	mov	r4, r0
 8003160:	460d      	mov	r5, r1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	3334      	adds	r3, #52	; 0x34
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	889b      	ldrh	r3, [r3, #4]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd f94e 	bl	8000414 <__aeabi_i2d>
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <_ZN7RDA580712setFrequencyEt+0x80>)
 800317e:	f7fd fadd 	bl	800073c <__aeabi_ddiv>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4620      	mov	r0, r4
 8003188:	4629      	mov	r1, r5
 800318a:	f7fd fad7 	bl	800073c <__aeabi_ddiv>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	f7fd fbb9 	bl	800090c <__aeabi_d2uiz>
 800319a:	4603      	mov	r3, r0
 800319c:	81fb      	strh	r3, [r7, #14]
    setChannel(channel);
 800319e:	89fb      	ldrh	r3, [r7, #14]
 80031a0:	4619      	mov	r1, r3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff ff83 	bl	80030ae <_ZN7RDA580710setChannelEt>
    this->currentFrequency = frequency;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	887a      	ldrh	r2, [r7, #2]
 80031ac:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bdb0      	pop	{r4, r5, r7, pc}
 80031b8:	40240000 	.word	0x40240000

080031bc <_ZN7RDA580712getFrequencyEv>:
 * @ingroup GA03
 * @brief Gets the current frequency.
 * @return uint16_t
 */
uint16_t RDA5807::getFrequency()
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
    return this->currentFrequency;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <_ZN7RDA58078isStereoEv>:
 * @brief Gets the current Stereo status
 *
 * @return TRUE if stereo; 
 */
bool RDA5807::isStereo()
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
    getStatus(REG0A);
 80031dc:	210a      	movs	r1, #10
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff fe39 	bl	8002e56 <_ZN7RDA58079getStatusEh>
    return reg0a->refined.ST;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	785b      	ldrb	r3, [r3, #1]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_ZN7RDA58077swapU16Et>:
    reg04->refined.RDS_FIFO_CLR = 1;
    setRegister(REG04, reg04->raw);
}

uint16_t RDA5807::swapU16( uint16_t val )
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	807b      	strh	r3, [r7, #2]
    return (val << 8) | (val >> 8 );
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	b21a      	sxth	r2, r3
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	b29b      	uxth	r3, r3
 800321a:	b21b      	sxth	r3, r3
 800321c:	4313      	orrs	r3, r2
 800321e:	b21b      	sxth	r3, r3
 8003220:	b29b      	uxth	r3, r3
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <calc_pulse>:

static volatile uint32_t received_value;
static int received_bits;

static pulse_t calc_pulse(uint32_t time)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
    if (time < 250)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2bf9      	cmp	r3, #249	; 0xf9
 8003238:	d801      	bhi.n	800323e <calc_pulse+0x12>
        return PULSE_ERROR;
 800323a:	2305      	movs	r3, #5
 800323c:	e021      	b.n	8003282 <calc_pulse+0x56>
    else if (time < 1200)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003244:	d201      	bcs.n	800324a <calc_pulse+0x1e>
        return PULSE_SHORT;
 8003246:	2304      	movs	r3, #4
 8003248:	e01b      	b.n	8003282 <calc_pulse+0x56>
    else if (time < 2400)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8003250:	d201      	bcs.n	8003256 <calc_pulse+0x2a>
        return PULSE_LONG;
 8003252:	2303      	movs	r3, #3
 8003254:	e015      	b.n	8003282 <calc_pulse+0x56>
    else if (time < 12000)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f642 62df 	movw	r2, #11999	; 0x2edf
 800325c:	4293      	cmp	r3, r2
 800325e:	d801      	bhi.n	8003264 <calc_pulse+0x38>
        return PULSE_11500US;
 8003260:	2301      	movs	r3, #1
 8003262:	e00e      	b.n	8003282 <calc_pulse+0x56>
    else if (time < 31000)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f647 1217 	movw	r2, #30999	; 0x7917
 800326a:	4293      	cmp	r3, r2
 800326c:	d801      	bhi.n	8003272 <calc_pulse+0x46>
        return PULSE_2MS;
 800326e:	2302      	movs	r3, #2
 8003270:	e007      	b.n	8003282 <calc_pulse+0x56>
    else if (time < 41000)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f24a 0227 	movw	r2, #40999	; 0xa027
 8003278:	4293      	cmp	r3, r2
 800327a:	d801      	bhi.n	8003280 <calc_pulse+0x54>
        return PULSE_9MS;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <calc_pulse+0x56>
    else
        return PULSE_ERROR;
 8003280:	2305      	movs	r3, #5
    return PULSE_ERROR;
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <ir_tim_interrupt>:

void ir_tim_interrupt(TIM_HandleTypeDef *htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
    pulse_t pulse;

    if (received_bits >= 32)
 8003294:	4b2d      	ldr	r3, [pc, #180]	; (800334c <ir_tim_interrupt+0xc0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b1f      	cmp	r3, #31
 800329a:	dc4f      	bgt.n	800333c <ir_tim_interrupt+0xb0>
        return;

    pulse = calc_pulse(HAL_TIM_ReadCapturedValue(htim, IR_CHANEL_IN));
 800329c:	2104      	movs	r1, #4
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f00a f8de 	bl	800d460 <HAL_TIM_ReadCapturedValue>
 80032a4:	4603      	mov	r3, r0
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ffc0 	bl	800322c <calc_pulse>
 80032ac:	4603      	mov	r3, r0
 80032ae:	73fb      	strb	r3, [r7, #15]
    htim->Instance->CNT=0;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2200      	movs	r2, #0
 80032b6:	625a      	str	r2, [r3, #36]	; 0x24

    switch (pulse) {
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d83f      	bhi.n	8003340 <ir_tim_interrupt+0xb4>
 80032c0:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <ir_tim_interrupt+0x3c>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	08003325 	.word	0x08003325
 80032cc:	0800332d 	.word	0x0800332d
 80032d0:	080032fd 	.word	0x080032fd
 80032d4:	080032d9 	.word	0x080032d9
    case PULSE_SHORT:
        if(received_bits == 0)
 80032d8:	4b1c      	ldr	r3, [pc, #112]	; (800334c <ir_tim_interrupt+0xc0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <ir_tim_interrupt+0x5a>
            received_value = 0;
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <ir_tim_interrupt+0xc4>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
        received_value = received_value >> 1;
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <ir_tim_interrupt+0xc4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	4a18      	ldr	r2, [pc, #96]	; (8003350 <ir_tim_interrupt+0xc4>)
 80032ee:	6013      	str	r3, [r2, #0]
        received_bits++;
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <ir_tim_interrupt+0xc0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3301      	adds	r3, #1
 80032f6:	4a15      	ldr	r2, [pc, #84]	; (800334c <ir_tim_interrupt+0xc0>)
 80032f8:	6013      	str	r3, [r2, #0]
        break;
 80032fa:	e024      	b.n	8003346 <ir_tim_interrupt+0xba>
    case PULSE_LONG:
        if(received_bits == 0)
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <ir_tim_interrupt+0xc0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d102      	bne.n	800330a <ir_tim_interrupt+0x7e>
            received_value = 0;
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <ir_tim_interrupt+0xc4>)
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
        received_value = (received_value >> 1) | 0x80000000;
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <ir_tim_interrupt+0xc4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	085b      	lsrs	r3, r3, #1
 8003310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003314:	4a0e      	ldr	r2, [pc, #56]	; (8003350 <ir_tim_interrupt+0xc4>)
 8003316:	6013      	str	r3, [r2, #0]
        received_bits++;
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <ir_tim_interrupt+0xc0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	4a0b      	ldr	r2, [pc, #44]	; (800334c <ir_tim_interrupt+0xc0>)
 8003320:	6013      	str	r3, [r2, #0]
        break;
 8003322:	e010      	b.n	8003346 <ir_tim_interrupt+0xba>
    case PULSE_11500US:
        received_bits = 0;
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <ir_tim_interrupt+0xc0>)
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
        break;
 800332a:	e00c      	b.n	8003346 <ir_tim_interrupt+0xba>
    case PULSE_2MS:
        if (received_bits == 0)
 800332c:	4b07      	ldr	r3, [pc, #28]	; (800334c <ir_tim_interrupt+0xc0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d107      	bne.n	8003344 <ir_tim_interrupt+0xb8>
            received_bits = 32;
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <ir_tim_interrupt+0xc0>)
 8003336:	2220      	movs	r2, #32
 8003338:	601a      	str	r2, [r3, #0]
        break;
 800333a:	e003      	b.n	8003344 <ir_tim_interrupt+0xb8>
        return;
 800333c:	bf00      	nop
 800333e:	e002      	b.n	8003346 <ir_tim_interrupt+0xba>
    default:
//        received_bits = 0;
        break;
 8003340:	bf00      	nop
 8003342:	e000      	b.n	8003346 <ir_tim_interrupt+0xba>
        break;
 8003344:	bf00      	nop
    }
}
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000c10 	.word	0x20000c10
 8003350:	20000c0c 	.word	0x20000c0c

08003354 <ir_init>:

void ir_init(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
      HAL_TIM_Base_Start(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f009 fb47 	bl	800c9f0 <HAL_TIM_Base_Start>
      HAL_TIM_IC_Start_IT(htim, IR_CHANEL_IN);
 8003362:	2104      	movs	r1, #4
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f009 fbe5 	bl	800cb34 <HAL_TIM_IC_Start_IT>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <ir_read>:

int ir_read(void)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
    if (received_bits != 32)
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <ir_read+0x30>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b20      	cmp	r3, #32
 8003380:	d002      	beq.n	8003388 <ir_read+0x14>
        return -1;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003386:	e007      	b.n	8003398 <ir_read+0x24>

    uint8_t value = received_value >> 16;
 8003388:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <ir_read+0x34>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	71fb      	strb	r3, [r7, #7]
    received_bits = 0;
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <ir_read+0x30>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
    return value;
 8003396:	79fb      	ldrb	r3, [r7, #7]
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000c10 	.word	0x20000c10
 80033a8:	20000c0c 	.word	0x20000c0c

080033ac <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
	...

080033ec <get_input_src>:
    extern uint8_t u8x8_byte_stm32_hw_i2c( u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr );

    inline int get_enc_val(){
        return TIM2->CNT;
    }
    inline InputSrcT get_input_src(){
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
        return (InputSrcT) ((TIM2->CNT>>1)%5);
 80033f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	0859      	lsrs	r1, r3, #1
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <get_input_src+0x28>)
 80033fa:	fba3 2301 	umull	r2, r3, r3, r1
 80033fe:	089a      	lsrs	r2, r3, #2
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	1aca      	subs	r2, r1, r3
 8003408:	b2d3      	uxtb	r3, r2
    }
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	cccccccd 	.word	0xcccccccd

08003418 <set_input_src>:
    inline void set_input_src( InputSrcT src ){
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
        TIM2->CNT=src<<1;
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	005a      	lsls	r2, r3, #1
 8003426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800342a:	625a      	str	r2, [r3, #36]	; 0x24
    }
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <_Z9prescalerlllli>:

#ifdef __cplusplus
}
#endif
/* Private user code ---------------------------------------------------------*/
int prescaler( long min1, long max1, long min2, long max2, int val ){
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	603b      	str	r3, [r7, #0]
    return min2+ (val-min1)* (max2-min2)/ (max1-min1);
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	6839      	ldr	r1, [r7, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	1a8a      	subs	r2, r1, r2
 8003450:	fb03 f202 	mul.w	r2, r3, r2
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1acb      	subs	r3, r1, r3
 800345a:	fb92 f2f3 	sdiv	r2, r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4413      	add	r3, r2
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <_ZN8MixerDRVC1EPv>:
#elif defined TSA_MIX
class MixerDRV: public TEA6321
#endif
{
public:
    MixerDRV( void *drv ) :
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
#ifdef TSA_MIX
        TEA6321(drv){};
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6839      	ldr	r1, [r7, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f001 f9e4 	bl	8004848 <_ZN7TEA6321C1EPv>
 8003480:	4a03      	ldr	r2, [pc, #12]	; (8003490 <_ZN8MixerDRVC1EPv+0x24>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	08014128 	.word	0x08014128

08003494 <_ZN8MixerDRV9write_drvEhh>:
#elif defined DB37XX
        Bd37534f(drv){};
#endif

private:
    virtual int write_drv( const uint8_t mem_addr, const uint8_t val ){
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af04      	add	r7, sp, #16
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
 80034a0:	4613      	mov	r3, r2
 80034a2:	70bb      	strb	r3, [r7, #2]
        uint8_t data=val;
 80034a4:	78bb      	ldrb	r3, [r7, #2]
 80034a6:	73bb      	strb	r3, [r7, #14]
        HAL_StatusTypeDef ret=HAL_I2C_Mem_Write((I2C_HandleTypeDef*)drv, addr, mem_addr, I2C_MEMADD_SIZE_8BIT, &data, 1, 200);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6858      	ldr	r0, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7a1b      	ldrb	r3, [r3, #8]
 80034b0:	b299      	uxth	r1, r3
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	23c8      	movs	r3, #200	; 0xc8
 80034b8:	9302      	str	r3, [sp, #8]
 80034ba:	2301      	movs	r3, #1
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	f107 030e 	add.w	r3, r7, #14
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	2301      	movs	r3, #1
 80034c6:	f005 f895 	bl	80085f4 <HAL_I2C_Mem_Write>
 80034ca:	4603      	mov	r3, r0
 80034cc:	73fb      	strb	r3, [r7, #15]
        return ret;
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
    }
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_TIM_IC_CaptureCallback>:
};

void HAL_TIM_IC_CaptureCallback( TIM_HandleTypeDef *htim ){
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
    if(htim==&htim3){
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HAL_TIM_IC_CaptureCallback+0x30>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d10a      	bne.n	80034fe <HAL_TIM_IC_CaptureCallback+0x26>
        switch ( HAL_TIM_GetActiveChannel(&htim3) )
 80034e8:	4807      	ldr	r0, [pc, #28]	; (8003508 <HAL_TIM_IC_CaptureCallback+0x30>)
 80034ea:	f00a f821 	bl	800d530 <HAL_TIM_GetActiveChannel>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d103      	bne.n	80034fc <HAL_TIM_IC_CaptureCallback+0x24>
        {
            case HAL_TIM_ACTIVE_CHANNEL_2:
                ir_tim_interrupt(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff fec9 	bl	800328c <ir_tim_interrupt>
            break;
 80034fa:	e000      	b.n	80034fe <HAL_TIM_IC_CaptureCallback+0x26>
            default:
            break;
 80034fc:	bf00      	nop
        }
    }
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000b3c 	.word	0x20000b3c

0800350c <_Z13swHighPressedv>:

void swHighPressed(){
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
    currProgFm++;
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <_Z13swHighPressedv+0x24>)
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <_Z13swHighPressedv+0x24>)
 800351a:	801a      	strh	r2, [r3, #0]
    eeprom.writeVariable(CURR_FM_PROG_ADR, currProgFm);
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <_Z13swHighPressedv+0x24>)
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	2123      	movs	r1, #35	; 0x23
 8003524:	4803      	ldr	r0, [pc, #12]	; (8003534 <_Z13swHighPressedv+0x28>)
 8003526:	f7fe fe9b 	bl	8002260 <_ZN6Eeprom13writeVariableEtt>
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000c14 	.word	0x20000c14
 8003534:	20000c24 	.word	0x20000c24

08003538 <_Z12swLowPressedv>:
void swLowPressed(){
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
    currProgFm--;
 800353c:	4b07      	ldr	r3, [pc, #28]	; (800355c <_Z12swLowPressedv+0x24>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <_Z12swLowPressedv+0x24>)
 8003546:	801a      	strh	r2, [r3, #0]
    eeprom.writeVariable(CURR_FM_PROG_ADR, currProgFm);
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <_Z12swLowPressedv+0x24>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	2123      	movs	r1, #35	; 0x23
 8003550:	4803      	ldr	r0, [pc, #12]	; (8003560 <_Z12swLowPressedv+0x28>)
 8003552:	f7fe fe85 	bl	8002260 <_ZN6Eeprom13writeVariableEtt>
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000c14 	.word	0x20000c14
 8003560:	20000c24 	.word	0x20000c24

08003564 <_Z17updateInputEeprom6Eepromt9InputSrcT>:

void updateInputEeprom( Eeprom eeprom, uint16_t inpSrc, InputSrcT InputSrc ){
 8003564:	b084      	sub	sp, #16
 8003566:	b580      	push	{r7, lr}
 8003568:	af00      	add	r7, sp, #0
 800356a:	f107 0c08 	add.w	ip, r7, #8
 800356e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//    eeprom.readVariable(CURR_INP_PROG_ADR, &inpSrc);
//    if(inpSrc!=InputSrc)
        eeprom.writeVariable(CURR_INP_PROG_ADR, InputSrc);
 8003572:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	2122      	movs	r1, #34	; 0x22
 800357c:	f107 0008 	add.w	r0, r7, #8
 8003580:	f7fe fe6e 	bl	8002260 <_ZN6Eeprom13writeVariableEtt>
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800358c:	b004      	add	sp, #16
 800358e:	4770      	bx	lr

08003590 <_ZN12CFPushButtonD1Ev>:
class CFPushButton {
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3360      	adds	r3, #96	; 0x60
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe f99e 	bl	80018de <_ZNSt8functionIFvvEED1Ev>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3350      	adds	r3, #80	; 0x50
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fe f999 	bl	80018de <_ZNSt8functionIFvvEED1Ev>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3340      	adds	r3, #64	; 0x40
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe f994 	bl	80018de <_ZNSt8functionIFvvEED1Ev>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3330      	adds	r3, #48	; 0x30
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe f98f 	bl	80018de <_ZNSt8functionIFvvEED1Ev>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3320      	adds	r3, #32
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe f98a 	bl	80018de <_ZNSt8functionIFvvEED1Ev>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main( void ){
 80035d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d6:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
 80035da:	af08      	add	r7, sp, #32
    /* MCU Configuration--------------------------------------------------------*/
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    RTC_TimeTypeDef sTime={ 0 };
 80035dc:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 80035e0:	2100      	movs	r1, #0
 80035e2:	460a      	mov	r2, r1
 80035e4:	801a      	strh	r2, [r3, #0]
 80035e6:	460a      	mov	r2, r1
 80035e8:	709a      	strb	r2, [r3, #2]
//  RTC_DateTypeDef sDate = {0};
    char data[20];
    bool fm_avability=true;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
    uint16_t programFm[32]={ 10020, 8980, 10320, 9950, 9584, 9533, 10645, 9406, 8822, 9897, 8945, 8814, 10586, 10135, 9647, 9237, 10708, 9077, 10422, 10328, 9286, 9946, 9832, 9599,
 80035f0:	4b92      	ldr	r3, [pc, #584]	; (800383c <main+0x268>)
 80035f2:	f507 7428 	add.w	r4, r7, #672	; 0x2a0
 80035f6:	461d      	mov	r5, r3
 80035f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003604:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            8813, 10627, 9143, 9539, 8823, 10169, 10179, 8838 };
//    uint16_t programFm[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int Volume=prescaler(0, 2800, VOL_MIN, VOL_MAX, adcVal.volume);
 800360c:	4b8c      	ldr	r3, [pc, #560]	; (8003840 <main+0x26c>)
 800360e:	88db      	ldrh	r3, [r3, #6]
 8003610:	b29b      	uxth	r3, r3
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2314      	movs	r3, #20
 8003616:	f06f 021e 	mvn.w	r2, #30
 800361a:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800361e:	2000      	movs	r0, #0
 8003620:	f7ff ff09 	bl	8003436 <_Z9prescalerlllli>
 8003624:	f8c7 0338 	str.w	r0, [r7, #824]	; 0x338
    InputSrcT InputSrc=INPUT_CD;
 8003628:	2300      	movs	r3, #0
 800362a:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
    u8g2_t u8g2;

    HAL_Init_Peryf();
 800362e:	f7fe ffa9 	bl	8002584 <HAL_Init_Peryf>
    HAL_ADCEx_Calibration_Start(&hadc1);
 8003632:	4884      	ldr	r0, [pc, #528]	; (8003844 <main+0x270>)
 8003634:	f003 fcee 	bl	8007014 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcVal, sizeof (adcVal)/sizeof(uint16_t));
 8003638:	2205      	movs	r2, #5
 800363a:	4981      	ldr	r1, [pc, #516]	; (8003840 <main+0x26c>)
 800363c:	4881      	ldr	r0, [pc, #516]	; (8003844 <main+0x270>)
 800363e:	f003 f9f5 	bl	8006a2c <HAL_ADC_Start_DMA>

    u8g2_Setup_ssd1322_nhd_256x64_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_stm32_gpio_and_delay);
 8003642:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003646:	4b80      	ldr	r3, [pc, #512]	; (8003848 <main+0x274>)
 8003648:	4a80      	ldr	r2, [pc, #512]	; (800384c <main+0x278>)
 800364a:	4981      	ldr	r1, [pc, #516]	; (8003850 <main+0x27c>)
 800364c:	f001 fb82 	bl	8004d54 <u8g2_Setup_ssd1322_nhd_256x64_f>
    if(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)){
 8003650:	4b80      	ldr	r3, [pc, #512]	; (8003854 <main+0x280>)
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d010      	beq.n	8003688 <main+0xb4>
        u8g2_InitDisplay(&u8g2);
 8003666:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800366a:	4618      	mov	r0, r3
 800366c:	f002 ffad 	bl	80065ca <u8x8_InitDisplay>
        u8g2_ClearDisplay(&u8g2);
 8003670:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003674:	4618      	mov	r0, r3
 8003676:	f001 fb48 	bl	8004d0a <u8g2_ClearDisplay>
        u8g2_SetPowerSave(&u8g2, 0);
 800367a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f002 ffb1 	bl	80065e8 <u8x8_SetPowerSave>
 8003686:	e004      	b.n	8003692 <main+0xbe>
    }else
        u8g2_InitInterface(&u8g2);
 8003688:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800368c:	4618      	mov	r0, r3
 800368e:	f002 ff86 	bl	800659e <u8x8_InitInterface>

    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003692:	213c      	movs	r1, #60	; 0x3c
 8003694:	4870      	ldr	r0, [pc, #448]	; (8003858 <main+0x284>)
 8003696:	f009 fbf5 	bl	800ce84 <HAL_TIM_Encoder_Start>
    htim2.Instance->CNT=0;
 800369a:	4b6f      	ldr	r3, [pc, #444]	; (8003858 <main+0x284>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24
    MixerDRV mixer(&hi2c2);
 80036a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a6:	496d      	ldr	r1, [pc, #436]	; (800385c <main+0x288>)
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fedf 	bl	800346c <_ZN8MixerDRVC1EPv>
    mixer.init();
 80036ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b2:	4618      	mov	r0, r3
 80036b4:	f001 f8de 	bl	8004874 <_ZN7TEA63214initEv>
    RDA5807 radio(&hi2c2);
 80036b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80036bc:	4967      	ldr	r1, [pc, #412]	; (800385c <main+0x288>)
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff faca 	bl	8002c58 <_ZN7RDA5807C1EPv>

    CFPushButton btnHigh(SW_HIGH_GPIO_Port, SW_HIGH_Pin, 10, 4000);  //Arduino way of defining pins
 80036c4:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80036c8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	230a      	movs	r3, #10
 80036d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036d4:	4962      	ldr	r1, [pc, #392]	; (8003860 <main+0x28c>)
 80036d6:	f7fe f90f 	bl	80018f8 <_ZN12CFPushButtonC1EP12GPIO_TypeDeftii>
    CFPushButton btnLow(SW_LOW_GPIO_Port, SW_LOW_Pin, 10, 4000);
 80036da:	1d38      	adds	r0, r7, #4
 80036dc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	230a      	movs	r3, #10
 80036e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e8:	495d      	ldr	r1, [pc, #372]	; (8003860 <main+0x28c>)
 80036ea:	f7fe f905 	bl	80018f8 <_ZN12CFPushButtonC1EP12GPIO_TypeDeftii>

    if(radio.init()<0)
 80036ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80036f2:	2200      	movs	r2, #0
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fcac 	bl	8003054 <_ZN7RDA58074initEhh>
 80036fc:	4603      	mov	r3, r0
 80036fe:	0fdb      	lsrs	r3, r3, #31
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <main+0x138>
        fm_avability=false;
 8003706:	2300      	movs	r3, #0
 8003708:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800370c:	201d      	movs	r0, #29
 800370e:	f003 fe20 	bl	8007352 <HAL_NVIC_EnableIRQ>
    ir_init(&htim3);
 8003712:	4854      	ldr	r0, [pc, #336]	; (8003864 <main+0x290>)
 8003714:	f7ff fe1e 	bl	8003354 <ir_init>

    btnHigh.setPulledUp();
 8003718:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe fa0b 	bl	8001b38 <_ZN12CFPushButton11setPulledUpEv>
    btnLow.setPulledUp();
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	4618      	mov	r0, r3
 8003726:	f7fe fa07 	bl	8001b38 <_ZN12CFPushButton11setPulledUpEv>
    btnHigh.setOnShortPressReachedCallback(swHighPressed);
 800372a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800372e:	494e      	ldr	r1, [pc, #312]	; (8003868 <main+0x294>)
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fb5f 	bl	8003df4 <_ZNSt8functionIFvvEEC1IPS0_vvEET_>
 8003736:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 800373a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe fa05 	bl	8001b50 <_ZN12CFPushButton30setOnShortPressReachedCallbackESt8functionIFvvEE>
 8003746:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe f8c7 	bl	80018de <_ZNSt8functionIFvvEED1Ev>
    btnLow.setOnShortPressReachedCallback(swLowPressed);
 8003750:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003754:	4945      	ldr	r1, [pc, #276]	; (800386c <main+0x298>)
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fb4c 	bl	8003df4 <_ZNSt8functionIFvvEEC1IPS0_vvEET_>
 800375c:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe f9f3 	bl	8001b50 <_ZN12CFPushButton30setOnShortPressReachedCallbackESt8functionIFvvEE>
 800376a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe f8b5 	bl	80018de <_ZNSt8functionIFvvEED1Ev>

    HAL_FLASH_Unlock();
 8003774:	f004 f866 	bl	8007844 <HAL_FLASH_Unlock>
    /* EEPROM Init */
    if(FLASH_OPER_OK==eeprom.init()){
 8003778:	483d      	ldr	r0, [pc, #244]	; (8003870 <main+0x29c>)
 800377a:	f7fe fc69 	bl	8002050 <_ZN6Eeprom4initEv>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80a8 	beq.w	80038e0 <main+0x30c>
        uint16_t eeStatus;
        eeprom.readVariable( INIT_EE_PROG_ADR, &eeStatus);
 8003790:	1cbb      	adds	r3, r7, #2
 8003792:	461a      	mov	r2, r3
 8003794:	2121      	movs	r1, #33	; 0x21
 8003796:	4836      	ldr	r0, [pc, #216]	; (8003870 <main+0x29c>)
 8003798:	f7fe fd0c 	bl	80021b4 <_ZN6Eeprom12readVariableEtPt>
        if(eeStatus!=INIT_EEPROM_VAL){
 800379c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80037a0:	f2a3 333e 	subw	r3, r3, #830	; 0x33e
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	2b55      	cmp	r3, #85	; 0x55
 80037a8:	d02d      	beq.n	8003806 <main+0x232>
            int i=0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
            //EEPROM not initialized
            for( i=0; i<33; ++i ){
 80037b0:	2300      	movs	r3, #0
 80037b2:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 80037b6:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	dc14      	bgt.n	80037e8 <main+0x214>
                eeprom.writeVariable(i, programFm[i]);
 80037be:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80037c2:	b299      	uxth	r1, r3
 80037c4:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80037ce:	443b      	add	r3, r7
 80037d0:	f833 3ca0 	ldrh.w	r3, [r3, #-160]
 80037d4:	461a      	mov	r2, r3
 80037d6:	4826      	ldr	r0, [pc, #152]	; (8003870 <main+0x29c>)
 80037d8:	f7fe fd42 	bl	8002260 <_ZN6Eeprom13writeVariableEtt>
            for( i=0; i<33; ++i ){
 80037dc:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80037e0:	3301      	adds	r3, #1
 80037e2:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 80037e6:	e7e6      	b.n	80037b6 <main+0x1e2>
            }
            eeprom.writeVariable(CURR_INP_PROG_ADR, get_input_src());
 80037e8:	f7ff fe00 	bl	80033ec <get_input_src>
 80037ec:	4603      	mov	r3, r0
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	2122      	movs	r1, #34	; 0x22
 80037f4:	481e      	ldr	r0, [pc, #120]	; (8003870 <main+0x29c>)
 80037f6:	f7fe fd33 	bl	8002260 <_ZN6Eeprom13writeVariableEtt>
            eeprom.writeVariable( INIT_EE_PROG_ADR, INIT_EEPROM_VAL);
 80037fa:	2255      	movs	r2, #85	; 0x55
 80037fc:	2121      	movs	r1, #33	; 0x21
 80037fe:	481c      	ldr	r0, [pc, #112]	; (8003870 <main+0x29c>)
 8003800:	f7fe fd2e 	bl	8002260 <_ZN6Eeprom13writeVariableEtt>
 8003804:	e06c      	b.n	80038e0 <main+0x30c>
        }else{
            for( int i=0; i<33; ++i )
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800380c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003810:	2b20      	cmp	r3, #32
 8003812:	dc2f      	bgt.n	8003874 <main+0x2a0>
                eeprom.readVariable(i, &programFm[i]);
 8003814:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003818:	b299      	uxth	r1, r3
 800381a:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800381e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	461a      	mov	r2, r3
 8003828:	4811      	ldr	r0, [pc, #68]	; (8003870 <main+0x29c>)
 800382a:	f7fe fcc3 	bl	80021b4 <_ZN6Eeprom12readVariableEtPt>
            for( int i=0; i<33; ++i )
 800382e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003832:	3301      	adds	r3, #1
 8003834:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8003838:	e7e8      	b.n	800380c <main+0x238>
 800383a:	bf00      	nop
 800383c:	08014078 	.word	0x08014078
 8003840:	20000c18 	.word	0x20000c18
 8003844:	20000a04 	.word	0x20000a04
 8003848:	08004679 	.word	0x08004679
 800384c:	08004765 	.word	0x08004765
 8003850:	0801507c 	.word	0x0801507c
 8003854:	40021000 	.word	0x40021000
 8003858:	20000af4 	.word	0x20000af4
 800385c:	20000a34 	.word	0x20000a34
 8003860:	40010c00 	.word	0x40010c00
 8003864:	20000b3c 	.word	0x20000b3c
 8003868:	0800350d 	.word	0x0800350d
 800386c:	08003539 	.word	0x08003539
 8003870:	20000c24 	.word	0x20000c24
            uint16_t tmp;
            eeprom.readVariable(CURR_INP_PROG_ADR, &tmp);
 8003874:	463b      	mov	r3, r7
 8003876:	461a      	mov	r2, r3
 8003878:	2122      	movs	r1, #34	; 0x22
 800387a:	48ce      	ldr	r0, [pc, #824]	; (8003bb4 <main+0x5e0>)
 800387c:	f7fe fc9a 	bl	80021b4 <_ZN6Eeprom12readVariableEtPt>
            if(tmp>INPUT_BT)
 8003880:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003884:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	2b04      	cmp	r3, #4
 800388c:	d905      	bls.n	800389a <main+0x2c6>
                tmp=0;
 800388e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003892:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8003896:	2200      	movs	r2, #0
 8003898:	801a      	strh	r2, [r3, #0]
            set_input_src((InputSrcT)tmp);
 800389a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800389e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fdb6 	bl	8003418 <set_input_src>
            eeprom.readVariable(CURR_FM_PROG_ADR, &tmp);
 80038ac:	463b      	mov	r3, r7
 80038ae:	461a      	mov	r2, r3
 80038b0:	2123      	movs	r1, #35	; 0x23
 80038b2:	48c0      	ldr	r0, [pc, #768]	; (8003bb4 <main+0x5e0>)
 80038b4:	f7fe fc7e 	bl	80021b4 <_ZN6Eeprom12readVariableEtPt>
            if(tmp>32)
 80038b8:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80038bc:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d905      	bls.n	80038d2 <main+0x2fe>
                tmp=0;
 80038c6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80038ca:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80038ce:	2200      	movs	r2, #0
 80038d0:	801a      	strh	r2, [r3, #0]
            currProgFm=tmp;
 80038d2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80038d6:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80038da:	881a      	ldrh	r2, [r3, #0]
 80038dc:	4bb6      	ldr	r3, [pc, #728]	; (8003bb8 <main+0x5e4>)
 80038de:	801a      	strh	r2, [r3, #0]
        }
    }
    /* Infinite loop */
    while ( 1 ){
        u8g2_FirstPage(&u8g2);
 80038e0:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 f9ce 	bl	8004c86 <u8g2_FirstPage>
        do{
            u8g2_ClearBuffer(&u8g2);
 80038ea:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 f93e 	bl	8004b70 <u8g2_ClearBuffer>
            u8g2_SetBitmapMode(&u8g2, 2);
 80038f4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80038f8:	2102      	movs	r1, #2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 f878 	bl	80049f0 <u8g2_SetBitmapMode>
            u8g2_SetFont(&u8g2, u8g2_font_VCR_OSD_tf);
 8003900:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003904:	49ad      	ldr	r1, [pc, #692]	; (8003bbc <main+0x5e8>)
 8003906:	4618      	mov	r0, r3
 8003908:	f001 ffce 	bl	80058a8 <u8g2_SetFont>
            //u8g2_SetDrawColor(&u8g2, 1);

            //Draw picture if button pressed
            if(GPIO_PIN_RESET==HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)){
 800390c:	2104      	movs	r1, #4
 800390e:	48ac      	ldr	r0, [pc, #688]	; (8003bc0 <main+0x5ec>)
 8003910:	f004 fa9c 	bl	8007e4c <HAL_GPIO_ReadPin>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	bf0c      	ite	eq
 800391a:	2301      	moveq	r3, #1
 800391c:	2300      	movne	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <main+0x368>
                u8g2_DrawXBM(&u8g2, 0, 0, Audio_256x64_width, Audio_256x64_height, (const uint8_t*)&Audio_256x64_bits);
 8003924:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003928:	4ba6      	ldr	r3, [pc, #664]	; (8003bc4 <main+0x5f0>)
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	2340      	movs	r3, #64	; 0x40
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003934:	2200      	movs	r2, #0
 8003936:	2100      	movs	r1, #0
 8003938:	f001 f8d7 	bl	8004aea <u8g2_DrawXBM>
            }

            if(int val=prescaler(995, 3100, VOL_MIN, VOL_MAX, adcVal.volume)!=Volume){
 800393c:	4ba2      	ldr	r3, [pc, #648]	; (8003bc8 <main+0x5f4>)
 800393e:	88db      	ldrh	r3, [r3, #6]
 8003940:	b29b      	uxth	r3, r3
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2314      	movs	r3, #20
 8003946:	f06f 021e 	mvn.w	r2, #30
 800394a:	f640 411c 	movw	r1, #3100	; 0xc1c
 800394e:	f240 30e3 	movw	r0, #995	; 0x3e3
 8003952:	f7ff fd70 	bl	8003436 <_Z9prescalerlllli>
 8003956:	4602      	mov	r2, r0
 8003958:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800395c:	4293      	cmp	r3, r2
 800395e:	bf14      	ite	ne
 8003960:	2301      	movne	r3, #1
 8003962:	2300      	moveq	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800396a:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00c      	beq.n	800398c <main+0x3b8>
                Volume=val;
 8003972:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8003976:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
                mixer.set_vol(Volume);
 800397a:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800397e:	b25a      	sxtb	r2, r3
 8003980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f000 ffa8 	bl	80048dc <_ZN7TEA63217set_volEa>
            }


            if(get_input_src()!=InputSrc){
 800398c:	f7ff fd2e 	bl	80033ec <get_input_src>
 8003990:	4603      	mov	r3, r0
 8003992:	461a      	mov	r2, r3
 8003994:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003998:	4293      	cmp	r3, r2
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01f      	beq.n	80039e6 <main+0x412>
                mixer.set_input(get_input_src());
 80039a6:	f7ff fd21 	bl	80033ec <get_input_src>
 80039aa:	4603      	mov	r3, r0
 80039ac:	461a      	mov	r2, r3
 80039ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 ffbb 	bl	8004930 <_ZN7TEA63219set_inputEh>
                InputSrc=get_input_src();
 80039ba:	f7ff fd17 	bl	80033ec <get_input_src>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
                updateInputEeprom(eeprom, 0, InputSrc);
 80039c4:	4e7b      	ldr	r6, [pc, #492]	; (8003bb4 <main+0x5e0>)
 80039c6:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80039ca:	9306      	str	r3, [sp, #24]
 80039cc:	2300      	movs	r3, #0
 80039ce:	9305      	str	r3, [sp, #20]
 80039d0:	466d      	mov	r5, sp
 80039d2:	f106 0410 	add.w	r4, r6, #16
 80039d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80039e2:	f7ff fdbf 	bl	8003564 <_Z17updateInputEeprom6Eepromt9InputSrcT>
            }
            Volume=prescaler(995, 3100, VOL_MIN, VOL_MAX, adcVal.volume);
 80039e6:	4b78      	ldr	r3, [pc, #480]	; (8003bc8 <main+0x5f4>)
 80039e8:	88db      	ldrh	r3, [r3, #6]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2314      	movs	r3, #20
 80039f0:	f06f 021e 	mvn.w	r2, #30
 80039f4:	f640 411c 	movw	r1, #3100	; 0xc1c
 80039f8:	f240 30e3 	movw	r0, #995	; 0x3e3
 80039fc:	f7ff fd1b 	bl	8003436 <_Z9prescalerlllli>
 8003a00:	f8c7 0338 	str.w	r0, [r7, #824]	; 0x338
            sprintf(data, "VOL=%+ddB", Volume);
 8003a04:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003a08:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8003a0c:	496f      	ldr	r1, [pc, #444]	; (8003bcc <main+0x5f8>)
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f00f ff60 	bl	80138d4 <siprintf>
            u8g2_DrawStr(&u8g2, 28, 64, data);
 8003a14:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003a18:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003a1c:	2240      	movs	r2, #64	; 0x40
 8003a1e:	211c      	movs	r1, #28
 8003a20:	f001 fea4 	bl	800576c <u8g2_DrawStr>
            int Bass = BASS_MAX- prescaler(300, 3800, BASS_MAX, BASS_MIN, adcVal.bass);
 8003a24:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <main+0x5f4>)
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	f06f 0311 	mvn.w	r3, #17
 8003a30:	2212      	movs	r2, #18
 8003a32:	f640 61d8 	movw	r1, #3800	; 0xed8
 8003a36:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a3a:	f7ff fcfc 	bl	8003436 <_Z9prescalerlllli>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f1c3 0312 	rsb	r3, r3, #18
 8003a44:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
            sprintf(data, "BASS=%+ddB", Bass);
 8003a48:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003a4c:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8003a50:	495f      	ldr	r1, [pc, #380]	; (8003bd0 <main+0x5fc>)
 8003a52:	4618      	mov	r0, r3
 8003a54:	f00f ff3e 	bl	80138d4 <siprintf>
            u8g2_DrawStr(&u8g2, 0, 48, data);
 8003a58:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003a5c:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003a60:	2230      	movs	r2, #48	; 0x30
 8003a62:	2100      	movs	r1, #0
 8003a64:	f001 fe82 	bl	800576c <u8g2_DrawStr>
            int Treble = TRBL_MAX - prescaler(327, 3780, TRBL_MAX, TRBL_MIN, adcVal.trbl);
 8003a68:	4b57      	ldr	r3, [pc, #348]	; (8003bc8 <main+0x5f4>)
 8003a6a:	885b      	ldrh	r3, [r3, #2]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	f06f 030b 	mvn.w	r3, #11
 8003a74:	220c      	movs	r2, #12
 8003a76:	f640 61c4 	movw	r1, #3780	; 0xec4
 8003a7a:	f240 1047 	movw	r0, #327	; 0x147
 8003a7e:	f7ff fcda 	bl	8003436 <_Z9prescalerlllli>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f1c3 030c 	rsb	r3, r3, #12
 8003a88:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
            sprintf(data, "TRBL=%+ddB", Treble);
 8003a8c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003a90:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8003a94:	494f      	ldr	r1, [pc, #316]	; (8003bd4 <main+0x600>)
 8003a96:	4618      	mov	r0, r3
 8003a98:	f00f ff1c 	bl	80138d4 <siprintf>
            u8g2_DrawStr(&u8g2, 128, 48, data);
 8003a9c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003aa0:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003aa4:	2230      	movs	r2, #48	; 0x30
 8003aa6:	2180      	movs	r1, #128	; 0x80
 8003aa8:	f001 fe60 	bl	800576c <u8g2_DrawStr>

//            sprintf(date, "ENC=%d", (int)TIM2->CNT);
//            u8g2_DrawStr(&u8g2, 0, 32, date);

            HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003aac:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4848      	ldr	r0, [pc, #288]	; (8003bd8 <main+0x604>)
 8003ab6:	f008 f8b5 	bl	800bc24 <HAL_RTC_GetTime>
            sprintf(data, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8003aba:	f897 32f4 	ldrb.w	r3, [r7, #756]	; 0x2f4
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f897 32f5 	ldrb.w	r3, [r7, #757]	; 0x2f5
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f897 32f6 	ldrb.w	r3, [r7, #758]	; 0x2f6
 8003aca:	f507 7038 	add.w	r0, r7, #736	; 0x2e0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4942      	ldr	r1, [pc, #264]	; (8003bdc <main+0x608>)
 8003ad4:	f00f fefe 	bl	80138d4 <siprintf>
            u8g2_DrawStr(&u8g2, 150, 64, data);
 8003ad8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003adc:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003ae0:	2240      	movs	r2, #64	; 0x40
 8003ae2:	2196      	movs	r1, #150	; 0x96
 8003ae4:	f001 fe42 	bl	800576c <u8g2_DrawStr>

            int ir=ir_read();
 8003ae8:	f7ff fc44 	bl	8003374 <ir_read>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
            if(ir>=0){
 8003af2:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	db49      	blt.n	8003b8e <main+0x5ba>
                switch ( ir )
 8003afa:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8003afe:	2b1a      	cmp	r3, #26
 8003b00:	d004      	beq.n	8003b0c <main+0x538>
 8003b02:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8003b06:	2b1b      	cmp	r3, #27
 8003b08:	d00e      	beq.n	8003b28 <main+0x554>
 8003b0a:	e01b      	b.n	8003b44 <main+0x570>
                {
                    case IR_CODE_VOL_UP:
                        HAL_GPIO_WritePin(DRV_R_GPIO_Port, DRV_R_Pin, GPIO_PIN_RESET);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2180      	movs	r1, #128	; 0x80
 8003b10:	4833      	ldr	r0, [pc, #204]	; (8003be0 <main+0x60c>)
 8003b12:	f004 f9b2 	bl	8007e7a <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(DRV_L_GPIO_Port, DRV_L_Pin, GPIO_PIN_SET);
 8003b16:	2201      	movs	r2, #1
 8003b18:	2140      	movs	r1, #64	; 0x40
 8003b1a:	4831      	ldr	r0, [pc, #196]	; (8003be0 <main+0x60c>)
 8003b1c:	f004 f9ad 	bl	8007e7a <HAL_GPIO_WritePin>
                        HAL_Delay(100);
 8003b20:	2064      	movs	r0, #100	; 0x64
 8003b22:	f002 fe87 	bl	8006834 <HAL_Delay>
                    break;
 8003b26:	e018      	b.n	8003b5a <main+0x586>
                    case IR_CODE_VOL_DW:
                        HAL_GPIO_WritePin(DRV_R_GPIO_Port, DRV_R_Pin, GPIO_PIN_SET);
 8003b28:	2201      	movs	r2, #1
 8003b2a:	2180      	movs	r1, #128	; 0x80
 8003b2c:	482c      	ldr	r0, [pc, #176]	; (8003be0 <main+0x60c>)
 8003b2e:	f004 f9a4 	bl	8007e7a <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(DRV_L_GPIO_Port, DRV_L_Pin, GPIO_PIN_RESET);
 8003b32:	2200      	movs	r2, #0
 8003b34:	2140      	movs	r1, #64	; 0x40
 8003b36:	482a      	ldr	r0, [pc, #168]	; (8003be0 <main+0x60c>)
 8003b38:	f004 f99f 	bl	8007e7a <HAL_GPIO_WritePin>
                        HAL_Delay(100);
 8003b3c:	2064      	movs	r0, #100	; 0x64
 8003b3e:	f002 fe79 	bl	8006834 <HAL_Delay>
                    break;
 8003b42:	e00a      	b.n	8003b5a <main+0x586>
                    default:
                        HAL_GPIO_WritePin(DRV_R_GPIO_Port, DRV_R_Pin, GPIO_PIN_RESET);
 8003b44:	2200      	movs	r2, #0
 8003b46:	2180      	movs	r1, #128	; 0x80
 8003b48:	4825      	ldr	r0, [pc, #148]	; (8003be0 <main+0x60c>)
 8003b4a:	f004 f996 	bl	8007e7a <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(DRV_L_GPIO_Port, DRV_L_Pin, GPIO_PIN_RESET);
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2140      	movs	r1, #64	; 0x40
 8003b52:	4823      	ldr	r0, [pc, #140]	; (8003be0 <main+0x60c>)
 8003b54:	f004 f991 	bl	8007e7a <HAL_GPIO_WritePin>
                    break;
 8003b58:	bf00      	nop

                }
                HAL_GPIO_WritePin(DRV_R_GPIO_Port, DRV_R_Pin, GPIO_PIN_RESET);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2180      	movs	r1, #128	; 0x80
 8003b5e:	4820      	ldr	r0, [pc, #128]	; (8003be0 <main+0x60c>)
 8003b60:	f004 f98b 	bl	8007e7a <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(DRV_L_GPIO_Port, DRV_L_Pin, GPIO_PIN_RESET);
 8003b64:	2200      	movs	r2, #0
 8003b66:	2140      	movs	r1, #64	; 0x40
 8003b68:	481d      	ldr	r0, [pc, #116]	; (8003be0 <main+0x60c>)
 8003b6a:	f004 f986 	bl	8007e7a <HAL_GPIO_WritePin>
                sprintf(data, "Ir=%x", ir);
 8003b6e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003b72:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 8003b76:	491b      	ldr	r1, [pc, #108]	; (8003be4 <main+0x610>)
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f00f feab 	bl	80138d4 <siprintf>
                u8g2_DrawStr(&u8g2, 100, 32, data);
 8003b7e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003b82:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003b86:	2220      	movs	r2, #32
 8003b88:	2164      	movs	r1, #100	; 0x64
 8003b8a:	f001 fdef 	bl	800576c <u8g2_DrawStr>
            }
            uint16_t freq;
            switch ( InputSrc )
 8003b8e:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	f200 80c0 	bhi.w	8003d18 <main+0x744>
 8003b98:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <main+0x5cc>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003be9 	.word	0x08003be9
 8003ba4:	08003bf9 	.word	0x08003bf9
 8003ba8:	08003c4f 	.word	0x08003c4f
 8003bac:	08003c09 	.word	0x08003c09
 8003bb0:	08003c19 	.word	0x08003c19
 8003bb4:	20000c24 	.word	0x20000c24
 8003bb8:	20000c14 	.word	0x20000c14
 8003bbc:	0801430c 	.word	0x0801430c
 8003bc0:	40010800 	.word	0x40010800
 8003bc4:	20000000 	.word	0x20000000
 8003bc8:	20000c18 	.word	0x20000c18
 8003bcc:	08014004 	.word	0x08014004
 8003bd0:	08014010 	.word	0x08014010
 8003bd4:	0801401c 	.word	0x0801401c
 8003bd8:	20000a88 	.word	0x20000a88
 8003bdc:	08014028 	.word	0x08014028
 8003be0:	40010c00 	.word	0x40010c00
 8003be4:	08014038 	.word	0x08014038
            {
                case INPUT_CD:

                    u8g2_DrawStr(&u8g2, 0, 16, "CD");
 8003be8:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003bec:	4b74      	ldr	r3, [pc, #464]	; (8003dc0 <main+0x7ec>)
 8003bee:	2210      	movs	r2, #16
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	f001 fdbb 	bl	800576c <u8g2_DrawStr>
                break;
 8003bf6:	e092      	b.n	8003d1e <main+0x74a>
                case INPUT_DVD:
                    u8g2_DrawStr(&u8g2, 0, 16, "DVD");
 8003bf8:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003bfc:	4b71      	ldr	r3, [pc, #452]	; (8003dc4 <main+0x7f0>)
 8003bfe:	2210      	movs	r2, #16
 8003c00:	2100      	movs	r1, #0
 8003c02:	f001 fdb3 	bl	800576c <u8g2_DrawStr>
                break;
 8003c06:	e08a      	b.n	8003d1e <main+0x74a>
                case INPUT_TV:
                    u8g2_DrawStr(&u8g2, 0, 16, "TV");
 8003c08:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003c0c:	4b6e      	ldr	r3, [pc, #440]	; (8003dc8 <main+0x7f4>)
 8003c0e:	2210      	movs	r2, #16
 8003c10:	2100      	movs	r1, #0
 8003c12:	f001 fdab 	bl	800576c <u8g2_DrawStr>
                break;
 8003c16:	e082      	b.n	8003d1e <main+0x74a>
                case INPUT_BT:
                    u8g2_SetFont(&u8g2, u8g2_font_open_iconic_embedded_2x_t);
 8003c18:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003c1c:	496b      	ldr	r1, [pc, #428]	; (8003dcc <main+0x7f8>)
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 fe42 	bl	80058a8 <u8g2_SetFont>
                    u8g2_DrawGlyph(&u8g2, 0, 16, 'J');
 8003c24:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003c28:	234a      	movs	r3, #74	; 0x4a
 8003c2a:	2210      	movs	r2, #16
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	f001 fcef 	bl	8005610 <u8g2_DrawGlyph>
                    u8g2_SetFont(&u8g2, u8g2_font_VCR_OSD_tf);
 8003c32:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003c36:	4966      	ldr	r1, [pc, #408]	; (8003dd0 <main+0x7fc>)
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 fe35 	bl	80058a8 <u8g2_SetFont>
                    u8g2_DrawStr(&u8g2, 16, 16, "T PLAY");
 8003c3e:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003c42:	4b64      	ldr	r3, [pc, #400]	; (8003dd4 <main+0x800>)
 8003c44:	2210      	movs	r2, #16
 8003c46:	2110      	movs	r1, #16
 8003c48:	f001 fd90 	bl	800576c <u8g2_DrawStr>
                break;
 8003c4c:	e067      	b.n	8003d1e <main+0x74a>
                case INPUT_FM:
//			        u8g2_SetFont(&u8g2, u8g2_font_tenthinnerguys_tf);
                    if(!fm_avability){
 8003c4e:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 8003c52:	f083 0301 	eor.w	r3, r3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <main+0x698>
                        u8g2_DrawStr(&u8g2, 0, 16, "FM err");
 8003c5c:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003c60:	4b5d      	ldr	r3, [pc, #372]	; (8003dd8 <main+0x804>)
 8003c62:	2210      	movs	r2, #16
 8003c64:	2100      	movs	r1, #0
 8003c66:	f001 fd81 	bl	800576c <u8g2_DrawStr>
                        break;
 8003c6a:	e058      	b.n	8003d1e <main+0x74a>
                    }

                    u8g2_DrawStr(&u8g2, 0, 16, "FM");
 8003c6c:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003c70:	4b5a      	ldr	r3, [pc, #360]	; (8003ddc <main+0x808>)
 8003c72:	2210      	movs	r2, #16
 8003c74:	2100      	movs	r1, #0
 8003c76:	f001 fd79 	bl	800576c <u8g2_DrawStr>
                    radio.setFrequency(programFm[currProgFm%32]);
 8003c7a:	4b59      	ldr	r3, [pc, #356]	; (8003de0 <main+0x80c>)
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8003c88:	443b      	add	r3, r7
 8003c8a:	f833 2ca0 	ldrh.w	r2, [r3, #-160]
 8003c8e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fa4f 	bl	8003138 <_ZN7RDA580712setFrequencyEt>
                    freq=radio.getFrequency();
 8003c9a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fa8c 	bl	80031bc <_ZN7RDA580712getFrequencyEv>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
                    sprintf(data, "Pr%02d: %3u.%02uMHz", currProgFm%32, freq/100, freq%100);
 8003caa:	4b4d      	ldr	r3, [pc, #308]	; (8003de0 <main+0x80c>)
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	f003 011f 	and.w	r1, r3, #31
 8003cb2:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 8003cb6:	4a4b      	ldr	r2, [pc, #300]	; (8003de4 <main+0x810>)
 8003cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	461c      	mov	r4, r3
 8003cc2:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 8003cc6:	4a47      	ldr	r2, [pc, #284]	; (8003de4 <main+0x810>)
 8003cc8:	fba2 0203 	umull	r0, r2, r2, r3
 8003ccc:	0952      	lsrs	r2, r2, #5
 8003cce:	2064      	movs	r0, #100	; 0x64
 8003cd0:	fb00 f202 	mul.w	r2, r0, r2
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f507 7038 	add.w	r0, r7, #736	; 0x2e0
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	4623      	mov	r3, r4
 8003ce0:	460a      	mov	r2, r1
 8003ce2:	4941      	ldr	r1, [pc, #260]	; (8003de8 <main+0x814>)
 8003ce4:	f00f fdf6 	bl	80138d4 <siprintf>
                    u8g2_DrawStr(&u8g2, 30, 16, data);
 8003ce8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003cec:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	211e      	movs	r1, #30
 8003cf4:	f001 fd3a 	bl	800576c <u8g2_DrawStr>
                    if(radio.isStereo())
 8003cf8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fa69 	bl	80031d4 <_ZN7RDA58078isStereoEv>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d009      	beq.n	8003d1c <main+0x748>
                        u8g2_DrawStr(&u8g2, 240, 16, "S");
 8003d08:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8003d0c:	4b37      	ldr	r3, [pc, #220]	; (8003dec <main+0x818>)
 8003d0e:	2210      	movs	r2, #16
 8003d10:	21f0      	movs	r1, #240	; 0xf0
 8003d12:	f001 fd2b 	bl	800576c <u8g2_DrawStr>
//                        u8g2_DrawStr(&u8g2, 24, 16, radio.getRdsText());
//                        u8g2_DrawStr(&u8g2, 32, 16, radio.getRdsTime());
//                        u8g2_DrawStr(&u8g2, 38, 16, radio.getRdsText2B());
//
//                    }
                break;
 8003d16:	e001      	b.n	8003d1c <main+0x748>
                default:
                break;
 8003d18:	bf00      	nop
 8003d1a:	e000      	b.n	8003d1e <main+0x74a>
                break;
 8003d1c:	bf00      	nop
            }
        }while ( u8g2_NextPage(&u8g2) );
 8003d1e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 ffc3 	bl	8004cae <u8g2_NextPage>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bf14      	ite	ne
 8003d2e:	2301      	movne	r3, #1
 8003d30:	2300      	moveq	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d000      	beq.n	8003d3a <main+0x766>
        do{
 8003d38:	e5d7      	b.n	80038ea <main+0x316>
        btnLow.loop();
 8003d3a:	1d3b      	adds	r3, r7, #4
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fd fe30 	bl	80019a2 <_ZN12CFPushButton4loopEv>
//        HAL_GPIO_WritePin(DRV_L_GPIO_Port, DRV_L_Pin, (GPIO_PinState)!HAL_GPIO_ReadPin(SW_LOW_GPIO_Port, SW_LOW_Pin));
//        HAL_GPIO_WritePin(DRV_R_GPIO_Port, DRV_R_Pin, (GPIO_PinState)!HAL_GPIO_ReadPin(SW_HIGH_GPIO_Port, SW_HIGH_Pin));
		if ( GPIO_PIN_RESET == HAL_GPIO_ReadPin(SW_HIGH_GPIO_Port, SW_HIGH_Pin))
 8003d42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d46:	482a      	ldr	r0, [pc, #168]	; (8003df0 <main+0x81c>)
 8003d48:	f004 f880 	bl	8007e4c <HAL_GPIO_ReadPin>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bf0c      	ite	eq
 8003d52:	2301      	moveq	r3, #1
 8003d54:	2300      	movne	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <main+0x78c>
		    swHighPressed();
 8003d5c:	f7ff fbd6 	bl	800350c <_Z13swHighPressedv>
        if ( GPIO_PIN_RESET == HAL_GPIO_ReadPin(SW_LOW_GPIO_Port, SW_LOW_Pin))
 8003d60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d64:	4822      	ldr	r0, [pc, #136]	; (8003df0 <main+0x81c>)
 8003d66:	f004 f871 	bl	8007e4c <HAL_GPIO_ReadPin>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <main+0x7aa>
            swLowPressed();
 8003d7a:	f7ff fbdd 	bl	8003538 <_Z12swLowPressedv>
        btnHigh.loop();
 8003d7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fd fe0d 	bl	80019a2 <_ZN12CFPushButton4loopEv>
        HAL_Delay(1);
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f002 fd53 	bl	8006834 <HAL_Delay>
    }
 8003d8e:	e5a7      	b.n	80038e0 <main+0x30c>
    btnHigh.setOnShortPressReachedCallback(swHighPressed);
 8003d90:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fd fda2 	bl	80018de <_ZNSt8functionIFvvEED1Ev>
 8003d9a:	e005      	b.n	8003da8 <main+0x7d4>
    btnLow.setOnShortPressReachedCallback(swLowPressed);
 8003d9c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fd fd9c 	bl	80018de <_ZNSt8functionIFvvEED1Ev>
 8003da6:	e7ff      	b.n	8003da8 <main+0x7d4>
    CFPushButton btnLow(SW_LOW_GPIO_Port, SW_LOW_Pin, 10, 4000);
 8003da8:	1d3b      	adds	r3, r7, #4
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fbf0 	bl	8003590 <_ZN12CFPushButtonD1Ev>
 8003db0:	e7ff      	b.n	8003db2 <main+0x7de>
    CFPushButton btnHigh(SW_HIGH_GPIO_Port, SW_HIGH_Pin, 10, 4000);  //Arduino way of defining pins
 8003db2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fbea 	bl	8003590 <_ZN12CFPushButtonD1Ev>
 8003dbc:	f00e fdc6 	bl	801294c <__cxa_end_cleanup>
 8003dc0:	08014040 	.word	0x08014040
 8003dc4:	08014044 	.word	0x08014044
 8003dc8:	08014048 	.word	0x08014048
 8003dcc:	08014150 	.word	0x08014150
 8003dd0:	0801430c 	.word	0x0801430c
 8003dd4:	0801404c 	.word	0x0801404c
 8003dd8:	08014054 	.word	0x08014054
 8003ddc:	0801405c 	.word	0x0801405c
 8003de0:	20000c14 	.word	0x20000c14
 8003de4:	51eb851f 	.word	0x51eb851f
 8003de8:	08014060 	.word	0x08014060
 8003dec:	08014074 	.word	0x08014074
 8003df0:	40010c00 	.word	0x40010c00

08003df4 <_ZNSt8functionIFvvEEC1IPS0_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fd31 	bl	8001868 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 f823 	bl	8003e54 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00f      	beq.n	8003e34 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8003e14:	687c      	ldr	r4, [r7, #4]
 8003e16:	463b      	mov	r3, r7
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 f82a 	bl	8003e72 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4619      	mov	r1, r3
 8003e22:	4620      	mov	r0, r4
 8003e24:	f000 f82f 	bl	8003e86 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x58>)
 8003e2c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x5c>)
 8003e32:	609a      	str	r2, [r3, #8]
      }
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	e005      	b.n	8003e44 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x50>
      : _Function_base()
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fd fd21 	bl	8001882 <_ZNSt14_Function_baseD1Ev>
 8003e40:	f00e fd84 	bl	801294c <__cxa_end_cleanup>
      }
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd90      	pop	{r4, r7, pc}
 8003e4c:	08003eab 	.word	0x08003eab
 8003e50:	08003ec9 	.word	0x08003ec9

08003e54 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bf14      	ite	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	2300      	moveq	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8003e86:	b590      	push	{r4, r7, lr}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8003e90:	6838      	ldr	r0, [r7, #0]
 8003e92:	f7ff ffee 	bl	8003e72 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 8003e96:	4603      	mov	r3, r0
 8003e98:	4622      	mov	r2, r4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f832 	bl	8003f06 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd90      	pop	{r4, r7, pc}

08003eaa <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f840 	bl	8003f38 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f84d 	bl	8003f5a <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES6_E4typeEOS9_DpOSA_>
				     std::forward<_ArgTypes>(__args)...);
 8003ec0:	bf00      	nop
      }
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d109      	bne.n	8003ef0 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f84c 	bl	8003f7a <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	68b8      	ldr	r0, [r7, #8]
 8003ee6:	f000 f827 	bl	8003f38 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8003eea:	4603      	mov	r3, r0
 8003eec:	6023      	str	r3, [r4, #0]
	    break;
 8003eee:	e005      	b.n	8003efc <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f84b 	bl	8003f92 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8003efc:	2300      	movs	r3, #0
      }
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd90      	pop	{r4, r7, pc}

08003f06 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8003f06:	b590      	push	{r4, r7, lr}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8003f12:	68b8      	ldr	r0, [r7, #8]
 8003f14:	f7ff ffad 	bl	8003e72 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	681c      	ldr	r4, [r3, #0]
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff fa50 	bl	80033c2 <_ZNSt9_Any_data9_M_accessEv>
 8003f22:	4603      	mov	r3, r0
 8003f24:	4619      	mov	r1, r3
 8003f26:	2004      	movs	r0, #4
 8003f28:	f7ff fa40 	bl	80033ac <_ZnwjPv>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	601c      	str	r4, [r3, #0]
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd90      	pop	{r4, r7, pc}

08003f38 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f851 	bl	8003fe8 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8003f46:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f859 	bl	8004000 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	bf00      	nop
	}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <_ZSt10__invoke_rIvRPFvvEJEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES6_E4typeEOS9_DpOSA_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8003f5a:	b590      	push	{r4, r7, lr}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f856 	bl	8004014 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f000 f85b 	bl	8004028 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd90      	pop	{r4, r7, pc}

08003f7a <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff fa1d 	bl	80033c2 <_ZNSt9_Any_data9_M_accessEv>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8003f92:	b5b0      	push	{r4, r5, r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d016      	beq.n	8003fd4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	dc19      	bgt.n	8003fde <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d002      	beq.n	8003fb4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d00a      	beq.n	8003fc8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 8003fb2:	e014      	b.n	8003fde <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff ffe0 	bl	8003f7a <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8003fba:	4604      	mov	r4, r0
 8003fbc:	68b8      	ldr	r0, [r7, #8]
 8003fbe:	f7ff ffbb 	bl	8003f38 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	6023      	str	r3, [r4, #0]
	      break;
 8003fc6:	e00a      	b.n	8003fde <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8003fc8:	462a      	mov	r2, r5
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f83a 	bl	8004046 <_ZNSt14_Function_base13_Base_managerIPFvvEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8003fd2:	e004      	b.n	8003fde <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f84e 	bl	8004078 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8003fdc:	bf00      	nop
	  return false;
 8003fde:	2300      	movs	r3, #0
	}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bdb0      	pop	{r4, r5, r7, pc}

08003fe8 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff f9f0 	bl	80033d6 <_ZNKSt9_Any_data9_M_accessEv>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <_ZSt13__invoke_implIvRPFvvEJEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	7138      	strb	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8004032:	6838      	ldr	r0, [r7, #0]
 8004034:	f7ff ffee 	bl	8004014 <_ZSt7forwardIRPFvvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004038:	4603      	mov	r3, r0
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4798      	blx	r3
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <_ZNSt14_Function_base13_Base_managerIPFvvEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8004046:	b590      	push	{r4, r7, lr}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8004052:	68b8      	ldr	r0, [r7, #8]
 8004054:	f7ff ffc8 	bl	8003fe8 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8004058:	4603      	mov	r3, r0
 800405a:	681c      	ldr	r4, [r3, #0]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7ff f9b0 	bl	80033c2 <_ZNSt9_Any_data9_M_accessEv>
 8004062:	4603      	mov	r3, r0
 8004064:	4619      	mov	r1, r3
 8004066:	2004      	movs	r0, #4
 8004068:	f7ff f9a0 	bl	80033ac <_ZnwjPv>
 800406c:	4603      	mov	r3, r0
 800406e:	601c      	str	r4, [r3, #0]
	}
 8004070:	bf00      	nop
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	bd90      	pop	{r4, r7, pc}

08004078 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f804 	bl	8004090 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 8004088:	bf00      	nop
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff f992 	bl	80033c2 <_ZNSt9_Any_data9_M_accessEv>
 800409e:	4603      	mov	r3, r0
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d108      	bne.n	80040ca <_Z41__static_initialization_and_destruction_0ii+0x22>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040be:	4293      	cmp	r3, r2
 80040c0:	d103      	bne.n	80040ca <_Z41__static_initialization_and_destruction_0ii+0x22>
Eeprom eeprom(35);
 80040c2:	2123      	movs	r1, #35	; 0x23
 80040c4:	4803      	ldr	r0, [pc, #12]	; (80040d4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80040c6:	f7fd ff87 	bl	8001fd8 <_ZN6EepromC1Eh>
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000c24 	.word	0x20000c24

080040d8 <_GLOBAL__sub_I_currProgFm>:
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
 80040dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040e0:	2001      	movs	r0, #1
 80040e2:	f7ff ffe1 	bl	80040a8 <_Z41__static_initialization_and_destruction_0ii>
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80040ee:	4b15      	ldr	r3, [pc, #84]	; (8004144 <HAL_MspInit+0x5c>)
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	4a14      	ldr	r2, [pc, #80]	; (8004144 <HAL_MspInit+0x5c>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	6193      	str	r3, [r2, #24]
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_MspInit+0x5c>)
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004106:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <HAL_MspInit+0x5c>)
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <HAL_MspInit+0x5c>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004110:	61d3      	str	r3, [r2, #28]
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <HAL_MspInit+0x5c>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800411e:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <HAL_MspInit+0x60>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <HAL_MspInit+0x60>)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	40021000 	.word	0x40021000
 8004148:	40010000 	.word	0x40010000

0800414c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004154:	f107 0318 	add.w	r3, r7, #24
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	605a      	str	r2, [r3, #4]
 800415e:	609a      	str	r2, [r3, #8]
 8004160:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a33      	ldr	r2, [pc, #204]	; (8004234 <HAL_ADC_MspInit+0xe8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d15f      	bne.n	800422c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800416c:	4b32      	ldr	r3, [pc, #200]	; (8004238 <HAL_ADC_MspInit+0xec>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	4a31      	ldr	r2, [pc, #196]	; (8004238 <HAL_ADC_MspInit+0xec>)
 8004172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004176:	6193      	str	r3, [r2, #24]
 8004178:	4b2f      	ldr	r3, [pc, #188]	; (8004238 <HAL_ADC_MspInit+0xec>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004184:	4b2c      	ldr	r3, [pc, #176]	; (8004238 <HAL_ADC_MspInit+0xec>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	4a2b      	ldr	r2, [pc, #172]	; (8004238 <HAL_ADC_MspInit+0xec>)
 800418a:	f043 0304 	orr.w	r3, r3, #4
 800418e:	6193      	str	r3, [r2, #24]
 8004190:	4b29      	ldr	r3, [pc, #164]	; (8004238 <HAL_ADC_MspInit+0xec>)
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800419c:	4b26      	ldr	r3, [pc, #152]	; (8004238 <HAL_ADC_MspInit+0xec>)
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	4a25      	ldr	r2, [pc, #148]	; (8004238 <HAL_ADC_MspInit+0xec>)
 80041a2:	f043 0308 	orr.w	r3, r3, #8
 80041a6:	6193      	str	r3, [r2, #24]
 80041a8:	4b23      	ldr	r3, [pc, #140]	; (8004238 <HAL_ADC_MspInit+0xec>)
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BASS_Pin|TRBL_Pin|BLNC_Pin|VOL_Pin;
 80041b4:	2378      	movs	r3, #120	; 0x78
 80041b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041b8:	2303      	movs	r3, #3
 80041ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041bc:	f107 0318 	add.w	r3, r7, #24
 80041c0:	4619      	mov	r1, r3
 80041c2:	481e      	ldr	r0, [pc, #120]	; (800423c <HAL_ADC_MspInit+0xf0>)
 80041c4:	f003 fcbe 	bl	8007b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LM_IN_Pin;
 80041c8:	2302      	movs	r3, #2
 80041ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041cc:	2303      	movs	r3, #3
 80041ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LM_IN_GPIO_Port, &GPIO_InitStruct);
 80041d0:	f107 0318 	add.w	r3, r7, #24
 80041d4:	4619      	mov	r1, r3
 80041d6:	481a      	ldr	r0, [pc, #104]	; (8004240 <HAL_ADC_MspInit+0xf4>)
 80041d8:	f003 fcb4 	bl	8007b44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <HAL_ADC_MspInit+0xf8>)
 80041de:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <HAL_ADC_MspInit+0xfc>)
 80041e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_ADC_MspInit+0xf8>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <HAL_ADC_MspInit+0xf8>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80041ee:	4b15      	ldr	r3, [pc, #84]	; (8004244 <HAL_ADC_MspInit+0xf8>)
 80041f0:	2280      	movs	r2, #128	; 0x80
 80041f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041f4:	4b13      	ldr	r3, [pc, #76]	; (8004244 <HAL_ADC_MspInit+0xf8>)
 80041f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041fc:	4b11      	ldr	r3, [pc, #68]	; (8004244 <HAL_ADC_MspInit+0xf8>)
 80041fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004202:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <HAL_ADC_MspInit+0xf8>)
 8004206:	2220      	movs	r2, #32
 8004208:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_ADC_MspInit+0xf8>)
 800420c:	2200      	movs	r2, #0
 800420e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004210:	480c      	ldr	r0, [pc, #48]	; (8004244 <HAL_ADC_MspInit+0xf8>)
 8004212:	f003 f8b9 	bl	8007388 <HAL_DMA_Init>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 800421c:	f7fe fd16 	bl	8002c4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a08      	ldr	r2, [pc, #32]	; (8004244 <HAL_ADC_MspInit+0xf8>)
 8004224:	621a      	str	r2, [r3, #32]
 8004226:	4a07      	ldr	r2, [pc, #28]	; (8004244 <HAL_ADC_MspInit+0xf8>)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800422c:	bf00      	nop
 800422e:	3728      	adds	r7, #40	; 0x28
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40012400 	.word	0x40012400
 8004238:	40021000 	.word	0x40021000
 800423c:	40010800 	.word	0x40010800
 8004240:	40010c00 	.word	0x40010c00
 8004244:	20000bc8 	.word	0x20000bc8
 8004248:	40020008 	.word	0x40020008

0800424c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004254:	f107 0310 	add.w	r3, r7, #16
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a16      	ldr	r2, [pc, #88]	; (80042c0 <HAL_I2C_MspInit+0x74>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d124      	bne.n	80042b6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800426c:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <HAL_I2C_MspInit+0x78>)
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <HAL_I2C_MspInit+0x78>)
 8004272:	f043 0308 	orr.w	r3, r3, #8
 8004276:	6193      	str	r3, [r2, #24]
 8004278:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <HAL_I2C_MspInit+0x78>)
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004284:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004288:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800428a:	2312      	movs	r3, #18
 800428c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800428e:	2303      	movs	r3, #3
 8004290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004292:	f107 0310 	add.w	r3, r7, #16
 8004296:	4619      	mov	r1, r3
 8004298:	480b      	ldr	r0, [pc, #44]	; (80042c8 <HAL_I2C_MspInit+0x7c>)
 800429a:	f003 fc53 	bl	8007b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_I2C_MspInit+0x78>)
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <HAL_I2C_MspInit+0x78>)
 80042a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042a8:	61d3      	str	r3, [r2, #28]
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_I2C_MspInit+0x78>)
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80042b6:	bf00      	nop
 80042b8:	3720      	adds	r7, #32
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40005800 	.word	0x40005800
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40010c00 	.word	0x40010c00

080042cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a0b      	ldr	r2, [pc, #44]	; (8004308 <HAL_RTC_MspInit+0x3c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d110      	bne.n	8004300 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80042de:	f006 fdd7 	bl	800ae90 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <HAL_RTC_MspInit+0x40>)
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	4a09      	ldr	r2, [pc, #36]	; (800430c <HAL_RTC_MspInit+0x40>)
 80042e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042ec:	61d3      	str	r3, [r2, #28]
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <HAL_RTC_MspInit+0x40>)
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RTC_MspInit+0x44>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40002800 	.word	0x40002800
 800430c:	40021000 	.word	0x40021000
 8004310:	4242043c 	.word	0x4242043c

08004314 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431c:	f107 0310 	add.w	r3, r7, #16
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	605a      	str	r2, [r3, #4]
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a16      	ldr	r2, [pc, #88]	; (8004388 <HAL_SPI_MspInit+0x74>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d124      	bne.n	800437e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004334:	4b15      	ldr	r3, [pc, #84]	; (800438c <HAL_SPI_MspInit+0x78>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	4a14      	ldr	r2, [pc, #80]	; (800438c <HAL_SPI_MspInit+0x78>)
 800433a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800433e:	61d3      	str	r3, [r2, #28]
 8004340:	4b12      	ldr	r3, [pc, #72]	; (800438c <HAL_SPI_MspInit+0x78>)
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <HAL_SPI_MspInit+0x78>)
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	4a0e      	ldr	r2, [pc, #56]	; (800438c <HAL_SPI_MspInit+0x78>)
 8004352:	f043 0308 	orr.w	r3, r3, #8
 8004356:	6193      	str	r3, [r2, #24]
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <HAL_SPI_MspInit+0x78>)
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004364:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004368:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436a:	2302      	movs	r3, #2
 800436c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800436e:	2303      	movs	r3, #3
 8004370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004372:	f107 0310 	add.w	r3, r7, #16
 8004376:	4619      	mov	r1, r3
 8004378:	4805      	ldr	r0, [pc, #20]	; (8004390 <HAL_SPI_MspInit+0x7c>)
 800437a:	f003 fbe3 	bl	8007b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800437e:	bf00      	nop
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40003800 	.word	0x40003800
 800438c:	40021000 	.word	0x40021000
 8004390:	40010c00 	.word	0x40010c00

08004394 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800439c:	f107 0310 	add.w	r3, r7, #16
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b2:	d123      	bne.n	80043fc <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043b4:	4b13      	ldr	r3, [pc, #76]	; (8004404 <HAL_TIM_Encoder_MspInit+0x70>)
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	4a12      	ldr	r2, [pc, #72]	; (8004404 <HAL_TIM_Encoder_MspInit+0x70>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	61d3      	str	r3, [r2, #28]
 80043c0:	4b10      	ldr	r3, [pc, #64]	; (8004404 <HAL_TIM_Encoder_MspInit+0x70>)
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043cc:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <HAL_TIM_Encoder_MspInit+0x70>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	4a0c      	ldr	r2, [pc, #48]	; (8004404 <HAL_TIM_Encoder_MspInit+0x70>)
 80043d2:	f043 0304 	orr.w	r3, r3, #4
 80043d6:	6193      	str	r3, [r2, #24]
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <HAL_TIM_Encoder_MspInit+0x70>)
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_L_Pin|ENC_R_Pin;
 80043e4:	2303      	movs	r3, #3
 80043e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f0:	f107 0310 	add.w	r3, r7, #16
 80043f4:	4619      	mov	r1, r3
 80043f6:	4804      	ldr	r0, [pc, #16]	; (8004408 <HAL_TIM_Encoder_MspInit+0x74>)
 80043f8:	f003 fba4 	bl	8007b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80043fc:	bf00      	nop
 80043fe:	3720      	adds	r7, #32
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40021000 	.word	0x40021000
 8004408:	40010800 	.word	0x40010800

0800440c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004414:	f107 0310 	add.w	r3, r7, #16
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM3)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a19      	ldr	r2, [pc, #100]	; (800448c <HAL_TIM_Base_MspInit+0x80>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d12b      	bne.n	8004484 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800442c:	4b18      	ldr	r3, [pc, #96]	; (8004490 <HAL_TIM_Base_MspInit+0x84>)
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	4a17      	ldr	r2, [pc, #92]	; (8004490 <HAL_TIM_Base_MspInit+0x84>)
 8004432:	f043 0302 	orr.w	r3, r3, #2
 8004436:	61d3      	str	r3, [r2, #28]
 8004438:	4b15      	ldr	r3, [pc, #84]	; (8004490 <HAL_TIM_Base_MspInit+0x84>)
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004444:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_TIM_Base_MspInit+0x84>)
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	4a11      	ldr	r2, [pc, #68]	; (8004490 <HAL_TIM_Base_MspInit+0x84>)
 800444a:	f043 0304 	orr.w	r3, r3, #4
 800444e:	6193      	str	r3, [r2, #24]
 8004450:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <HAL_TIM_Base_MspInit+0x84>)
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004468:	f107 0310 	add.w	r3, r7, #16
 800446c:	4619      	mov	r1, r3
 800446e:	4809      	ldr	r0, [pc, #36]	; (8004494 <HAL_TIM_Base_MspInit+0x88>)
 8004470:	f003 fb68 	bl	8007b44 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004474:	2200      	movs	r2, #0
 8004476:	2100      	movs	r1, #0
 8004478:	201d      	movs	r0, #29
 800447a:	f002 ff4e 	bl	800731a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800447e:	201d      	movs	r0, #29
 8004480:	f002 ff67 	bl	8007352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004484:	bf00      	nop
 8004486:	3720      	adds	r7, #32
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40000400 	.word	0x40000400
 8004490:	40021000 	.word	0x40021000
 8004494:	40010800 	.word	0x40010800

08004498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a0:	f107 0310 	add.w	r3, r7, #16
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <HAL_UART_MspInit+0x8c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d131      	bne.n	800451c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044b8:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <HAL_UART_MspInit+0x90>)
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	4a1a      	ldr	r2, [pc, #104]	; (8004528 <HAL_UART_MspInit+0x90>)
 80044be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044c2:	6193      	str	r3, [r2, #24]
 80044c4:	4b18      	ldr	r3, [pc, #96]	; (8004528 <HAL_UART_MspInit+0x90>)
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d0:	4b15      	ldr	r3, [pc, #84]	; (8004528 <HAL_UART_MspInit+0x90>)
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	4a14      	ldr	r2, [pc, #80]	; (8004528 <HAL_UART_MspInit+0x90>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	6193      	str	r3, [r2, #24]
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <HAL_UART_MspInit+0x90>)
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80044e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ee:	2302      	movs	r3, #2
 80044f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044f2:	2303      	movs	r3, #3
 80044f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f6:	f107 0310 	add.w	r3, r7, #16
 80044fa:	4619      	mov	r1, r3
 80044fc:	480b      	ldr	r0, [pc, #44]	; (800452c <HAL_UART_MspInit+0x94>)
 80044fe:	f003 fb21 	bl	8007b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004510:	f107 0310 	add.w	r3, r7, #16
 8004514:	4619      	mov	r1, r3
 8004516:	4805      	ldr	r0, [pc, #20]	; (800452c <HAL_UART_MspInit+0x94>)
 8004518:	f003 fb14 	bl	8007b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800451c:	bf00      	nop
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40013800 	.word	0x40013800
 8004528:	40021000 	.word	0x40021000
 800452c:	40010800 	.word	0x40010800

08004530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004534:	e7fe      	b.n	8004534 <NMI_Handler+0x4>

08004536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004536:	b480      	push	{r7}
 8004538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800453a:	e7fe      	b.n	800453a <HardFault_Handler+0x4>

0800453c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004540:	e7fe      	b.n	8004540 <MemManage_Handler+0x4>

08004542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004542:	b480      	push	{r7}
 8004544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004546:	e7fe      	b.n	8004546 <BusFault_Handler+0x4>

08004548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800454c:	e7fe      	b.n	800454c <UsageFault_Handler+0x4>

0800454e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800454e:	b480      	push	{r7}
 8004550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004552:	bf00      	nop
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800455a:	b480      	push	{r7}
 800455c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800455e:	bf00      	nop
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr

08004566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004566:	b480      	push	{r7}
 8004568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800456a:	bf00      	nop
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr

08004572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004576:	f002 f941 	bl	80067fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004584:	4802      	ldr	r0, [pc, #8]	; (8004590 <DMA1_Channel1_IRQHandler+0x10>)
 8004586:	f002 ffb9 	bl	80074fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000bc8 	.word	0x20000bc8

08004594 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004598:	4802      	ldr	r0, [pc, #8]	; (80045a4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800459a:	f005 f8e6 	bl	800976a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20002158 	.word	0x20002158

080045a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045ac:	4802      	ldr	r0, [pc, #8]	; (80045b8 <TIM3_IRQHandler+0x10>)
 80045ae:	f008 fcf7 	bl	800cfa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000b3c 	.word	0x20000b3c

080045bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
	return 1;
 80045c0:	2301      	movs	r3, #1
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr

080045ca <_kill>:

int _kill(int pid, int sig)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80045d4:	f00e ffd6 	bl	8013584 <__errno>
 80045d8:	4603      	mov	r3, r0
 80045da:	2216      	movs	r2, #22
 80045dc:	601a      	str	r2, [r3, #0]
	return -1;
 80045de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <_exit>:

void _exit (int status)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80045f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff ffe7 	bl	80045ca <_kill>
	while (1) {}		/* Make sure we hang here */
 80045fc:	e7fe      	b.n	80045fc <_exit+0x12>
	...

08004600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004608:	4a14      	ldr	r2, [pc, #80]	; (800465c <_sbrk+0x5c>)
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <_sbrk+0x60>)
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004614:	4b13      	ldr	r3, [pc, #76]	; (8004664 <_sbrk+0x64>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800461c:	4b11      	ldr	r3, [pc, #68]	; (8004664 <_sbrk+0x64>)
 800461e:	4a12      	ldr	r2, [pc, #72]	; (8004668 <_sbrk+0x68>)
 8004620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <_sbrk+0x64>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4413      	add	r3, r2
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	429a      	cmp	r2, r3
 800462e:	d207      	bcs.n	8004640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004630:	f00e ffa8 	bl	8013584 <__errno>
 8004634:	4603      	mov	r3, r0
 8004636:	220c      	movs	r2, #12
 8004638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800463a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800463e:	e009      	b.n	8004654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004640:	4b08      	ldr	r3, [pc, #32]	; (8004664 <_sbrk+0x64>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004646:	4b07      	ldr	r3, [pc, #28]	; (8004664 <_sbrk+0x64>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4413      	add	r3, r2
 800464e:	4a05      	ldr	r2, [pc, #20]	; (8004664 <_sbrk+0x64>)
 8004650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004652:	68fb      	ldr	r3, [r7, #12]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20005000 	.word	0x20005000
 8004660:	00000400 	.word	0x00000400
 8004664:	20000c48 	.word	0x20000c48
 8004668:	200026a8 	.word	0x200026a8

0800466c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <u8x8_stm32_gpio_and_delay>:




uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	460b      	mov	r3, r1
 8004684:	72fb      	strb	r3, [r7, #11]
 8004686:	4613      	mov	r3, r2
 8004688:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 800468a:	7afb      	ldrb	r3, [r7, #11]
 800468c:	3b28      	subs	r3, #40	; 0x28
 800468e:	2b23      	cmp	r3, #35	; 0x23
 8004690:	d85f      	bhi.n	8004752 <u8x8_stm32_gpio_and_delay+0xda>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <u8x8_stm32_gpio_and_delay+0x20>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	08004753 	.word	0x08004753
 800469c:	08004729 	.word	0x08004729
 80046a0:	08004753 	.word	0x08004753
 80046a4:	08004753 	.word	0x08004753
 80046a8:	08004753 	.word	0x08004753
 80046ac:	08004753 	.word	0x08004753
 80046b0:	08004753 	.word	0x08004753
 80046b4:	08004753 	.word	0x08004753
 80046b8:	08004753 	.word	0x08004753
 80046bc:	08004753 	.word	0x08004753
 80046c0:	08004753 	.word	0x08004753
 80046c4:	08004753 	.word	0x08004753
 80046c8:	08004753 	.word	0x08004753
 80046cc:	08004753 	.word	0x08004753
 80046d0:	08004753 	.word	0x08004753
 80046d4:	08004753 	.word	0x08004753
 80046d8:	08004753 	.word	0x08004753
 80046dc:	08004753 	.word	0x08004753
 80046e0:	08004753 	.word	0x08004753
 80046e4:	08004753 	.word	0x08004753
 80046e8:	08004753 	.word	0x08004753
 80046ec:	08004753 	.word	0x08004753
 80046f0:	08004753 	.word	0x08004753
 80046f4:	08004753 	.word	0x08004753
 80046f8:	08004753 	.word	0x08004753
 80046fc:	08004753 	.word	0x08004753
 8004700:	08004753 	.word	0x08004753
 8004704:	08004753 	.word	0x08004753
 8004708:	08004753 	.word	0x08004753
 800470c:	08004753 	.word	0x08004753
 8004710:	08004753 	.word	0x08004753
 8004714:	08004753 	.word	0x08004753
 8004718:	08004753 	.word	0x08004753
 800471c:	08004733 	.word	0x08004733
 8004720:	08004743 	.word	0x08004743
 8004724:	08004753 	.word	0x08004753
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8004728:	7abb      	ldrb	r3, [r7, #10]
 800472a:	4618      	mov	r0, r3
 800472c:	f002 f882 	bl	8006834 <HAL_Delay>
		break;
 8004730:	e00f      	b.n	8004752 <u8x8_stm32_gpio_and_delay+0xda>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8004732:	7abb      	ldrb	r3, [r7, #10]
 8004734:	461a      	mov	r2, r3
 8004736:	f44f 7180 	mov.w	r1, #256	; 0x100
 800473a:	4808      	ldr	r0, [pc, #32]	; (800475c <u8x8_stm32_gpio_and_delay+0xe4>)
 800473c:	f003 fb9d 	bl	8007e7a <HAL_GPIO_WritePin>
		break;
 8004740:	e007      	b.n	8004752 <u8x8_stm32_gpio_and_delay+0xda>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8004742:	7abb      	ldrb	r3, [r7, #10]
 8004744:	461a      	mov	r2, r3
 8004746:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800474a:	4805      	ldr	r0, [pc, #20]	; (8004760 <u8x8_stm32_gpio_and_delay+0xe8>)
 800474c:	f003 fb95 	bl	8007e7a <HAL_GPIO_WritePin>
		break;
 8004750:	bf00      	nop
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
//		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
		break;
	}
	return 1;
 8004752:	2301      	movs	r3, #1
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40010800 	.word	0x40010800
 8004760:	40010c00 	.word	0x40010c00

08004764 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	460b      	mov	r3, r1
 8004770:	72fb      	strb	r3, [r7, #11]
 8004772:	4613      	mov	r3, r2
 8004774:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8004776:	7afb      	ldrb	r3, [r7, #11]
 8004778:	3b14      	subs	r3, #20
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d847      	bhi.n	800480e <u8x8_byte_stm32_hw_spi+0xaa>
 800477e:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <u8x8_byte_stm32_hw_spi+0x20>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	08004813 	.word	0x08004813
 8004788:	0800480f 	.word	0x0800480f
 800478c:	0800480f 	.word	0x0800480f
 8004790:	080047b9 	.word	0x080047b9
 8004794:	080047df 	.word	0x080047df
 8004798:	080047f7 	.word	0x080047f7
 800479c:	0800480f 	.word	0x0800480f
 80047a0:	0800480f 	.word	0x0800480f
 80047a4:	0800480f 	.word	0x0800480f
 80047a8:	0800480f 	.word	0x0800480f
 80047ac:	0800480f 	.word	0x0800480f
 80047b0:	0800480f 	.word	0x0800480f
 80047b4:	080047d1 	.word	0x080047d1
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 80047b8:	7abb      	ldrb	r3, [r7, #10]
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	2364      	movs	r3, #100	; 0x64
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	4818      	ldr	r0, [pc, #96]	; (8004824 <u8x8_byte_stm32_hw_spi+0xc0>)
 80047c2:	f007 fee3 	bl	800c58c <HAL_SPI_Transmit>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d024      	beq.n	8004816 <u8x8_byte_stm32_hw_spi+0xb2>
 80047cc:	2300      	movs	r3, #0
 80047ce:	e024      	b.n	800481a <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80047d0:	7abb      	ldrb	r3, [r7, #10]
 80047d2:	461a      	mov	r2, r3
 80047d4:	214a      	movs	r1, #74	; 0x4a
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f001 ff26 	bl	8006628 <u8x8_gpio_call>
		break;
 80047dc:	e01c      	b.n	8004818 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	2149      	movs	r1, #73	; 0x49
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f001 ff1d 	bl	8006628 <u8x8_gpio_call>
		HAL_Delay(1);
 80047ee:	2001      	movs	r0, #1
 80047f0:	f002 f820 	bl	8006834 <HAL_Delay>
		break;
 80047f4:	e010      	b.n	8004818 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 80047f6:	2001      	movs	r0, #1
 80047f8:	f002 f81c 	bl	8006834 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	461a      	mov	r2, r3
 8004804:	2149      	movs	r1, #73	; 0x49
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f001 ff0e 	bl	8006628 <u8x8_gpio_call>
		break;
 800480c:	e004      	b.n	8004818 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 800480e:	2300      	movs	r3, #0
 8004810:	e003      	b.n	800481a <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8004812:	bf00      	nop
 8004814:	e000      	b.n	8004818 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 8004816:	bf00      	nop
	}
	return 1;
 8004818:	2301      	movs	r3, #1
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000a9c 	.word	0x20000a9c

08004828 <_ZN7TEA63219write_drvEhh>:
    void mute(const bool);
    void set_input( uint8_t inp );


protected:
    virtual int write_drv(uint8_t subbadr, uint8_t data)
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]
 8004834:	4613      	mov	r3, r2
 8004836:	70bb      	strb	r3, [r7, #2]
    {
        return -1;
 8004838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    };
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr
	...

08004848 <_ZN7TEA6321C1EPv>:
 * =====================================================================================
 */
#include "tea6321.hpp"
#include <stdlib.h>

TEA6321::TEA6321(void* _opq):drv(_opq), addr(TEA6321_I2C_ADDR)
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
 8004852:	4a07      	ldr	r2, [pc, #28]	; (8004870 <_ZN7TEA6321C1EPv+0x28>)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2280      	movs	r2, #128	; 0x80
 8004862:	721a      	strb	r2, [r3, #8]
{}
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	0801414c 	.word	0x0801414c

08004874 <_ZN7TEA63214initEv>:

void TEA6321::init()
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
    set_vol(0);
 800487c:	2100      	movs	r1, #0
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f82c 	bl	80048dc <_ZN7TEA63217set_volEa>
    set_input(0);
 8004884:	2100      	movs	r1, #0
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f852 	bl	8004930 <_ZN7TEA63219set_inputEh>
    loudness(true);
 800488c:	2101      	movs	r1, #1
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f86a 	bl	8004968 <_ZN7TEA63218loudnessEb>
    mute(false);
 8004894:	2100      	movs	r1, #0
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f888 	bl	80049ac <_ZN7TEA63214muteEb>
    write_drv(FFR_SAD,0x2F);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	222f      	movs	r2, #47	; 0x2f
 80048a4:	2101      	movs	r1, #1
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
    write_drv(FFL_SAD,0x2F);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	222f      	movs	r2, #47	; 0x2f
 80048b2:	2102      	movs	r1, #2
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
    write_drv(FRR_SAD,0x2F);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	222f      	movs	r2, #47	; 0x2f
 80048c0:	2103      	movs	r1, #3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
    write_drv(FRL_SAD,0x2F);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	222f      	movs	r2, #47	; 0x2f
 80048ce:	2104      	movs	r1, #4
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	4798      	blx	r3
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <_ZN7TEA63217set_volEa>:


void TEA6321::set_vol(int8_t vol)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	70fb      	strb	r3, [r7, #3]
    if( ( vol <= 20 ) && ( vol >=-31 ) )
 80048e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048ec:	2b14      	cmp	r3, #20
 80048ee:	dc1b      	bgt.n	8004928 <_ZN7TEA63217set_volEa+0x4c>
 80048f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048f4:	f113 0f1f 	cmn.w	r3, #31
 80048f8:	db16      	blt.n	8004928 <_ZN7TEA63217set_volEa+0x4c>
    {
        vol_wrd = (vol_wrd & 0x2F)  | ( vol+43 );
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7a5b      	ldrb	r3, [r3, #9]
 80048fe:	b25b      	sxtb	r3, r3
 8004900:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8004904:	b25a      	sxtb	r2, r3
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	332b      	adds	r3, #43	; 0x2b
 800490a:	b2db      	uxtb	r3, r3
 800490c:	b25b      	sxtb	r3, r3
 800490e:	4313      	orrs	r3, r2
 8004910:	b25b      	sxtb	r3, r3
 8004912:	b2da      	uxtb	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	725a      	strb	r2, [r3, #9]
        write_drv( VOL_SAD, vol_wrd );
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	7a52      	ldrb	r2, [r2, #9]
 8004922:	2100      	movs	r1, #0
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	4798      	blx	r3
    }
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <_ZN7TEA63219set_inputEh>:

void TEA6321::set_input(uint8_t inp)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	70fb      	strb	r3, [r7, #3]
    if(inp < 4)
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d80e      	bhi.n	8004960 <_ZN7TEA63219set_inputEh+0x30>
        write_drv(SWCH_SAD, (4 | (3-inp))); 
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	f1c2 0203 	rsb	r2, r2, #3
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	b252      	sxtb	r2, r2
 8004952:	f042 0204 	orr.w	r2, r2, #4
 8004956:	b252      	sxtb	r2, r2
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	2107      	movs	r1, #7
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	4798      	blx	r3
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <_ZN7TEA63218loudnessEb>:

void TEA6321::loudness(bool on)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	70fb      	strb	r3, [r7, #3]
    vol_wrd = on ? vol_wrd & ~LOFF_BIT : vol_wrd | LOFF_BIT;
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <_ZN7TEA63218loudnessEb+0x1e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	7a5b      	ldrb	r3, [r3, #9]
 800497e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004982:	b2db      	uxtb	r3, r3
 8004984:	e004      	b.n	8004990 <_ZN7TEA63218loudnessEb+0x28>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	7a5b      	ldrb	r3, [r3, #9]
 800498a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800498e:	b2db      	uxtb	r3, r3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	7253      	strb	r3, [r2, #9]
    write_drv( VOL_SAD, vol_wrd);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	7a52      	ldrb	r2, [r2, #9]
 800499e:	2100      	movs	r1, #0
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	4798      	blx	r3
}
 80049a4:	bf00      	nop
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <_ZN7TEA63214muteEb>:
void TEA6321::mute(const bool mute)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	70fb      	strb	r3, [r7, #3]
    vol_wrd = mute ? vol_wrd | ZCM_BIT : vol_wrd & ~ZCM_BIT;
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <_ZN7TEA63214muteEb+0x1e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	7a5b      	ldrb	r3, [r3, #9]
 80049c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	e004      	b.n	80049d4 <_ZN7TEA63214muteEb+0x28>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	7a5b      	ldrb	r3, [r3, #9]
 80049ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	7253      	strb	r3, [r2, #9]
    write_drv( VOL_SAD, vol_wrd);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	7a52      	ldrb	r2, [r2, #9]
 80049e2:	2100      	movs	r1, #0
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	4798      	blx	r3
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b088      	sub	sp, #32
 8004a12:	af02      	add	r7, sp, #8
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	4608      	mov	r0, r1
 8004a18:	4611      	mov	r1, r2
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	817b      	strh	r3, [r7, #10]
 8004a20:	460b      	mov	r3, r1
 8004a22:	813b      	strh	r3, [r7, #8]
 8004a24:	4613      	mov	r3, r2
 8004a26:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8004a2e:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8004a30:	7dbb      	ldrb	r3, [r7, #22]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8004a3e:	897a      	ldrh	r2, [r7, #10]
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	4413      	add	r3, r2
 8004a44:	b298      	uxth	r0, r3
 8004a46:	893b      	ldrh	r3, [r7, #8]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	893a      	ldrh	r2, [r7, #8]
 8004a4e:	8979      	ldrh	r1, [r7, #10]
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	4603      	mov	r3, r0
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f001 f86e 	bl	8005b36 <u8g2_IsIntersection>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d040      	beq.n	8004ae2 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8004a60:	2301      	movs	r3, #1
 8004a62:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8004a64:	e035      	b.n	8004ad2 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00c      	beq.n	8004a8e <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	7dba      	ldrb	r2, [r7, #22]
 8004a78:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8004a7c:	893a      	ldrh	r2, [r7, #8]
 8004a7e:	8979      	ldrh	r1, [r7, #10]
 8004a80:	2300      	movs	r3, #0
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	2301      	movs	r3, #1
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 ff97 	bl	80059ba <u8g2_DrawHVLine>
 8004a8c:	e010      	b.n	8004ab0 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	7d7a      	ldrb	r2, [r7, #21]
 8004a9c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8004aa0:	893a      	ldrh	r2, [r7, #8]
 8004aa2:	8979      	ldrh	r1, [r7, #10]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 ff85 	bl	80059ba <u8g2_DrawHVLine>
    }
    x++;
 8004ab0:	897b      	ldrh	r3, [r7, #10]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d104      	bne.n	8004acc <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	75fb      	strb	r3, [r7, #23]
      b++;
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	623b      	str	r3, [r7, #32]
    }
    len--;
 8004acc:	88fb      	ldrh	r3, [r7, #6]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1c6      	bne.n	8004a66 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	7dba      	ldrb	r2, [r7, #22]
 8004adc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8004ae0:	e000      	b.n	8004ae4 <u8g2_DrawHXBM+0xd6>
    return;
 8004ae2:	bf00      	nop
}
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b088      	sub	sp, #32
 8004aee:	af02      	add	r7, sp, #8
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	4608      	mov	r0, r1
 8004af4:	4611      	mov	r1, r2
 8004af6:	461a      	mov	r2, r3
 8004af8:	4603      	mov	r3, r0
 8004afa:	817b      	strh	r3, [r7, #10]
 8004afc:	460b      	mov	r3, r1
 8004afe:	813b      	strh	r3, [r7, #8]
 8004b00:	4613      	mov	r3, r2
 8004b02:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8004b04:	88fb      	ldrh	r3, [r7, #6]
 8004b06:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8004b08:	8afb      	ldrh	r3, [r7, #22]
 8004b0a:	3307      	adds	r3, #7
 8004b0c:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8004b0e:	8afb      	ldrh	r3, [r7, #22]
 8004b10:	08db      	lsrs	r3, r3, #3
 8004b12:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004b14:	897a      	ldrh	r2, [r7, #10]
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	4413      	add	r3, r2
 8004b1a:	b298      	uxth	r0, r3
 8004b1c:	893a      	ldrh	r2, [r7, #8]
 8004b1e:	8c3b      	ldrh	r3, [r7, #32]
 8004b20:	4413      	add	r3, r2
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	893a      	ldrh	r2, [r7, #8]
 8004b26:	8979      	ldrh	r1, [r7, #10]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f001 f802 	bl	8005b36 <u8g2_IsIntersection>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d017      	beq.n	8004b68 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8004b38:	e012      	b.n	8004b60 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8004b3a:	88f8      	ldrh	r0, [r7, #6]
 8004b3c:	893a      	ldrh	r2, [r7, #8]
 8004b3e:	8979      	ldrh	r1, [r7, #10]
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	4603      	mov	r3, r0
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7ff ff61 	bl	8004a0e <u8g2_DrawHXBM>
    bitmap += blen;
 8004b4c:	8afb      	ldrh	r3, [r7, #22]
 8004b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b50:	4413      	add	r3, r2
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8004b54:	893b      	ldrh	r3, [r7, #8]
 8004b56:	3301      	adds	r3, #1
 8004b58:	813b      	strh	r3, [r7, #8]
    h--;
 8004b5a:	8c3b      	ldrh	r3, [r7, #32]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8004b60:	8c3b      	ldrh	r3, [r7, #32]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e9      	bne.n	8004b3a <u8g2_DrawXBM+0x50>
 8004b66:	e000      	b.n	8004b6a <u8g2_DrawXBM+0x80>
    return;
 8004b68:	bf00      	nop
  }
}
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	7c1b      	ldrb	r3, [r3, #16]
 8004b7e:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b86:	461a      	mov	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f00e fd60 	bl	8013664 <memset>
}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	70fb      	strb	r3, [r7, #3]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	7c1b      	ldrb	r3, [r3, #16]
 8004bc2:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bcc:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	89ba      	ldrh	r2, [r7, #12]
 8004bd4:	fb02 f303 	mul.w	r3, r2, r3
 8004bd8:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8004bda:	89bb      	ldrh	r3, [r7, #12]
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8004be0:	89bb      	ldrh	r3, [r7, #12]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	4413      	add	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8004be8:	7bf9      	ldrb	r1, [r7, #15]
 8004bea:	78ba      	ldrb	r2, [r7, #2]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f001 fca1 	bl	800653c <u8x8_DrawTile>
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c14:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c1c:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	7c5b      	ldrb	r3, [r3, #17]
 8004c24:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8004c26:	7bba      	ldrb	r2, [r7, #14]
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7ff ffbd 	bl	8004bac <u8g2_send_tile_row>
    src_row++;
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	3301      	adds	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8004c38:	7bbb      	ldrb	r3, [r7, #14]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	7b7b      	ldrb	r3, [r7, #13]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d203      	bcs.n	8004c4e <u8g2_send_buffer+0x4c>
 8004c46:	7bba      	ldrb	r2, [r7, #14]
 8004c48:	7b3b      	ldrb	r3, [r7, #12]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d3eb      	bcc.n	8004c26 <u8g2_send_buffer+0x24>
}
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  u8g2->cb->update_dimension(u8g2);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	4798      	blx	r3
}
 8004c7e:	bf00      	nop
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ff69 	bl	8004b70 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff ffd8 	bl	8004c56 <u8g2_SetBufferCurrTileRow>
}
 8004ca6:	bf00      	nop
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff ffa3 	bl	8004c02 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc2:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	4413      	add	r3, r2
 8004cce:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	7c5b      	ldrb	r3, [r3, #17]
 8004cd6:	7bfa      	ldrb	r2, [r7, #15]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d304      	bcc.n	8004ce6 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f001 fc94 	bl	800660a <u8x8_RefreshDisplay>
    return 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e00d      	b.n	8004d02 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ff3d 	bl	8004b70 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ffab 	bl	8004c56 <u8g2_SetBufferCurrTileRow>
  return 1;
 8004d00:	2301      	movs	r3, #1
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff ffb7 	bl	8004c86 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff ffc8 	bl	8004cae <u8g2_NextPage>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f9      	bne.n	8004d18 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8004d24:	2100      	movs	r1, #0
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff ff95 	bl	8004c56 <u8g2_SetBufferCurrTileRow>
}
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <u8g2_m_32_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_32_8_f(uint8_t *page_cnt)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[2048];
  *page_cnt = 8;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2208      	movs	r2, #8
 8004d40:	701a      	strb	r2, [r3, #0]
  return buf;
 8004d42:	4b03      	ldr	r3, [pc, #12]	; (8004d50 <u8g2_m_32_8_f+0x1c>)
  #endif
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	20000c4c 	.word	0x20000c4c

08004d54 <u8g2_Setup_ssd1322_nhd_256x64_f>:
  buf = u8g2_m_32_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1322 f */
void u8g2_Setup_ssd1322_nhd_256x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1322_nhd_256x64, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a0b      	ldr	r2, [pc, #44]	; (8004d98 <u8g2_Setup_ssd1322_nhd_256x64_f+0x44>)
 8004d6a:	490c      	ldr	r1, [pc, #48]	; (8004d9c <u8g2_Setup_ssd1322_nhd_256x64_f+0x48>)
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f001 fcbb 	bl	80066e8 <u8x8_Setup>
  buf = u8g2_m_32_8_f(&tile_buf_height);
 8004d72:	f107 0313 	add.w	r3, r7, #19
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff ffdc 	bl	8004d34 <u8g2_m_32_8_f>
 8004d7c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8004d7e:	7cfa      	ldrb	r2, [r7, #19]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <u8g2_Setup_ssd1322_nhd_256x64_f+0x4c>)
 8004d86:	6979      	ldr	r1, [r7, #20]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 ffbe 	bl	8005d0a <u8g2_SetupBuffer>
}
 8004d8e:	bf00      	nop
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	0800619d 	.word	0x0800619d
 8004d9c:	08006401 	.word	0x08006401
 8004da0:	08005b8d 	.word	0x08005b8d

08004da4 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	4413      	add	r3, r2
 8004db6:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	781b      	ldrb	r3, [r3, #0]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr

08004dc6 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8004dd2:	78fb      	ldrb	r3, [r7, #3]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	81fb      	strh	r3, [r7, #14]
    font++;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3301      	adds	r3, #1
 8004de4:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8004de6:	89fb      	ldrh	r3, [r7, #14]
 8004de8:	021b      	lsls	r3, r3, #8
 8004dea:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	89fb      	ldrh	r3, [r7, #14]
 8004df4:	4413      	add	r3, r2
 8004df6:	81fb      	strh	r3, [r7, #14]
    return pos;
 8004df8:	89fb      	ldrh	r3, [r7, #14]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr

08004e04 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8004e0e:	2100      	movs	r1, #0
 8004e10:	6838      	ldr	r0, [r7, #0]
 8004e12:	f7ff ffc7 	bl	8004da4 <u8g2_font_get_byte>
 8004e16:	4603      	mov	r3, r0
 8004e18:	461a      	mov	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8004e1e:	2101      	movs	r1, #1
 8004e20:	6838      	ldr	r0, [r7, #0]
 8004e22:	f7ff ffbf 	bl	8004da4 <u8g2_font_get_byte>
 8004e26:	4603      	mov	r3, r0
 8004e28:	461a      	mov	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8004e2e:	2102      	movs	r1, #2
 8004e30:	6838      	ldr	r0, [r7, #0]
 8004e32:	f7ff ffb7 	bl	8004da4 <u8g2_font_get_byte>
 8004e36:	4603      	mov	r3, r0
 8004e38:	461a      	mov	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8004e3e:	2103      	movs	r1, #3
 8004e40:	6838      	ldr	r0, [r7, #0]
 8004e42:	f7ff ffaf 	bl	8004da4 <u8g2_font_get_byte>
 8004e46:	4603      	mov	r3, r0
 8004e48:	461a      	mov	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8004e4e:	2104      	movs	r1, #4
 8004e50:	6838      	ldr	r0, [r7, #0]
 8004e52:	f7ff ffa7 	bl	8004da4 <u8g2_font_get_byte>
 8004e56:	4603      	mov	r3, r0
 8004e58:	461a      	mov	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8004e5e:	2105      	movs	r1, #5
 8004e60:	6838      	ldr	r0, [r7, #0]
 8004e62:	f7ff ff9f 	bl	8004da4 <u8g2_font_get_byte>
 8004e66:	4603      	mov	r3, r0
 8004e68:	461a      	mov	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8004e6e:	2106      	movs	r1, #6
 8004e70:	6838      	ldr	r0, [r7, #0]
 8004e72:	f7ff ff97 	bl	8004da4 <u8g2_font_get_byte>
 8004e76:	4603      	mov	r3, r0
 8004e78:	461a      	mov	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8004e7e:	2107      	movs	r1, #7
 8004e80:	6838      	ldr	r0, [r7, #0]
 8004e82:	f7ff ff8f 	bl	8004da4 <u8g2_font_get_byte>
 8004e86:	4603      	mov	r3, r0
 8004e88:	461a      	mov	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8004e8e:	2108      	movs	r1, #8
 8004e90:	6838      	ldr	r0, [r7, #0]
 8004e92:	f7ff ff87 	bl	8004da4 <u8g2_font_get_byte>
 8004e96:	4603      	mov	r3, r0
 8004e98:	461a      	mov	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8004e9e:	2109      	movs	r1, #9
 8004ea0:	6838      	ldr	r0, [r7, #0]
 8004ea2:	f7ff ff7f 	bl	8004da4 <u8g2_font_get_byte>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	b25a      	sxtb	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8004eae:	210a      	movs	r1, #10
 8004eb0:	6838      	ldr	r0, [r7, #0]
 8004eb2:	f7ff ff77 	bl	8004da4 <u8g2_font_get_byte>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	b25a      	sxtb	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8004ebe:	210b      	movs	r1, #11
 8004ec0:	6838      	ldr	r0, [r7, #0]
 8004ec2:	f7ff ff6f 	bl	8004da4 <u8g2_font_get_byte>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	b25a      	sxtb	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8004ece:	210c      	movs	r1, #12
 8004ed0:	6838      	ldr	r0, [r7, #0]
 8004ed2:	f7ff ff67 	bl	8004da4 <u8g2_font_get_byte>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	b25a      	sxtb	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8004ede:	210d      	movs	r1, #13
 8004ee0:	6838      	ldr	r0, [r7, #0]
 8004ee2:	f7ff ff5f 	bl	8004da4 <u8g2_font_get_byte>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	b25a      	sxtb	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8004eee:	210e      	movs	r1, #14
 8004ef0:	6838      	ldr	r0, [r7, #0]
 8004ef2:	f7ff ff57 	bl	8004da4 <u8g2_font_get_byte>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	b25a      	sxtb	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8004efe:	210f      	movs	r1, #15
 8004f00:	6838      	ldr	r0, [r7, #0]
 8004f02:	f7ff ff4f 	bl	8004da4 <u8g2_font_get_byte>
 8004f06:	4603      	mov	r3, r0
 8004f08:	b25a      	sxtb	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8004f0e:	2110      	movs	r1, #16
 8004f10:	6838      	ldr	r0, [r7, #0]
 8004f12:	f7ff ff47 	bl	8004da4 <u8g2_font_get_byte>
 8004f16:	4603      	mov	r3, r0
 8004f18:	b25a      	sxtb	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8004f1e:	2111      	movs	r1, #17
 8004f20:	6838      	ldr	r0, [r7, #0]
 8004f22:	f7ff ff50 	bl	8004dc6 <u8g2_font_get_word>
 8004f26:	4603      	mov	r3, r0
 8004f28:	461a      	mov	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8004f2e:	2113      	movs	r1, #19
 8004f30:	6838      	ldr	r0, [r7, #0]
 8004f32:	f7ff ff48 	bl	8004dc6 <u8g2_font_get_word>
 8004f36:	4603      	mov	r3, r0
 8004f38:	461a      	mov	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8004f3e:	2115      	movs	r1, #21
 8004f40:	6838      	ldr	r0, [r7, #0]
 8004f42:	f7ff ff40 	bl	8004dc6 <u8g2_font_get_word>
 8004f46:	4603      	mov	r3, r0
 8004f48:	461a      	mov	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	82da      	strh	r2, [r3, #22]
#endif
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	7b1b      	ldrb	r3, [r3, #12]
 8004f66:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8004f70:	7bfa      	ldrb	r2, [r7, #15]
 8004f72:	7b7b      	ldrb	r3, [r7, #13]
 8004f74:	fa42 f303 	asr.w	r3, r2, r3
 8004f78:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8004f7a:	7b7b      	ldrb	r3, [r7, #13]
 8004f7c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8004f7e:	7bba      	ldrb	r2, [r7, #14]
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	4413      	add	r3, r2
 8004f84:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8004f86:	7bbb      	ldrb	r3, [r7, #14]
 8004f88:	2b07      	cmp	r3, #7
 8004f8a:	d91a      	bls.n	8004fc2 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8004f90:	7b3a      	ldrb	r2, [r7, #12]
 8004f92:	7b7b      	ldrb	r3, [r7, #13]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	7b3b      	ldrb	r3, [r7, #12]
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	b25a      	sxtb	r2, r3
 8004fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	b25b      	sxtb	r3, r3
 8004fba:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	3b08      	subs	r3, #8
 8004fc0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	7bba      	ldrb	r2, [r7, #14]
 8004fdc:	731a      	strb	r2, [r3, #12]
  return val;
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr

08004fea <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8004ff6:	78fb      	ldrb	r3, [r7, #3]
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff ffab 	bl	8004f56 <u8g2_font_decode_get_unsigned_bits>
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8005004:	2301      	movs	r3, #1
 8005006:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	3b01      	subs	r3, #1
 800500c:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800500e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800501a:	7bfa      	ldrb	r2, [r7, #15]
 800501c:	7bbb      	ldrb	r3, [r7, #14]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	b2db      	uxtb	r3, r3
 8005022:	73fb      	strb	r3, [r7, #15]
  return v;
 8005024:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8005030:	b490      	push	{r4, r7}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	4604      	mov	r4, r0
 8005038:	4608      	mov	r0, r1
 800503a:	4611      	mov	r1, r2
 800503c:	461a      	mov	r2, r3
 800503e:	4623      	mov	r3, r4
 8005040:	80fb      	strh	r3, [r7, #6]
 8005042:	4603      	mov	r3, r0
 8005044:	717b      	strb	r3, [r7, #5]
 8005046:	460b      	mov	r3, r1
 8005048:	713b      	strb	r3, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d014      	beq.n	800507e <u8g2_add_vector_y+0x4e>
 8005054:	2b02      	cmp	r3, #2
 8005056:	dc19      	bgt.n	800508c <u8g2_add_vector_y+0x5c>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <u8g2_add_vector_y+0x32>
 800505c:	2b01      	cmp	r3, #1
 800505e:	d007      	beq.n	8005070 <u8g2_add_vector_y+0x40>
 8005060:	e014      	b.n	800508c <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8005062:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005066:	b29a      	uxth	r2, r3
 8005068:	88fb      	ldrh	r3, [r7, #6]
 800506a:	4413      	add	r3, r2
 800506c:	80fb      	strh	r3, [r7, #6]
      break;
 800506e:	e014      	b.n	800509a <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8005070:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005074:	b29a      	uxth	r2, r3
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	4413      	add	r3, r2
 800507a:	80fb      	strh	r3, [r7, #6]
      break;
 800507c:	e00d      	b.n	800509a <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800507e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005082:	b29b      	uxth	r3, r3
 8005084:	88fa      	ldrh	r2, [r7, #6]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	80fb      	strh	r3, [r7, #6]
      break;
 800508a:	e006      	b.n	800509a <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800508c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005090:	b29b      	uxth	r3, r3
 8005092:	88fa      	ldrh	r2, [r7, #6]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	80fb      	strh	r3, [r7, #6]
      break;      
 8005098:	bf00      	nop
  }
  return dy;
 800509a:	88fb      	ldrh	r3, [r7, #6]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc90      	pop	{r4, r7}
 80050a4:	4770      	bx	lr

080050a6 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80050a6:	b490      	push	{r4, r7}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	4604      	mov	r4, r0
 80050ae:	4608      	mov	r0, r1
 80050b0:	4611      	mov	r1, r2
 80050b2:	461a      	mov	r2, r3
 80050b4:	4623      	mov	r3, r4
 80050b6:	80fb      	strh	r3, [r7, #6]
 80050b8:	4603      	mov	r3, r0
 80050ba:	717b      	strb	r3, [r7, #5]
 80050bc:	460b      	mov	r3, r1
 80050be:	713b      	strb	r3, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d014      	beq.n	80050f4 <u8g2_add_vector_x+0x4e>
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	dc19      	bgt.n	8005102 <u8g2_add_vector_x+0x5c>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <u8g2_add_vector_x+0x32>
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d007      	beq.n	80050e6 <u8g2_add_vector_x+0x40>
 80050d6:	e014      	b.n	8005102 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80050d8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80050dc:	b29a      	uxth	r2, r3
 80050de:	88fb      	ldrh	r3, [r7, #6]
 80050e0:	4413      	add	r3, r2
 80050e2:	80fb      	strh	r3, [r7, #6]
      break;
 80050e4:	e014      	b.n	8005110 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80050e6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	88fa      	ldrh	r2, [r7, #6]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	80fb      	strh	r3, [r7, #6]
      break;
 80050f2:	e00d      	b.n	8005110 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80050f4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	88fa      	ldrh	r2, [r7, #6]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	80fb      	strh	r3, [r7, #6]
      break;
 8005100:	e006      	b.n	8005110 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8005102:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005106:	b29a      	uxth	r2, r3
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	4413      	add	r3, r2
 800510c:	80fb      	strh	r3, [r7, #6]
      break;      
 800510e:	bf00      	nop
  }
  return dx;
 8005110:	88fb      	ldrh	r3, [r7, #6]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bc90      	pop	{r4, r7}
 800511a:	4770      	bx	lr

0800511c <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af02      	add	r7, sp, #8
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	70fb      	strb	r3, [r7, #3]
 8005128:	4613      	mov	r3, r2
 800512a:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3378      	adds	r3, #120	; 0x78
 8005130:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800513c:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005144:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800514c:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800514e:	7bfa      	ldrb	r2, [r7, #15]
 8005150:	7d7b      	ldrb	r3, [r7, #21]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800515a:	7dfa      	ldrb	r2, [r7, #23]
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	429a      	cmp	r2, r3
 8005160:	d201      	bcs.n	8005166 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8005162:	7dfb      	ldrb	r3, [r7, #23]
 8005164:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	889b      	ldrh	r3, [r3, #4]
 800516a:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	88db      	ldrh	r3, [r3, #6]
 8005170:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8005172:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8005176:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	7c1b      	ldrb	r3, [r3, #16]
 800517e:	89b8      	ldrh	r0, [r7, #12]
 8005180:	f7ff ff91 	bl	80050a6 <u8g2_add_vector_x>
 8005184:	4603      	mov	r3, r0
 8005186:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8005188:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800518c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	7c1b      	ldrb	r3, [r3, #16]
 8005194:	8978      	ldrh	r0, [r7, #10]
 8005196:	f7ff ff4b 	bl	8005030 <u8g2_add_vector_y>
 800519a:	4603      	mov	r3, r0
 800519c:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800519e:	78bb      	ldrb	r3, [r7, #2]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d010      	beq.n	80051c6 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	7b9a      	ldrb	r2, [r3, #14]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      u8g2_DrawHVLine(u8g2, 
 80051ae:	7dbb      	ldrb	r3, [r7, #22]
 80051b0:	b298      	uxth	r0, r3
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	7c1b      	ldrb	r3, [r3, #16]
 80051b6:	897a      	ldrh	r2, [r7, #10]
 80051b8:	89b9      	ldrh	r1, [r7, #12]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	4603      	mov	r3, r0
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fbfb 	bl	80059ba <u8g2_DrawHVLine>
 80051c4:	e013      	b.n	80051ee <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	7b5b      	ldrb	r3, [r3, #13]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10f      	bne.n	80051ee <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	7bda      	ldrb	r2, [r3, #15]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
      u8g2_DrawHVLine(u8g2, 
 80051d8:	7dbb      	ldrb	r3, [r7, #22]
 80051da:	b298      	uxth	r0, r3
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	7c1b      	ldrb	r3, [r3, #16]
 80051e0:	897a      	ldrh	r2, [r7, #10]
 80051e2:	89b9      	ldrh	r1, [r7, #12]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	4603      	mov	r3, r0
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fbe6 	bl	80059ba <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80051ee:	7dfa      	ldrb	r2, [r7, #23]
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d309      	bcc.n	800520a <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80051f6:	7dfa      	ldrb	r2, [r7, #23]
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	757b      	strb	r3, [r7, #21]
    ly++;
 8005202:	7d3b      	ldrb	r3, [r7, #20]
 8005204:	3301      	adds	r3, #1
 8005206:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8005208:	e79d      	b.n	8005146 <u8g2_font_decode_len+0x2a>
      break;
 800520a:	bf00      	nop
  }
  lx += cnt;
 800520c:	7d7a      	ldrb	r2, [r7, #21]
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	4413      	add	r3, r2
 8005212:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8005214:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 800521c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	725a      	strb	r2, [r3, #9]
  
}
 8005224:	bf00      	nop
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3378      	adds	r3, #120	; 0x78
 800523a:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800524e:	4619      	mov	r1, r3
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff fe80 	bl	8004f56 <u8g2_font_decode_get_unsigned_bits>
 8005256:	4603      	mov	r3, r0
 8005258:	b25a      	sxtb	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8005264:	4619      	mov	r1, r3
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f7ff fe75 	bl	8004f56 <u8g2_font_decode_get_unsigned_bits>
 800526c:	4603      	mov	r3, r0
 800526e:	b25a      	sxtb	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	7b9b      	ldrb	r3, [r3, #14]
 8005282:	2b00      	cmp	r3, #0
 8005284:	bf0c      	ite	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	2300      	movne	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	73da      	strb	r2, [r3, #15]
}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08a      	sub	sp, #40	; 0x28
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3378      	adds	r3, #120	; 0x78
 80052aa:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80052ac:	6839      	ldr	r1, [r7, #0]
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff ffbc 	bl	800522c <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 80052ba:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80052c2:	4619      	mov	r1, r3
 80052c4:	6978      	ldr	r0, [r7, #20]
 80052c6:	f7ff fe90 	bl	8004fea <u8g2_font_decode_get_signed_bits>
 80052ca:	4603      	mov	r3, r0
 80052cc:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80052d4:	4619      	mov	r1, r3
 80052d6:	6978      	ldr	r0, [r7, #20]
 80052d8:	f7ff fe87 	bl	8004fea <u8g2_font_decode_get_signed_bits>
 80052dc:	4603      	mov	r3, r0
 80052de:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80052e6:	4619      	mov	r1, r3
 80052e8:	6978      	ldr	r0, [r7, #20]
 80052ea:	f7ff fe7e 	bl	8004fea <u8g2_font_decode_get_signed_bits>
 80052ee:	4603      	mov	r3, r0
 80052f0:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f340 80d7 	ble.w	80054ac <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	8898      	ldrh	r0, [r3, #4]
 8005302:	7cfa      	ldrb	r2, [r7, #19]
 8005304:	7c7b      	ldrb	r3, [r7, #17]
 8005306:	4413      	add	r3, r2
 8005308:	b2db      	uxtb	r3, r3
 800530a:	425b      	negs	r3, r3
 800530c:	b2db      	uxtb	r3, r3
 800530e:	b25a      	sxtb	r2, r3
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	7c1b      	ldrb	r3, [r3, #16]
 8005314:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8005318:	f7ff fec5 	bl	80050a6 <u8g2_add_vector_x>
 800531c:	4603      	mov	r3, r0
 800531e:	461a      	mov	r2, r3
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	88d8      	ldrh	r0, [r3, #6]
 8005328:	7cfa      	ldrb	r2, [r7, #19]
 800532a:	7c7b      	ldrb	r3, [r7, #17]
 800532c:	4413      	add	r3, r2
 800532e:	b2db      	uxtb	r3, r3
 8005330:	425b      	negs	r3, r3
 8005332:	b2db      	uxtb	r3, r3
 8005334:	b25a      	sxtb	r2, r3
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	7c1b      	ldrb	r3, [r3, #16]
 800533a:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800533e:	f7ff fe77 	bl	8005030 <u8g2_add_vector_y>
 8005342:	4603      	mov	r3, r0
 8005344:	461a      	mov	r2, r3
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	889b      	ldrh	r3, [r3, #4]
 800534e:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	88db      	ldrh	r3, [r3, #6]
 8005354:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8005356:	8bfb      	ldrh	r3, [r7, #30]
 8005358:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 800535a:	8b7b      	ldrh	r3, [r7, #26]
 800535c:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	7c1b      	ldrb	r3, [r3, #16]
 8005362:	2b03      	cmp	r3, #3
 8005364:	d85a      	bhi.n	800541c <u8g2_font_decode_glyph+0x180>
 8005366:	a201      	add	r2, pc, #4	; (adr r2, 800536c <u8g2_font_decode_glyph+0xd0>)
 8005368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536c:	0800537d 	.word	0x0800537d
 8005370:	08005399 	.word	0x08005399
 8005374:	080053c1 	.word	0x080053c1
 8005378:	080053f5 	.word	0x080053f5
      {
	case 0:
	    x1 += decode->glyph_width;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8005382:	b29a      	uxth	r2, r3
 8005384:	8bbb      	ldrh	r3, [r7, #28]
 8005386:	4413      	add	r3, r2
 8005388:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 800538a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800538e:	b29a      	uxth	r2, r3
 8005390:	8b3b      	ldrh	r3, [r7, #24]
 8005392:	4413      	add	r3, r2
 8005394:	833b      	strh	r3, [r7, #24]
	    break;
 8005396:	e041      	b.n	800541c <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8005398:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800539c:	b29b      	uxth	r3, r3
 800539e:	8bfa      	ldrh	r2, [r7, #30]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80053a4:	8bfb      	ldrh	r3, [r7, #30]
 80053a6:	3301      	adds	r3, #1
 80053a8:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80053aa:	8bbb      	ldrh	r3, [r7, #28]
 80053ac:	3301      	adds	r3, #1
 80053ae:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	8b3b      	ldrh	r3, [r7, #24]
 80053ba:	4413      	add	r3, r2
 80053bc:	833b      	strh	r3, [r7, #24]
	    break;
 80053be:	e02d      	b.n	800541c <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	8bfa      	ldrh	r2, [r7, #30]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80053ce:	8bfb      	ldrh	r3, [r7, #30]
 80053d0:	3301      	adds	r3, #1
 80053d2:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80053d4:	8bbb      	ldrh	r3, [r7, #28]
 80053d6:	3301      	adds	r3, #1
 80053d8:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80053da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	8b7a      	ldrh	r2, [r7, #26]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80053e6:	8b7b      	ldrh	r3, [r7, #26]
 80053e8:	3301      	adds	r3, #1
 80053ea:	837b      	strh	r3, [r7, #26]
	    y1++;
 80053ec:	8b3b      	ldrh	r3, [r7, #24]
 80053ee:	3301      	adds	r3, #1
 80053f0:	833b      	strh	r3, [r7, #24]
	    break;	  
 80053f2:	e013      	b.n	800541c <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80053f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	8bbb      	ldrh	r3, [r7, #28]
 80053fc:	4413      	add	r3, r2
 80053fe:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8005406:	b29b      	uxth	r3, r3
 8005408:	8b7a      	ldrh	r2, [r7, #26]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800540e:	8b7b      	ldrh	r3, [r7, #26]
 8005410:	3301      	adds	r3, #1
 8005412:	837b      	strh	r3, [r7, #26]
	    y1++;
 8005414:	8b3b      	ldrh	r3, [r7, #24]
 8005416:	3301      	adds	r3, #1
 8005418:	833b      	strh	r3, [r7, #24]
	    break;	  
 800541a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800541c:	8bb8      	ldrh	r0, [r7, #28]
 800541e:	8b7a      	ldrh	r2, [r7, #26]
 8005420:	8bf9      	ldrh	r1, [r7, #30]
 8005422:	8b3b      	ldrh	r3, [r7, #24]
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	4603      	mov	r3, r0
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fb84 	bl	8005b36 <u8g2_IsIntersection>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d102      	bne.n	800543a <u8g2_font_decode_glyph+0x19e>
	return d;
 8005434:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8005438:	e03a      	b.n	80054b0 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2200      	movs	r2, #0
 800543e:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2200      	movs	r2, #0
 8005444:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800544c:	4619      	mov	r1, r3
 800544e:	6978      	ldr	r0, [r7, #20]
 8005450:	f7ff fd81 	bl	8004f56 <u8g2_font_decode_get_unsigned_bits>
 8005454:	4603      	mov	r3, r0
 8005456:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800545e:	4619      	mov	r1, r3
 8005460:	6978      	ldr	r0, [r7, #20]
 8005462:	f7ff fd78 	bl	8004f56 <u8g2_font_decode_get_unsigned_bits>
 8005466:	4603      	mov	r3, r0
 8005468:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2200      	movs	r2, #0
 800546e:	4619      	mov	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff fe53 	bl	800511c <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8005476:	7bbb      	ldrb	r3, [r7, #14]
 8005478:	2201      	movs	r2, #1
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff fe4d 	bl	800511c <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8005482:	2101      	movs	r1, #1
 8005484:	6978      	ldr	r0, [r7, #20]
 8005486:	f7ff fd66 	bl	8004f56 <u8g2_font_decode_get_unsigned_bits>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1ec      	bne.n	800546a <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005496:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800549a:	429a      	cmp	r2, r3
 800549c:	dd00      	ble.n	80054a0 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800549e:	e7d2      	b.n	8005446 <u8g2_font_decode_glyph+0x1aa>
	break;
 80054a0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	7b9a      	ldrb	r2, [r3, #14]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
  }
  return d;
 80054ac:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	3317      	adds	r3, #23
 80054ce:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80054d0:	887b      	ldrh	r3, [r7, #2]
 80054d2:	2bff      	cmp	r3, #255	; 0xff
 80054d4:	d82a      	bhi.n	800552c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80054d6:	887b      	ldrh	r3, [r7, #2]
 80054d8:	2b60      	cmp	r3, #96	; 0x60
 80054da:	d907      	bls.n	80054ec <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80054e2:	461a      	mov	r2, r3
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	4413      	add	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	e009      	b.n	8005500 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80054ec:	887b      	ldrh	r3, [r7, #2]
 80054ee:	2b40      	cmp	r3, #64	; 0x40
 80054f0:	d906      	bls.n	8005500 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80054f8:	461a      	mov	r2, r3
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	4413      	add	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	3301      	adds	r3, #1
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d04e      	beq.n	80055a8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	887a      	ldrh	r2, [r7, #2]
 8005512:	429a      	cmp	r2, r3
 8005514:	d102      	bne.n	800551c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	3302      	adds	r3, #2
 800551a:	e049      	b.n	80055b0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	3301      	adds	r3, #1
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	4413      	add	r3, r2
 8005528:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800552a:	e7e9      	b.n	8005500 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8005532:	461a      	mov	r2, r3
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	4413      	add	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800553e:	2100      	movs	r1, #0
 8005540:	6938      	ldr	r0, [r7, #16]
 8005542:	f7ff fc40 	bl	8004dc6 <u8g2_font_get_word>
 8005546:	4603      	mov	r3, r0
 8005548:	461a      	mov	r2, r3
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	4413      	add	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8005550:	2102      	movs	r1, #2
 8005552:	6938      	ldr	r0, [r7, #16]
 8005554:	f7ff fc37 	bl	8004dc6 <u8g2_font_get_word>
 8005558:	4603      	mov	r3, r0
 800555a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	3304      	adds	r3, #4
 8005560:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8005562:	89fa      	ldrh	r2, [r7, #14]
 8005564:	887b      	ldrh	r3, [r7, #2]
 8005566:	429a      	cmp	r2, r3
 8005568:	d3e9      	bcc.n	800553e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8005570:	89fb      	ldrh	r3, [r7, #14]
 8005572:	021b      	lsls	r3, r3, #8
 8005574:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	3301      	adds	r3, #1
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	b29a      	uxth	r2, r3
 800557e:	89fb      	ldrh	r3, [r7, #14]
 8005580:	4313      	orrs	r3, r2
 8005582:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8005584:	89fb      	ldrh	r3, [r7, #14]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d010      	beq.n	80055ac <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800558a:	89fa      	ldrh	r2, [r7, #14]
 800558c:	887b      	ldrh	r3, [r7, #2]
 800558e:	429a      	cmp	r2, r3
 8005590:	d102      	bne.n	8005598 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	3303      	adds	r3, #3
 8005596:	e00b      	b.n	80055b0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	3302      	adds	r3, #2
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	4413      	add	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80055a6:	e7e0      	b.n	800556a <u8g2_font_get_glyph_data+0xb2>
	break;
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <u8g2_font_get_glyph_data+0xf6>
	break;
 80055ac:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	4608      	mov	r0, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	461a      	mov	r2, r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	817b      	strh	r3, [r7, #10]
 80055ca:	460b      	mov	r3, r1
 80055cc:	813b      	strh	r3, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	897a      	ldrh	r2, [r7, #10]
 80055da:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
  u8g2->font_decode.target_y = y;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	893a      	ldrh	r2, [r7, #8]
 80055e2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	4619      	mov	r1, r3
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f7ff ff64 	bl	80054b8 <u8g2_font_get_glyph_data>
 80055f0:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80055f8:	6939      	ldr	r1, [r7, #16]
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f7ff fe4e 	bl	800529c <u8g2_font_decode_glyph>
 8005600:	4603      	mov	r3, r0
 8005602:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8005604:	8afb      	ldrh	r3, [r7, #22]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	4608      	mov	r0, r1
 800561a:	4611      	mov	r1, r2
 800561c:	461a      	mov	r2, r3
 800561e:	4603      	mov	r3, r0
 8005620:	817b      	strh	r3, [r7, #10]
 8005622:	460b      	mov	r3, r1
 8005624:	813b      	strh	r3, [r7, #8]
 8005626:	4613      	mov	r3, r2
 8005628:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005630:	2b03      	cmp	r3, #3
 8005632:	d833      	bhi.n	800569c <u8g2_DrawGlyph+0x8c>
 8005634:	a201      	add	r2, pc, #4	; (adr r2, 800563c <u8g2_DrawGlyph+0x2c>)
 8005636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563a:	bf00      	nop
 800563c:	0800564d 	.word	0x0800564d
 8005640:	08005661 	.word	0x08005661
 8005644:	08005675 	.word	0x08005675
 8005648:	08005689 	.word	0x08005689
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	4798      	blx	r3
 8005654:	4603      	mov	r3, r0
 8005656:	461a      	mov	r2, r3
 8005658:	893b      	ldrh	r3, [r7, #8]
 800565a:	4413      	add	r3, r2
 800565c:	813b      	strh	r3, [r7, #8]
      break;
 800565e:	e01d      	b.n	800569c <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	4798      	blx	r3
 8005668:	4603      	mov	r3, r0
 800566a:	461a      	mov	r2, r3
 800566c:	897b      	ldrh	r3, [r7, #10]
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	817b      	strh	r3, [r7, #10]
      break;
 8005672:	e013      	b.n	800569c <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	4798      	blx	r3
 800567c:	4603      	mov	r3, r0
 800567e:	461a      	mov	r2, r3
 8005680:	893b      	ldrh	r3, [r7, #8]
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	813b      	strh	r3, [r7, #8]
      break;
 8005686:	e009      	b.n	800569c <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	4798      	blx	r3
 8005690:	4603      	mov	r3, r0
 8005692:	461a      	mov	r2, r3
 8005694:	897b      	ldrh	r3, [r7, #10]
 8005696:	4413      	add	r3, r2
 8005698:	817b      	strh	r3, [r7, #10]
      break;
 800569a:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800569c:	88fb      	ldrh	r3, [r7, #6]
 800569e:	893a      	ldrh	r2, [r7, #8]
 80056a0:	8979      	ldrh	r1, [r7, #10]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f7ff ff88 	bl	80055b8 <u8g2_font_draw_glyph>
 80056a8:	4603      	mov	r3, r0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop

080056b4 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	607b      	str	r3, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	817b      	strh	r3, [r7, #10]
 80056c2:	4613      	mov	r3, r2
 80056c4:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 fc65 	bl	8005f96 <u8x8_utf8_init>
  sum = 0;
 80056cc:	2300      	movs	r3, #0
 80056ce:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	7812      	ldrb	r2, [r2, #0]
 80056d8:	4611      	mov	r1, r2
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	4798      	blx	r3
 80056de:	4603      	mov	r3, r0
 80056e0:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80056e2:	8abb      	ldrh	r3, [r7, #20]
 80056e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d038      	beq.n	800575e <u8g2_draw_string+0xaa>
      break;
    str++;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3301      	adds	r3, #1
 80056f0:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80056f2:	8abb      	ldrh	r3, [r7, #20]
 80056f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d0e9      	beq.n	80056d0 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80056fc:	8abb      	ldrh	r3, [r7, #20]
 80056fe:	893a      	ldrh	r2, [r7, #8]
 8005700:	8979      	ldrh	r1, [r7, #10]
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f7ff ff84 	bl	8005610 <u8g2_DrawGlyph>
 8005708:	4603      	mov	r3, r0
 800570a:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005712:	2b03      	cmp	r3, #3
 8005714:	d81e      	bhi.n	8005754 <u8g2_draw_string+0xa0>
 8005716:	a201      	add	r2, pc, #4	; (adr r2, 800571c <u8g2_draw_string+0x68>)
 8005718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571c:	0800572d 	.word	0x0800572d
 8005720:	08005737 	.word	0x08005737
 8005724:	08005741 	.word	0x08005741
 8005728:	0800574b 	.word	0x0800574b
      {
	case 0:
	  x += delta;
 800572c:	897a      	ldrh	r2, [r7, #10]
 800572e:	8a7b      	ldrh	r3, [r7, #18]
 8005730:	4413      	add	r3, r2
 8005732:	817b      	strh	r3, [r7, #10]
	  break;
 8005734:	e00e      	b.n	8005754 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8005736:	893a      	ldrh	r2, [r7, #8]
 8005738:	8a7b      	ldrh	r3, [r7, #18]
 800573a:	4413      	add	r3, r2
 800573c:	813b      	strh	r3, [r7, #8]
	  break;
 800573e:	e009      	b.n	8005754 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8005740:	897a      	ldrh	r2, [r7, #10]
 8005742:	8a7b      	ldrh	r3, [r7, #18]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	817b      	strh	r3, [r7, #10]
	  break;
 8005748:	e004      	b.n	8005754 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800574a:	893a      	ldrh	r2, [r7, #8]
 800574c:	8a7b      	ldrh	r3, [r7, #18]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	813b      	strh	r3, [r7, #8]
	  break;
 8005752:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8005754:	8afa      	ldrh	r2, [r7, #22]
 8005756:	8a7b      	ldrh	r3, [r7, #18]
 8005758:	4413      	add	r3, r2
 800575a:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800575c:	e7b8      	b.n	80056d0 <u8g2_draw_string+0x1c>
      break;
 800575e:	bf00      	nop
    }
  }
  return sum;
 8005760:	8afb      	ldrh	r3, [r7, #22]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop

0800576c <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	607b      	str	r3, [r7, #4]
 8005776:	460b      	mov	r3, r1
 8005778:	817b      	strh	r3, [r7, #10]
 800577a:	4613      	mov	r3, r2
 800577c:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4a06      	ldr	r2, [pc, #24]	; (800579c <u8g2_DrawStr+0x30>)
 8005782:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8005784:	893a      	ldrh	r2, [r7, #8]
 8005786:	8979      	ldrh	r1, [r7, #10]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f7ff ff92 	bl	80056b4 <u8g2_draw_string>
 8005790:	4603      	mov	r3, r0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	08005fb1 	.word	0x08005fb1

080057a0 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d05d      	beq.n	800586c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f993 2099 	ldrsb.w	r2, [r3, #153]	; 0x99
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f993 209a 	ldrsb.w	r2, [r3, #154]	; 0x9a
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d04d      	beq.n	800586e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d11c      	bne.n	8005816 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f993 20a6 	ldrsb.w	r2, [r3, #166]	; 0xa6
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
 80057e8:	429a      	cmp	r2, r3
 80057ea:	da05      	bge.n	80057f8 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f993 209b 	ldrsb.w	r2, [r3, #155]	; 0x9b
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f993 20a7 	ldrsb.w	r2, [r3, #167]	; 0xa7
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 8005804:	429a      	cmp	r2, r3
 8005806:	dd32      	ble.n	800586e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8005814:	e02b      	b.n	800586e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f993 30a6 	ldrsb.w	r3, [r3, #166]	; 0xa6
 800581c:	461a      	mov	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f993 3096 	ldrsb.w	r3, [r3, #150]	; 0x96
 8005824:	4619      	mov	r1, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f993 3098 	ldrsb.w	r3, [r3, #152]	; 0x98
 800582c:	440b      	add	r3, r1
 800582e:	429a      	cmp	r2, r3
 8005830:	da0d      	bge.n	800584e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f993 3096 	ldrsb.w	r3, [r3, #150]	; 0x96
 8005838:	b2da      	uxtb	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f993 3098 	ldrsb.w	r3, [r3, #152]	; 0x98
 8005840:	b2db      	uxtb	r3, r3
 8005842:	4413      	add	r3, r2
 8005844:	b2db      	uxtb	r3, r3
 8005846:	b25a      	sxtb	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f993 20a7 	ldrsb.w	r2, [r3, #167]	; 0xa7
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f993 3098 	ldrsb.w	r3, [r3, #152]	; 0x98
 800585a:	429a      	cmp	r2, r3
 800585c:	dd07      	ble.n	800586e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f993 2098 	ldrsb.w	r2, [r3, #152]	; 0x98
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 800586a:	e000      	b.n	800586e <u8g2_UpdateRefHeight+0xce>
    return;
 800586c:	bf00      	nop
  }  
}
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr

08005876 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  return 0;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr
	...

0800588c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a03      	ldr	r2, [pc, #12]	; (80058a4 <u8g2_SetFontPosBaseline+0x18>)
 8005898:	675a      	str	r2, [r3, #116]	; 0x74
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr
 80058a4:	08005877 	.word	0x08005877

080058a8 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d00b      	beq.n	80058d4 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	671a      	str	r2, [r3, #112]	; 0x70
    u8g2_read_font_info(&(u8g2->font_info), font);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	338c      	adds	r3, #140	; 0x8c
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff fa9b 	bl	8004e04 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff ff66 	bl	80057a0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	4611      	mov	r1, r2
 80058e8:	461a      	mov	r2, r3
 80058ea:	460b      	mov	r3, r1
 80058ec:	80fb      	strh	r3, [r7, #6]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80058f8:	8afb      	ldrh	r3, [r7, #22]
 80058fa:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	881a      	ldrh	r2, [r3, #0]
 8005900:	8abb      	ldrh	r3, [r7, #20]
 8005902:	4413      	add	r3, r2
 8005904:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8005906:	8afa      	ldrh	r2, [r7, #22]
 8005908:	8abb      	ldrh	r3, [r7, #20]
 800590a:	429a      	cmp	r2, r3
 800590c:	d90b      	bls.n	8005926 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800590e:	8afa      	ldrh	r2, [r7, #22]
 8005910:	88bb      	ldrh	r3, [r7, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d205      	bcs.n	8005922 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8005916:	88bb      	ldrh	r3, [r7, #4]
 8005918:	82bb      	strh	r3, [r7, #20]
      b--;
 800591a:	8abb      	ldrh	r3, [r7, #20]
 800591c:	3b01      	subs	r3, #1
 800591e:	82bb      	strh	r3, [r7, #20]
 8005920:	e001      	b.n	8005926 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8005926:	8afa      	ldrh	r2, [r7, #22]
 8005928:	88bb      	ldrh	r3, [r7, #4]
 800592a:	429a      	cmp	r2, r3
 800592c:	d301      	bcc.n	8005932 <u8g2_clip_intersection2+0x56>
    return 0;
 800592e:	2300      	movs	r3, #0
 8005930:	e01c      	b.n	800596c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8005932:	8aba      	ldrh	r2, [r7, #20]
 8005934:	88fb      	ldrh	r3, [r7, #6]
 8005936:	429a      	cmp	r2, r3
 8005938:	d801      	bhi.n	800593e <u8g2_clip_intersection2+0x62>
    return 0;
 800593a:	2300      	movs	r3, #0
 800593c:	e016      	b.n	800596c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800593e:	8afa      	ldrh	r2, [r7, #22]
 8005940:	88fb      	ldrh	r3, [r7, #6]
 8005942:	429a      	cmp	r2, r3
 8005944:	d201      	bcs.n	800594a <u8g2_clip_intersection2+0x6e>
    a = c;
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800594a:	8aba      	ldrh	r2, [r7, #20]
 800594c:	88bb      	ldrh	r3, [r7, #4]
 800594e:	429a      	cmp	r2, r3
 8005950:	d901      	bls.n	8005956 <u8g2_clip_intersection2+0x7a>
    b = d;
 8005952:	88bb      	ldrh	r3, [r7, #4]
 8005954:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8afa      	ldrh	r2, [r7, #22]
 800595a:	801a      	strh	r2, [r3, #0]
  b -= a;
 800595c:	8aba      	ldrh	r2, [r7, #20]
 800595e:	8afb      	ldrh	r3, [r7, #22]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	8aba      	ldrh	r2, [r7, #20]
 8005968:	801a      	strh	r2, [r3, #0]
  return 1;
 800596a:	2301      	movs	r3, #1
}
 800596c:	4618      	mov	r0, r3
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr

08005976 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005976:	b590      	push	{r4, r7, lr}
 8005978:	b087      	sub	sp, #28
 800597a:	af02      	add	r7, sp, #8
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	4608      	mov	r0, r1
 8005980:	4611      	mov	r1, r2
 8005982:	461a      	mov	r2, r3
 8005984:	4603      	mov	r3, r0
 8005986:	817b      	strh	r3, [r7, #10]
 8005988:	460b      	mov	r3, r1
 800598a:	813b      	strh	r3, [r7, #8]
 800598c:	4613      	mov	r3, r2
 800598e:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005996:	893a      	ldrh	r2, [r7, #8]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80059a0:	88f8      	ldrh	r0, [r7, #6]
 80059a2:	893a      	ldrh	r2, [r7, #8]
 80059a4:	8979      	ldrh	r1, [r7, #10]
 80059a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	4603      	mov	r3, r0
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	47a0      	blx	r4
}
 80059b2:	bf00      	nop
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd90      	pop	{r4, r7, pc}

080059ba <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80059ba:	b590      	push	{r4, r7, lr}
 80059bc:	b087      	sub	sp, #28
 80059be:	af02      	add	r7, sp, #8
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	4608      	mov	r0, r1
 80059c4:	4611      	mov	r1, r2
 80059c6:	461a      	mov	r2, r3
 80059c8:	4603      	mov	r3, r0
 80059ca:	817b      	strh	r3, [r7, #10]
 80059cc:	460b      	mov	r3, r1
 80059ce:	813b      	strh	r3, [r7, #8]
 80059d0:	4613      	mov	r3, r2
 80059d2:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d075      	beq.n	8005aca <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d072      	beq.n	8005aca <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80059e4:	88fb      	ldrh	r3, [r7, #6]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d91a      	bls.n	8005a20 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80059ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d109      	bne.n	8005a06 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80059f2:	897a      	ldrh	r2, [r7, #10]
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	817b      	strh	r3, [r7, #10]
	  x++;
 80059fc:	897b      	ldrh	r3, [r7, #10]
 80059fe:	3301      	adds	r3, #1
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	817b      	strh	r3, [r7, #10]
 8005a04:	e00c      	b.n	8005a20 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8005a06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d108      	bne.n	8005a20 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8005a0e:	893a      	ldrh	r2, [r7, #8]
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	813b      	strh	r3, [r7, #8]
	  y++;
 8005a18:	893b      	ldrh	r3, [r7, #8]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8005a20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8005a2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d11a      	bne.n	8005a6a <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8005a3a:	893b      	ldrh	r3, [r7, #8]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d83b      	bhi.n	8005ab8 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8005a46:	893b      	ldrh	r3, [r7, #8]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d937      	bls.n	8005abc <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a58:	1db9      	adds	r1, r7, #6
 8005a5a:	f107 000a 	add.w	r0, r7, #10
 8005a5e:	f7ff ff3d 	bl	80058dc <u8g2_clip_intersection2>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d11a      	bne.n	8005a9e <u8g2_DrawHVLine+0xe4>
	  return;
 8005a68:	e02f      	b.n	8005aca <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005a70:	897b      	ldrh	r3, [r7, #10]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d824      	bhi.n	8005ac0 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8005a7c:	897b      	ldrh	r3, [r7, #10]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d920      	bls.n	8005ac4 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8005a8e:	1db9      	adds	r1, r7, #6
 8005a90:	f107 0008 	add.w	r0, r7, #8
 8005a94:	f7ff ff22 	bl	80058dc <u8g2_clip_intersection2>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d014      	beq.n	8005ac8 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa2:	689c      	ldr	r4, [r3, #8]
 8005aa4:	8979      	ldrh	r1, [r7, #10]
 8005aa6:	893a      	ldrh	r2, [r7, #8]
 8005aa8:	88f8      	ldrh	r0, [r7, #6]
 8005aaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	47a0      	blx	r4
 8005ab6:	e008      	b.n	8005aca <u8g2_DrawHVLine+0x110>
	  return;
 8005ab8:	bf00      	nop
 8005aba:	e006      	b.n	8005aca <u8g2_DrawHVLine+0x110>
	  return;
 8005abc:	bf00      	nop
 8005abe:	e004      	b.n	8005aca <u8g2_DrawHVLine+0x110>
	  return;
 8005ac0:	bf00      	nop
 8005ac2:	e002      	b.n	8005aca <u8g2_DrawHVLine+0x110>
	  return;
 8005ac4:	bf00      	nop
 8005ac6:	e000      	b.n	8005aca <u8g2_DrawHVLine+0x110>
	  return;
 8005ac8:	bf00      	nop
    }
}
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd90      	pop	{r4, r7, pc}

08005ad0 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8005ad0:	b490      	push	{r4, r7}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	4608      	mov	r0, r1
 8005ada:	4611      	mov	r1, r2
 8005adc:	461a      	mov	r2, r3
 8005ade:	4623      	mov	r3, r4
 8005ae0:	80fb      	strh	r3, [r7, #6]
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	80bb      	strh	r3, [r7, #4]
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	807b      	strh	r3, [r7, #2]
 8005aea:	4613      	mov	r3, r2
 8005aec:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8005aee:	887a      	ldrh	r2, [r7, #2]
 8005af0:	88bb      	ldrh	r3, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d20d      	bcs.n	8005b12 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8005af6:	883a      	ldrh	r2, [r7, #0]
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d901      	bls.n	8005b02 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e014      	b.n	8005b2c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8005b02:	887a      	ldrh	r2, [r7, #2]
 8005b04:	883b      	ldrh	r3, [r7, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d901      	bls.n	8005b0e <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e00e      	b.n	8005b2c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e00c      	b.n	8005b2c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8005b12:	883a      	ldrh	r2, [r7, #0]
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d907      	bls.n	8005b2a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8005b1a:	887a      	ldrh	r2, [r7, #2]
 8005b1c:	883b      	ldrh	r3, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d901      	bls.n	8005b26 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e002      	b.n	8005b2c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	e000      	b.n	8005b2c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8005b2a:	2300      	movs	r3, #0
    }
  }
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc90      	pop	{r4, r7}
 8005b34:	4770      	bx	lr

08005b36 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	4608      	mov	r0, r1
 8005b40:	4611      	mov	r1, r2
 8005b42:	461a      	mov	r2, r3
 8005b44:	4603      	mov	r3, r0
 8005b46:	817b      	strh	r3, [r7, #10]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	813b      	strh	r3, [r7, #8]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8b3 0064 	ldrh.w	r0, [r3, #100]	; 0x64
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
 8005b5c:	8b3b      	ldrh	r3, [r7, #24]
 8005b5e:	893a      	ldrh	r2, [r7, #8]
 8005b60:	f7ff ffb6 	bl	8005ad0 <u8g2_is_intersection_decision_tree>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <u8g2_IsIntersection+0x38>
    return 0; 
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e00a      	b.n	8005b84 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8b3 0060 	ldrh.w	r0, [r3, #96]	; 0x60
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8b3 1062 	ldrh.w	r1, [r3, #98]	; 0x62
 8005b7a:	88fb      	ldrh	r3, [r7, #6]
 8005b7c:	897a      	ldrh	r2, [r7, #10]
 8005b7e:	f7ff ffa7 	bl	8005ad0 <u8g2_is_intersection_decision_tree>
 8005b82:	4603      	mov	r3, r0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b089      	sub	sp, #36	; 0x24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	4608      	mov	r0, r1
 8005b96:	4611      	mov	r1, r2
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	817b      	strh	r3, [r7, #10]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	813b      	strh	r3, [r7, #8]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8005ba6:	893b      	ldrh	r3, [r7, #8]
 8005ba8:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005baa:	7efb      	ldrb	r3, [r7, #27]
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8005bb6:	7e3a      	ldrb	r2, [r7, #24]
 8005bb8:	7efb      	ldrb	r3, [r7, #27]
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d801      	bhi.n	8005bd6 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8005bd2:	7e3b      	ldrb	r3, [r7, #24]
 8005bd4:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d001      	beq.n	8005be4 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8005be0:	7e3b      	ldrb	r3, [r7, #24]
 8005be2:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8005be4:	893b      	ldrh	r3, [r7, #8]
 8005be6:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8005be8:	8afb      	ldrh	r3, [r7, #22]
 8005bea:	f023 0307 	bic.w	r3, r3, #7
 8005bee:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	7c1b      	ldrb	r3, [r3, #16]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	8afa      	ldrh	r2, [r7, #22]
 8005bfa:	fb02 f303 	mul.w	r3, r2, r3
 8005bfe:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c04:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8005c06:	8afb      	ldrh	r3, [r7, #22]
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8005c0e:	897b      	ldrh	r3, [r7, #10]
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8005c16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d117      	bne.n	8005c4e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	781a      	ldrb	r2, [r3, #0]
 8005c22:	7ebb      	ldrb	r3, [r7, #26]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	781a      	ldrb	r2, [r3, #0]
 8005c30:	7e7b      	ldrb	r3, [r7, #25]
 8005c32:	4053      	eors	r3, r2
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	701a      	strb	r2, [r3, #0]
	ptr++;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	61fb      	str	r3, [r7, #28]
	len--;
 8005c40:	88fb      	ldrh	r3, [r7, #6]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8005c46:	88fb      	ldrh	r3, [r7, #6]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e8      	bne.n	8005c1e <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8005c4c:	e039      	b.n	8005cc2 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	781a      	ldrb	r2, [r3, #0]
 8005c52:	7ebb      	ldrb	r3, [r7, #26]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	781a      	ldrb	r2, [r3, #0]
 8005c60:	7e7b      	ldrb	r3, [r7, #25]
 8005c62:	4053      	eors	r3, r2
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8005c6a:	7efb      	ldrb	r3, [r7, #27]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8005c70:	7efb      	ldrb	r3, [r7, #27]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	76fb      	strb	r3, [r7, #27]
      len--;
 8005c78:	88fb      	ldrh	r3, [r7, #6]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8005c7e:	7efb      	ldrb	r3, [r7, #27]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d115      	bne.n	8005cb0 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4413      	add	r3, r2
 8005c90:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d801      	bhi.n	8005ca0 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d008      	beq.n	8005cbc <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8005caa:	2301      	movs	r3, #1
 8005cac:	767b      	strb	r3, [r7, #25]
 8005cae:	e005      	b.n	8005cbc <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8005cb0:	7ebb      	ldrb	r3, [r7, #26]
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8005cb6:	7e7b      	ldrb	r3, [r7, #25]
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1c5      	bne.n	8005c4e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8005cc2:	bf00      	nop
 8005cc4:	3724      	adds	r7, #36	; 0x24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  u8g2->clip_y0 = 0;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cf4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  
  u8g2->cb->update_page_win(u8g2);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	4798      	blx	r3
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	4613      	mov	r3, r2
 8005d18:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	671a      	str	r2, [r3, #112]	; 0x70
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	645a      	str	r2, [r3, #68]	; 0x44
  
  u8g2->tile_buf_ptr = buf;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	64da      	str	r2, [r3, #76]	; 0x4c
  u8g2->tile_buf_height = tile_buf_height;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	79fa      	ldrb	r2, [r7, #7]
 8005d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  
  u8g2->tile_curr_row = 0;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  u8g2->bitmap_transparency = 0;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
  
  u8g2->draw_color = 1;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
  u8g2->is_auto_page_clear = 1;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
  
  u8g2->cb = u8g2_cb;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	649a      	str	r2, [r3, #72]	; 0x48
  u8g2->cb->update_dimension(u8g2);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f7ff ffad 	bl	8005ccc <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7ff fd8a 	bl	800588c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif
}
 8005d80:	bf00      	nop
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d9c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005d9e:	89fb      	ldrh	r3, [r7, #14]
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	89fa      	ldrh	r2, [r7, #14]
 8005da8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  
  t = display_info->tile_width;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	7c1b      	ldrb	r3, [r3, #16]
 8005db0:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8005db2:	89fb      	ldrh	r3, [r7, #14]
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	89fa      	ldrh	r2, [r7, #14]
 8005dbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  
  t = u8g2->tile_curr_row;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dc6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005dc8:	89fb      	ldrh	r3, [r7, #14]
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	89fa      	ldrh	r2, [r7, #14]
 8005dd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  t = u8g2->tile_buf_height;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ddc:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005dde:	89fb      	ldrh	r3, [r7, #14]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 8005de6:	4413      	add	r3, r2
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	7c52      	ldrb	r2, [r2, #17]
 8005dec:	4293      	cmp	r3, r2
 8005dee:	dd08      	ble.n	8005e02 <u8g2_update_dimension_common+0x7a>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	7c5b      	ldrb	r3, [r3, #17]
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005e02:	89fb      	ldrh	r3, [r7, #14]
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  u8g2->buf_y1 = u8g2->buf_y0;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  u8g2->buf_y1 += t;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
 8005e26:	89fb      	ldrh	r3, [r7, #14]
 8005e28:	4413      	add	r3, r2
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	8a9a      	ldrh	r2, [r3, #20]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  u8g2->height = display_info->pixel_height;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	8ada      	ldrh	r2, [r3, #22]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8005e46:	bf00      	nop
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr

08005e50 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	4603      	mov	r3, r0
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff fe5e 	bl	8005b36 <u8g2_IsIntersection>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d104      	bne.n	8005e8a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8005e88:	e03b      	b.n	8005f02 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d205      	bcs.n	8005eae <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d905      	bls.n	8005eca <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d205      	bcs.n	8005ee6 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d905      	bls.n	8005f02 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
}
 8005f02:	bf00      	nop
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff ff38 	bl	8005d88 <u8g2_update_dimension_common>
}
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  
  u8g2->user_y0 = u8g2->buf_y0;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->user_y1 = u8g2->buf_y1;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff ff7b 	bl	8005e50 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8005f5a:	bf00      	nop
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b086      	sub	sp, #24
 8005f66:	af02      	add	r7, sp, #8
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	4608      	mov	r0, r1
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	461a      	mov	r2, r3
 8005f70:	4603      	mov	r3, r0
 8005f72:	817b      	strh	r3, [r7, #10]
 8005f74:	460b      	mov	r3, r1
 8005f76:	813b      	strh	r3, [r7, #8]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8005f7c:	88f8      	ldrh	r0, [r7, #6]
 8005f7e:	893a      	ldrh	r2, [r7, #8]
 8005f80:	8979      	ldrh	r1, [r7, #10]
 8005f82:	7e3b      	ldrb	r3, [r7, #24]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	4603      	mov	r3, r0
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff fcf4 	bl	8005976 <u8g2_draw_hv_line_2dir>
}
 8005f8e:	bf00      	nop
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr

08005fb0 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <u8x8_ascii_next+0x18>
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	2b0a      	cmp	r3, #10
 8005fc6:	d102      	bne.n	8005fce <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8005fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fcc:	e001      	b.n	8005fd2 <u8x8_ascii_next+0x22>
  return b;
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	b29b      	uxth	r3, r3
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bc80      	pop	{r7}
 8005fda:	4770      	bx	lr

08005fdc <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8005fdc:	b590      	push	{r4, r7, lr}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691c      	ldr	r4, [r3, #16]
 8005fec:	78fa      	ldrb	r2, [r7, #3]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	2120      	movs	r1, #32
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	47a0      	blx	r4
 8005ff6:	4603      	mov	r3, r0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd90      	pop	{r4, r7, pc}

08006000 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8006000:	b590      	push	{r4, r7, lr}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	460b      	mov	r3, r1
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	691c      	ldr	r4, [r3, #16]
 8006012:	7afa      	ldrb	r2, [r7, #11]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2117      	movs	r1, #23
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	47a0      	blx	r4
 800601c:	4603      	mov	r3, r0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	bd90      	pop	{r4, r7, pc}

08006026 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8006032:	1cfb      	adds	r3, r7, #3
 8006034:	461a      	mov	r2, r3
 8006036:	2101      	movs	r1, #1
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff ffe1 	bl	8006000 <u8x8_byte_SendBytes>
 800603e:	4603      	mov	r3, r0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8006048:	b590      	push	{r4, r7, lr}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68dc      	ldr	r4, [r3, #12]
 8006058:	78fa      	ldrb	r2, [r7, #3]
 800605a:	2300      	movs	r3, #0
 800605c:	2115      	movs	r1, #21
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	47a0      	blx	r4
 8006062:	4603      	mov	r3, r0
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	bd90      	pop	{r4, r7, pc}

0800606c <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800606c:	b590      	push	{r4, r7, lr}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68dc      	ldr	r4, [r3, #12]
 800607c:	78fa      	ldrb	r2, [r7, #3]
 800607e:	2300      	movs	r3, #0
 8006080:	2116      	movs	r1, #22
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	47a0      	blx	r4
 8006086:	4603      	mov	r3, r0
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	bd90      	pop	{r4, r7, pc}

08006090 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8006090:	b590      	push	{r4, r7, lr}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	460b      	mov	r3, r1
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	68dc      	ldr	r4, [r3, #12]
 80060a2:	7afa      	ldrb	r2, [r7, #11]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2117      	movs	r1, #23
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	47a0      	blx	r4
 80060ac:	4603      	mov	r3, r0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd90      	pop	{r4, r7, pc}

080060b6 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80060b6:	b590      	push	{r4, r7, lr}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68dc      	ldr	r4, [r3, #12]
 80060c2:	2300      	movs	r3, #0
 80060c4:	2200      	movs	r2, #0
 80060c6:	2118      	movs	r1, #24
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	47a0      	blx	r4
 80060cc:	4603      	mov	r3, r0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd90      	pop	{r4, r7, pc}

080060d6 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80060d6:	b590      	push	{r4, r7, lr}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68dc      	ldr	r4, [r3, #12]
 80060e2:	2300      	movs	r3, #0
 80060e4:	2200      	movs	r2, #0
 80060e6:	2119      	movs	r1, #25
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	47a0      	blx	r4
 80060ec:	4603      	mov	r3, r0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd90      	pop	{r4, r7, pc}

080060f6 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80060f6:	b590      	push	{r4, r7, lr}
 80060f8:	b085      	sub	sp, #20
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	73fb      	strb	r3, [r7, #15]
    data++;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	3301      	adds	r3, #1
 800610a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	2bfe      	cmp	r3, #254	; 0xfe
 8006110:	d031      	beq.n	8006176 <u8x8_cad_SendSequence+0x80>
 8006112:	2bfe      	cmp	r3, #254	; 0xfe
 8006114:	dc3d      	bgt.n	8006192 <u8x8_cad_SendSequence+0x9c>
 8006116:	2b19      	cmp	r3, #25
 8006118:	dc3b      	bgt.n	8006192 <u8x8_cad_SendSequence+0x9c>
 800611a:	2b18      	cmp	r3, #24
 800611c:	da23      	bge.n	8006166 <u8x8_cad_SendSequence+0x70>
 800611e:	2b16      	cmp	r3, #22
 8006120:	dc02      	bgt.n	8006128 <u8x8_cad_SendSequence+0x32>
 8006122:	2b15      	cmp	r3, #21
 8006124:	da03      	bge.n	800612e <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8006126:	e034      	b.n	8006192 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8006128:	2b17      	cmp	r3, #23
 800612a:	d00e      	beq.n	800614a <u8x8_cad_SendSequence+0x54>
	return;
 800612c:	e031      	b.n	8006192 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68dc      	ldr	r4, [r3, #12]
 8006138:	7bba      	ldrb	r2, [r7, #14]
 800613a:	7bf9      	ldrb	r1, [r7, #15]
 800613c:	2300      	movs	r3, #0
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	47a0      	blx	r4
	  data++;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	3301      	adds	r3, #1
 8006146:	603b      	str	r3, [r7, #0]
	  break;
 8006148:	e022      	b.n	8006190 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8006150:	f107 030e 	add.w	r3, r7, #14
 8006154:	461a      	mov	r2, r3
 8006156:	2101      	movs	r1, #1
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff ff99 	bl	8006090 <u8x8_cad_SendData>
	  data++;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	3301      	adds	r3, #1
 8006162:	603b      	str	r3, [r7, #0]
	  break;
 8006164:	e014      	b.n	8006190 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68dc      	ldr	r4, [r3, #12]
 800616a:	7bf9      	ldrb	r1, [r7, #15]
 800616c:	2300      	movs	r3, #0
 800616e:	2200      	movs	r2, #0
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	47a0      	blx	r4
	  break;
 8006174:	e00c      	b.n	8006190 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	461a      	mov	r2, r3
 8006180:	2129      	movs	r1, #41	; 0x29
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa50 	bl	8006628 <u8x8_gpio_call>
	  data++;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	3301      	adds	r3, #1
 800618c:	603b      	str	r3, [r7, #0]
	  break;
 800618e:	bf00      	nop
    cmd = *data;
 8006190:	e7b6      	b.n	8006100 <u8x8_cad_SendSequence+0xa>
	return;
 8006192:	bf00      	nop
    }
  }
}
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	bd90      	pop	{r4, r7, pc}
	...

0800619c <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	607b      	str	r3, [r7, #4]
 80061a6:	460b      	mov	r3, r1
 80061a8:	72fb      	strb	r3, [r7, #11]
 80061aa:	4613      	mov	r3, r2
 80061ac:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80061ae:	7afb      	ldrb	r3, [r7, #11]
 80061b0:	3b14      	subs	r3, #20
 80061b2:	2b05      	cmp	r3, #5
 80061b4:	d82f      	bhi.n	8006216 <u8x8_cad_011+0x7a>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <u8x8_cad_011+0x20>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	08006205 	.word	0x08006205
 80061c0:	080061d5 	.word	0x080061d5
 80061c4:	080061e9 	.word	0x080061e9
 80061c8:	080061fd 	.word	0x080061fd
 80061cc:	08006205 	.word	0x08006205
 80061d0:	08006205 	.word	0x08006205
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80061d4:	2100      	movs	r1, #0
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff ff00 	bl	8005fdc <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80061dc:	7abb      	ldrb	r3, [r7, #10]
 80061de:	4619      	mov	r1, r3
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7ff ff20 	bl	8006026 <u8x8_byte_SendByte>
      break;
 80061e6:	e018      	b.n	800621a <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 80061e8:	2101      	movs	r1, #1
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f7ff fef6 	bl	8005fdc <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80061f0:	7abb      	ldrb	r3, [r7, #10]
 80061f2:	4619      	mov	r1, r3
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff ff16 	bl	8006026 <u8x8_byte_SendByte>
      break;
 80061fa:	e00e      	b.n	800621a <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80061fc:	2101      	movs	r1, #1
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7ff feec 	bl	8005fdc <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	691c      	ldr	r4, [r3, #16]
 8006208:	7aba      	ldrb	r2, [r7, #10]
 800620a:	7af9      	ldrb	r1, [r7, #11]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	47a0      	blx	r4
 8006212:	4603      	mov	r3, r0
 8006214:	e002      	b.n	800621c <u8x8_cad_011+0x80>
    default:
      return 0;
 8006216:	2300      	movs	r3, #0
 8006218:	e000      	b.n	800621c <u8x8_cad_011+0x80>
  }
  return 1;
 800621a:	2301      	movs	r3, #1
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	bd90      	pop	{r4, r7, pc}

08006224 <u8x8_ssd1322_8to32>:
*/

static uint8_t u8x8_ssd1322_to32_dest_buf[32];

static uint8_t *u8x8_ssd1322_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint8_t v;
  uint8_t a,b;
  uint8_t i, j;
  uint8_t *dest;
  
  for( j = 0; j < 4; j++ )
 800622e:	2300      	movs	r3, #0
 8006230:	74fb      	strb	r3, [r7, #19]
 8006232:	e03d      	b.n	80062b0 <u8x8_ssd1322_8to32+0x8c>
  {
    dest = u8x8_ssd1322_to32_dest_buf;
 8006234:	4b23      	ldr	r3, [pc, #140]	; (80062c4 <u8x8_ssd1322_8to32+0xa0>)
 8006236:	60fb      	str	r3, [r7, #12]
    dest += j;
 8006238:	7cfb      	ldrb	r3, [r7, #19]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
    a =*ptr;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	75bb      	strb	r3, [r7, #22]
    ptr++;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	3301      	adds	r3, #1
 800624a:	603b      	str	r3, [r7, #0]
    b = *ptr;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	757b      	strb	r3, [r7, #21]
    ptr++;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	3301      	adds	r3, #1
 8006256:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 8; i++ )
 8006258:	2300      	movs	r3, #0
 800625a:	753b      	strb	r3, [r7, #20]
 800625c:	e022      	b.n	80062a4 <u8x8_ssd1322_8to32+0x80>
    {
      v = 0;
 800625e:	2300      	movs	r3, #0
 8006260:	75fb      	strb	r3, [r7, #23]
      if ( a&1 ) v |= 0xf0;
 8006262:	7dbb      	ldrb	r3, [r7, #22]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <u8x8_ssd1322_8to32+0x50>
 800626c:	7dfb      	ldrb	r3, [r7, #23]
 800626e:	f063 030f 	orn	r3, r3, #15
 8006272:	75fb      	strb	r3, [r7, #23]
      if ( b&1 ) v |= 0x0f;
 8006274:	7d7b      	ldrb	r3, [r7, #21]
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <u8x8_ssd1322_8to32+0x62>
 800627e:	7dfb      	ldrb	r3, [r7, #23]
 8006280:	f043 030f 	orr.w	r3, r3, #15
 8006284:	75fb      	strb	r3, [r7, #23]
      *dest = v;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	7dfa      	ldrb	r2, [r7, #23]
 800628a:	701a      	strb	r2, [r3, #0]
      dest+=4;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3304      	adds	r3, #4
 8006290:	60fb      	str	r3, [r7, #12]
      a >>= 1;
 8006292:	7dbb      	ldrb	r3, [r7, #22]
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	75bb      	strb	r3, [r7, #22]
      b >>= 1;
 8006298:	7d7b      	ldrb	r3, [r7, #21]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	757b      	strb	r3, [r7, #21]
    for( i = 0; i < 8; i++ )
 800629e:	7d3b      	ldrb	r3, [r7, #20]
 80062a0:	3301      	adds	r3, #1
 80062a2:	753b      	strb	r3, [r7, #20]
 80062a4:	7d3b      	ldrb	r3, [r7, #20]
 80062a6:	2b07      	cmp	r3, #7
 80062a8:	d9d9      	bls.n	800625e <u8x8_ssd1322_8to32+0x3a>
  for( j = 0; j < 4; j++ )
 80062aa:	7cfb      	ldrb	r3, [r7, #19]
 80062ac:	3301      	adds	r3, #1
 80062ae:	74fb      	strb	r3, [r7, #19]
 80062b0:	7cfb      	ldrb	r3, [r7, #19]
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d9be      	bls.n	8006234 <u8x8_ssd1322_8to32+0x10>
    }
  }
  
  return u8x8_ssd1322_to32_dest_buf;
 80062b6:	4b03      	ldr	r3, [pc, #12]	; (80062c4 <u8x8_ssd1322_8to32+0xa0>)
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	bc80      	pop	{r7}
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	2000144c 	.word	0x2000144c

080062c8 <u8x8_d_ssd1322_common>:
  return u8x8_ssd1322_to32_dest_buf;
}


uint8_t u8x8_d_ssd1322_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	607b      	str	r3, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	72fb      	strb	r3, [r7, #11]
 80062d6:	4613      	mov	r3, r2
 80062d8:	72bb      	strb	r3, [r7, #10]
  uint8_t x; 
  uint8_t y, c;
  uint8_t *ptr;
  switch(msg)
 80062da:	7afb      	ldrb	r3, [r7, #11]
 80062dc:	2b0f      	cmp	r3, #15
 80062de:	d024      	beq.n	800632a <u8x8_d_ssd1322_common+0x62>
 80062e0:	2b0f      	cmp	r3, #15
 80062e2:	f300 8081 	bgt.w	80063e8 <u8x8_d_ssd1322_common+0x120>
 80062e6:	2b0b      	cmp	r3, #11
 80062e8:	d002      	beq.n	80062f0 <u8x8_d_ssd1322_common+0x28>
 80062ea:	2b0e      	cmp	r3, #14
 80062ec:	d00d      	beq.n	800630a <u8x8_d_ssd1322_common+0x42>
 80062ee:	e07b      	b.n	80063e8 <u8x8_d_ssd1322_common+0x120>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80062f0:	7abb      	ldrb	r3, [r7, #10]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d104      	bne.n	8006300 <u8x8_d_ssd1322_common+0x38>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave0_seq);
 80062f6:	4940      	ldr	r1, [pc, #256]	; (80063f8 <u8x8_d_ssd1322_common+0x130>)
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff fefc 	bl	80060f6 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
      break;
 80062fe:	e075      	b.n	80063ec <u8x8_d_ssd1322_common+0x124>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
 8006300:	493e      	ldr	r1, [pc, #248]	; (80063fc <u8x8_d_ssd1322_common+0x134>)
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7ff fef7 	bl	80060f6 <u8x8_cad_SendSequence>
      break;
 8006308:	e070      	b.n	80063ec <u8x8_d_ssd1322_common+0x124>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7ff fed3 	bl	80060b6 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x0C1 );
 8006310:	21c1      	movs	r1, #193	; 0xc1
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff fe98 	bl	8006048 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1322 has range from 0 to 255 */
 8006318:	7abb      	ldrb	r3, [r7, #10]
 800631a:	4619      	mov	r1, r3
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff fea5 	bl	800606c <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f7ff fed7 	bl	80060d6 <u8x8_cad_EndTransfer>
      break;
 8006328:	e060      	b.n	80063ec <u8x8_d_ssd1322_common+0x124>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f7ff fec3 	bl	80060b6 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	795b      	ldrb	r3, [r3, #5]
 8006334:	77fb      	strb	r3, [r7, #31]
      x *= 2;		// only every 4th col can be addressed
 8006336:	7ffb      	ldrb	r3, [r7, #31]
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	77fb      	strb	r3, [r7, #31]
      x += u8x8->x_offset;		
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006342:	7ffb      	ldrb	r3, [r7, #31]
 8006344:	4413      	add	r3, r2
 8006346:	77fb      	strb	r3, [r7, #31]
    
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	799b      	ldrb	r3, [r3, #6]
 800634c:	75fb      	strb	r3, [r7, #23]
      y *= 8;
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	75fb      	strb	r3, [r7, #23]
    
      
      u8x8_cad_SendCmd(u8x8, 0x075 );	/* set row address, moved out of the loop (issue 302) */
 8006354:	2175      	movs	r1, #117	; 0x75
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f7ff fe76 	bl	8006048 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, y);
 800635c:	7dfb      	ldrb	r3, [r7, #23]
 800635e:	4619      	mov	r1, r3
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff fe83 	bl	800606c <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, y+7);
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	3307      	adds	r3, #7
 800636a:	b2db      	uxtb	r3, r3
 800636c:	4619      	mov	r1, r3
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f7ff fe7c 	bl	800606c <u8x8_cad_SendArg>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	791b      	ldrb	r3, [r3, #4]
 8006378:	77bb      	strb	r3, [r7, #30]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	61bb      	str	r3, [r7, #24]

	do
	{
	  u8x8_cad_SendCmd(u8x8, 0x015 );	/* set column address */
 8006380:	2115      	movs	r1, #21
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff fe60 	bl	8006048 <u8x8_cad_SendCmd>
	  u8x8_cad_SendArg(u8x8, x );	/* start */
 8006388:	7ffb      	ldrb	r3, [r7, #31]
 800638a:	4619      	mov	r1, r3
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f7ff fe6d 	bl	800606c <u8x8_cad_SendArg>
	  u8x8_cad_SendArg(u8x8, x+1 );	/* end */
 8006392:	7ffb      	ldrb	r3, [r7, #31]
 8006394:	3301      	adds	r3, #1
 8006396:	b2db      	uxtb	r3, r3
 8006398:	4619      	mov	r1, r3
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f7ff fe66 	bl	800606c <u8x8_cad_SendArg>

	  u8x8_cad_SendCmd(u8x8, 0x05c );	/* write to ram */
 80063a0:	215c      	movs	r1, #92	; 0x5c
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f7ff fe50 	bl	8006048 <u8x8_cad_SendCmd>
	  
	  u8x8_cad_SendData(u8x8, 32, u8x8_ssd1322_8to32(u8x8, ptr));
 80063a8:	69b9      	ldr	r1, [r7, #24]
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff ff3a 	bl	8006224 <u8x8_ssd1322_8to32>
 80063b0:	4603      	mov	r3, r0
 80063b2:	461a      	mov	r2, r3
 80063b4:	2120      	movs	r1, #32
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff fe6a 	bl	8006090 <u8x8_cad_SendData>
	  
	  ptr += 8;
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	3308      	adds	r3, #8
 80063c0:	61bb      	str	r3, [r7, #24]
	  x += 2;
 80063c2:	7ffb      	ldrb	r3, [r7, #31]
 80063c4:	3302      	adds	r3, #2
 80063c6:	77fb      	strb	r3, [r7, #31]
	  c--;
 80063c8:	7fbb      	ldrb	r3, [r7, #30]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	77bb      	strb	r3, [r7, #30]
	} while( c > 0 );
 80063ce:	7fbb      	ldrb	r3, [r7, #30]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1d5      	bne.n	8006380 <u8x8_d_ssd1322_common+0xb8>
	
	//x += 2;
	arg_int--;
 80063d4:	7abb      	ldrb	r3, [r7, #10]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80063da:	7abb      	ldrb	r3, [r7, #10]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1c9      	bne.n	8006374 <u8x8_d_ssd1322_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7ff fe78 	bl	80060d6 <u8x8_cad_EndTransfer>
      break;
 80063e6:	e001      	b.n	80063ec <u8x8_d_ssd1322_common+0x124>
    default:
      return 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	e000      	b.n	80063ee <u8x8_d_ssd1322_common+0x126>
  }
  return 1;
 80063ec:	2301      	movs	r3, #1
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	08015088 	.word	0x08015088
 80063fc:	08015090 	.word	0x08015090

08006400 <u8x8_d_ssd1322_nhd_256x64>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1322_nhd_256x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	607b      	str	r3, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	72fb      	strb	r3, [r7, #11]
 800640e:	4613      	mov	r3, r2
 8006410:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8006412:	7afb      	ldrb	r3, [r7, #11]
 8006414:	2b0d      	cmp	r3, #13
 8006416:	d013      	beq.n	8006440 <u8x8_d_ssd1322_nhd_256x64+0x40>
 8006418:	2b0d      	cmp	r3, #13
 800641a:	dc2a      	bgt.n	8006472 <u8x8_d_ssd1322_nhd_256x64+0x72>
 800641c:	2b09      	cmp	r3, #9
 800641e:	d002      	beq.n	8006426 <u8x8_d_ssd1322_nhd_256x64+0x26>
 8006420:	2b0a      	cmp	r3, #10
 8006422:	d005      	beq.n	8006430 <u8x8_d_ssd1322_nhd_256x64+0x30>
 8006424:	e025      	b.n	8006472 <u8x8_d_ssd1322_nhd_256x64+0x72>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1322_256x64_display_info);
 8006426:	4919      	ldr	r1, [pc, #100]	; (800648c <u8x8_d_ssd1322_nhd_256x64+0x8c>)
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f837 	bl	800649c <u8x8_d_helper_display_setup_memory>
      break;
 800642e:	e028      	b.n	8006482 <u8x8_d_ssd1322_nhd_256x64+0x82>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f846 	bl	80064c2 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
 8006436:	4916      	ldr	r1, [pc, #88]	; (8006490 <u8x8_d_ssd1322_nhd_256x64+0x90>)
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff fe5c 	bl	80060f6 <u8x8_cad_SendSequence>
      break;
 800643e:	e020      	b.n	8006482 <u8x8_d_ssd1322_nhd_256x64+0x82>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8006440:	7abb      	ldrb	r3, [r7, #10]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10a      	bne.n	800645c <u8x8_d_ssd1322_nhd_256x64+0x5c>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip0_seq);
 8006446:	4913      	ldr	r1, [pc, #76]	; (8006494 <u8x8_d_ssd1322_nhd_256x64+0x94>)
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f7ff fe54 	bl	80060f6 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	7c9a      	ldrb	r2, [r3, #18]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800645a:	e012      	b.n	8006482 <u8x8_d_ssd1322_nhd_256x64+0x82>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip1_seq);
 800645c:	490e      	ldr	r1, [pc, #56]	; (8006498 <u8x8_d_ssd1322_nhd_256x64+0x98>)
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff fe49 	bl	80060f6 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	7cda      	ldrb	r2, [r3, #19]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8006470:	e007      	b.n	8006482 <u8x8_d_ssd1322_nhd_256x64+0x82>
    
    default:
      return u8x8_d_ssd1322_common(u8x8, msg, arg_int, arg_ptr);
 8006472:	7aba      	ldrb	r2, [r7, #10]
 8006474:	7af9      	ldrb	r1, [r7, #11]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f7ff ff25 	bl	80062c8 <u8x8_d_ssd1322_common>
 800647e:	4603      	mov	r3, r0
 8006480:	e000      	b.n	8006484 <u8x8_d_ssd1322_nhd_256x64+0x84>
  }
  return 1;
 8006482:	2301      	movs	r3, #1
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	080150b0 	.word	0x080150b0
 8006490:	080150c8 	.word	0x080150c8
 8006494:	08015098 	.word	0x08015098
 8006498:	080150a4 	.word	0x080150a4

0800649c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	7c9a      	ldrb	r2, [r3, #18]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr

080064c2 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80064c2:	b590      	push	{r4, r7, lr}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695c      	ldr	r4, [r3, #20]
 80064ce:	2300      	movs	r3, #0
 80064d0:	2200      	movs	r2, #0
 80064d2:	2128      	movs	r1, #40	; 0x28
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68dc      	ldr	r4, [r3, #12]
 80064dc:	2300      	movs	r3, #0
 80064de:	2200      	movs	r2, #0
 80064e0:	2114      	movs	r1, #20
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80064e6:	2201      	movs	r2, #1
 80064e8:	214b      	movs	r1, #75	; 0x4b
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f89c 	bl	8006628 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	791b      	ldrb	r3, [r3, #4]
 80064f6:	461a      	mov	r2, r3
 80064f8:	2129      	movs	r1, #41	; 0x29
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f894 	bl	8006628 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8006500:	2200      	movs	r2, #0
 8006502:	214b      	movs	r1, #75	; 0x4b
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f88f 	bl	8006628 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	791b      	ldrb	r3, [r3, #4]
 8006510:	461a      	mov	r2, r3
 8006512:	2129      	movs	r1, #41	; 0x29
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f887 	bl	8006628 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800651a:	2201      	movs	r2, #1
 800651c:	214b      	movs	r1, #75	; 0x4b
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f882 	bl	8006628 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	795b      	ldrb	r3, [r3, #5]
 800652a:	461a      	mov	r2, r3
 800652c:	2129      	movs	r1, #41	; 0x29
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f87a 	bl	8006628 <u8x8_gpio_call>
}    
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	bd90      	pop	{r4, r7, pc}

0800653c <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800653c:	b590      	push	{r4, r7, lr}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	4608      	mov	r0, r1
 8006546:	4611      	mov	r1, r2
 8006548:	461a      	mov	r2, r3
 800654a:	4603      	mov	r3, r0
 800654c:	70fb      	strb	r3, [r7, #3]
 800654e:	460b      	mov	r3, r1
 8006550:	70bb      	strb	r3, [r7, #2]
 8006552:	4613      	mov	r3, r2
 8006554:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800655a:	78bb      	ldrb	r3, [r7, #2]
 800655c:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800655e:	787b      	ldrb	r3, [r7, #1]
 8006560:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689c      	ldr	r4, [r3, #8]
 800656a:	f107 0308 	add.w	r3, r7, #8
 800656e:	2201      	movs	r2, #1
 8006570:	210f      	movs	r1, #15
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	47a0      	blx	r4
 8006576:	4603      	mov	r3, r0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	bd90      	pop	{r4, r7, pc}

08006580 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8006580:	b590      	push	{r4, r7, lr}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689c      	ldr	r4, [r3, #8]
 800658c:	2300      	movs	r3, #0
 800658e:	2200      	movs	r2, #0
 8006590:	2109      	movs	r1, #9
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	47a0      	blx	r4
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	bd90      	pop	{r4, r7, pc}

0800659e <u8x8_InitInterface>:

  u8x8_InitInterface() is an alternative function to u8x8_InitDisplay(). Do not call both.
  
*/
void u8x8_InitInterface(u8x8_t *u8x8)
{
 800659e:	b590      	push	{r4, r7, lr}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  u8x8_gpio_Init(u8x8);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695c      	ldr	r4, [r3, #20]
 80065aa:	2300      	movs	r3, #0
 80065ac:	2200      	movs	r2, #0
 80065ae:	2128      	movs	r1, #40	; 0x28
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	47a0      	blx	r4
  u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68dc      	ldr	r4, [r3, #12]
 80065b8:	2300      	movs	r3, #0
 80065ba:	2200      	movs	r2, #0
 80065bc:	2114      	movs	r1, #20
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	47a0      	blx	r4
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd90      	pop	{r4, r7, pc}

080065ca <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80065ca:	b590      	push	{r4, r7, lr}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689c      	ldr	r4, [r3, #8]
 80065d6:	2300      	movs	r3, #0
 80065d8:	2200      	movs	r2, #0
 80065da:	210a      	movs	r1, #10
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	47a0      	blx	r4
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd90      	pop	{r4, r7, pc}

080065e8 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80065e8:	b590      	push	{r4, r7, lr}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689c      	ldr	r4, [r3, #8]
 80065f8:	78fa      	ldrb	r2, [r7, #3]
 80065fa:	2300      	movs	r3, #0
 80065fc:	210b      	movs	r1, #11
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	47a0      	blx	r4
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	bd90      	pop	{r4, r7, pc}

0800660a <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800660a:	b590      	push	{r4, r7, lr}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689c      	ldr	r4, [r3, #8]
 8006616:	2300      	movs	r3, #0
 8006618:	2200      	movs	r2, #0
 800661a:	2110      	movs	r1, #16
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	47a0      	blx	r4
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	bd90      	pop	{r4, r7, pc}

08006628 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8006628:	b590      	push	{r4, r7, lr}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	70fb      	strb	r3, [r7, #3]
 8006634:	4613      	mov	r3, r2
 8006636:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	695c      	ldr	r4, [r3, #20]
 800663c:	78ba      	ldrb	r2, [r7, #2]
 800663e:	78f9      	ldrb	r1, [r7, #3]
 8006640:	2300      	movs	r3, #0
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	47a0      	blx	r4
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	bd90      	pop	{r4, r7, pc}

0800664e <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	607b      	str	r3, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	72fb      	strb	r3, [r7, #11]
 800665c:	4613      	mov	r3, r2
 800665e:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr

0800666c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a19      	ldr	r2, [pc, #100]	; (80066e4 <u8x8_SetupDefaults+0x78>)
 800667e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <u8x8_SetupDefaults+0x78>)
 8006684:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a16      	ldr	r2, [pc, #88]	; (80066e4 <u8x8_SetupDefaults+0x78>)
 800668a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a15      	ldr	r2, [pc, #84]	; (80066e4 <u8x8_SetupDefaults+0x78>)
 8006690:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	22ff      	movs	r2, #255	; 0xff
 80066ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	22ff      	movs	r2, #255	; 0xff
 80066b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
#ifdef U8X8_USE_PINS 
  {
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
 80066bc:	e008      	b.n	80066d0 <u8x8_SetupDefaults+0x64>
      u8x8->pins[i] = U8X8_PIN_NONE;
 80066be:	7bfb      	ldrb	r3, [r7, #15]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	4413      	add	r3, r2
 80066c4:	22ff      	movs	r2, #255	; 0xff
 80066c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    for( i = 0; i < U8X8_PIN_CNT; i++ )
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	3301      	adds	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b15      	cmp	r3, #21
 80066d4:	d9f3      	bls.n	80066be <u8x8_SetupDefaults+0x52>
  }
#endif
}
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	0800664f 	.word	0x0800664f

080066e8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff ffb8 	bl	800666c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f7ff ff33 	bl	8006580 <u8x8_SetupMemory>
}
 800671a:	bf00      	nop
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006724:	480c      	ldr	r0, [pc, #48]	; (8006758 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006726:	490d      	ldr	r1, [pc, #52]	; (800675c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006728:	4a0d      	ldr	r2, [pc, #52]	; (8006760 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800672a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800672c:	e002      	b.n	8006734 <LoopCopyDataInit>

0800672e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800672e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006732:	3304      	adds	r3, #4

08006734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006738:	d3f9      	bcc.n	800672e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800673a:	4a0a      	ldr	r2, [pc, #40]	; (8006764 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800673c:	4c0a      	ldr	r4, [pc, #40]	; (8006768 <LoopFillZerobss+0x22>)
  movs r3, #0
 800673e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006740:	e001      	b.n	8006746 <LoopFillZerobss>

08006742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006744:	3204      	adds	r2, #4

08006746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006748:	d3fb      	bcc.n	8006742 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800674a:	f7fd ff8f 	bl	800466c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800674e:	f00c ff1f 	bl	8013590 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006752:	f7fc ff3f 	bl	80035d4 <main>
  bx lr
 8006756:	4770      	bx	lr
  ldr r0, =_sdata
 8006758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800675c:	200009e8 	.word	0x200009e8
  ldr r2, =_sidata
 8006760:	08015908 	.word	0x08015908
  ldr r2, =_sbss
 8006764:	200009e8 	.word	0x200009e8
  ldr r4, =_ebss
 8006768:	200026a4 	.word	0x200026a4

0800676c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800676c:	e7fe      	b.n	800676c <ADC1_2_IRQHandler>
	...

08006770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006774:	4b08      	ldr	r3, [pc, #32]	; (8006798 <HAL_Init+0x28>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a07      	ldr	r2, [pc, #28]	; (8006798 <HAL_Init+0x28>)
 800677a:	f043 0310 	orr.w	r3, r3, #16
 800677e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006780:	2003      	movs	r0, #3
 8006782:	f000 fdbf 	bl	8007304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006786:	200f      	movs	r0, #15
 8006788:	f000 f808 	bl	800679c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800678c:	f7fd fcac 	bl	80040e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	40022000 	.word	0x40022000

0800679c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067a4:	4b12      	ldr	r3, [pc, #72]	; (80067f0 <HAL_InitTick+0x54>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	4b12      	ldr	r3, [pc, #72]	; (80067f4 <HAL_InitTick+0x58>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	4619      	mov	r1, r3
 80067ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80067b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fdd7 	bl	800736e <HAL_SYSTICK_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e00e      	b.n	80067e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b0f      	cmp	r3, #15
 80067ce:	d80a      	bhi.n	80067e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067d0:	2200      	movs	r2, #0
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067d8:	f000 fd9f 	bl	800731a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067dc:	4a06      	ldr	r2, [pc, #24]	; (80067f8 <HAL_InitTick+0x5c>)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e000      	b.n	80067e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20000800 	.word	0x20000800
 80067f4:	20000808 	.word	0x20000808
 80067f8:	20000804 	.word	0x20000804

080067fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006800:	4b05      	ldr	r3, [pc, #20]	; (8006818 <HAL_IncTick+0x1c>)
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	4b05      	ldr	r3, [pc, #20]	; (800681c <HAL_IncTick+0x20>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4413      	add	r3, r2
 800680c:	4a03      	ldr	r2, [pc, #12]	; (800681c <HAL_IncTick+0x20>)
 800680e:	6013      	str	r3, [r2, #0]
}
 8006810:	bf00      	nop
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr
 8006818:	20000808 	.word	0x20000808
 800681c:	2000146c 	.word	0x2000146c

08006820 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  return uwTick;
 8006824:	4b02      	ldr	r3, [pc, #8]	; (8006830 <HAL_GetTick+0x10>)
 8006826:	681b      	ldr	r3, [r3, #0]
}
 8006828:	4618      	mov	r0, r3
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr
 8006830:	2000146c 	.word	0x2000146c

08006834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800683c:	f7ff fff0 	bl	8006820 <HAL_GetTick>
 8006840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800684c:	d005      	beq.n	800685a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800684e:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <HAL_Delay+0x44>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800685a:	bf00      	nop
 800685c:	f7ff ffe0 	bl	8006820 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	429a      	cmp	r2, r3
 800686a:	d8f7      	bhi.n	800685c <HAL_Delay+0x28>
  {
  }
}
 800686c:	bf00      	nop
 800686e:	bf00      	nop
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000808 	.word	0x20000808

0800687c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e0be      	b.n	8006a1c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d109      	bne.n	80068c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fd fc46 	bl	800414c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 faff 	bl	8006ec4 <ADC_ConversionStop_Disable>
 80068c6:	4603      	mov	r3, r0
 80068c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	f003 0310 	and.w	r3, r3, #16
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f040 8099 	bne.w	8006a0a <HAL_ADC_Init+0x18e>
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f040 8095 	bne.w	8006a0a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068e8:	f023 0302 	bic.w	r3, r3, #2
 80068ec:	f043 0202 	orr.w	r2, r3, #2
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80068fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	7b1b      	ldrb	r3, [r3, #12]
 8006902:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006904:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	4313      	orrs	r3, r2
 800690a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006914:	d003      	beq.n	800691e <HAL_ADC_Init+0xa2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d102      	bne.n	8006924 <HAL_ADC_Init+0xa8>
 800691e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006922:	e000      	b.n	8006926 <HAL_ADC_Init+0xaa>
 8006924:	2300      	movs	r3, #0
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	7d1b      	ldrb	r3, [r3, #20]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d119      	bne.n	8006968 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	7b1b      	ldrb	r3, [r3, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d109      	bne.n	8006950 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	3b01      	subs	r3, #1
 8006942:	035a      	lsls	r2, r3, #13
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	e00b      	b.n	8006968 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	f043 0220 	orr.w	r2, r3, #32
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	f043 0201 	orr.w	r2, r3, #1
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689a      	ldr	r2, [r3, #8]
 8006982:	4b28      	ldr	r3, [pc, #160]	; (8006a24 <HAL_ADC_Init+0x1a8>)
 8006984:	4013      	ands	r3, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6812      	ldr	r2, [r2, #0]
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	430b      	orrs	r3, r1
 800698e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006998:	d003      	beq.n	80069a2 <HAL_ADC_Init+0x126>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d104      	bne.n	80069ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	051b      	lsls	r3, r3, #20
 80069aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	430a      	orrs	r2, r1
 80069be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	4b18      	ldr	r3, [pc, #96]	; (8006a28 <HAL_ADC_Init+0x1ac>)
 80069c8:	4013      	ands	r3, r2
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d10b      	bne.n	80069e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069da:	f023 0303 	bic.w	r3, r3, #3
 80069de:	f043 0201 	orr.w	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80069e6:	e018      	b.n	8006a1a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	f023 0312 	bic.w	r3, r3, #18
 80069f0:	f043 0210 	orr.w	r2, r3, #16
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	f043 0201 	orr.w	r2, r3, #1
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006a08:	e007      	b.n	8006a1a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0e:	f043 0210 	orr.w	r2, r3, #16
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	ffe1f7fd 	.word	0xffe1f7fd
 8006a28:	ff1f0efe 	.word	0xff1f0efe

08006a2c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a64      	ldr	r2, [pc, #400]	; (8006bd4 <HAL_ADC_Start_DMA+0x1a8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_ADC_Start_DMA+0x24>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a63      	ldr	r2, [pc, #396]	; (8006bd8 <HAL_ADC_Start_DMA+0x1ac>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d106      	bne.n	8006a5e <HAL_ADC_Start_DMA+0x32>
 8006a50:	4b60      	ldr	r3, [pc, #384]	; (8006bd4 <HAL_ADC_Start_DMA+0x1a8>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f040 80b3 	bne.w	8006bc4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_ADC_Start_DMA+0x40>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e0ae      	b.n	8006bca <HAL_ADC_Start_DMA+0x19e>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f9cb 	bl	8006e10 <ADC_Enable>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f040 809a 	bne.w	8006bba <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a8e:	f023 0301 	bic.w	r3, r3, #1
 8006a92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a4e      	ldr	r2, [pc, #312]	; (8006bd8 <HAL_ADC_Start_DMA+0x1ac>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d105      	bne.n	8006ab0 <HAL_ADC_Start_DMA+0x84>
 8006aa4:	4b4b      	ldr	r3, [pc, #300]	; (8006bd4 <HAL_ADC_Start_DMA+0x1a8>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d115      	bne.n	8006adc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d026      	beq.n	8006b18 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006ad2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006ada:	e01d      	b.n	8006b18 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a39      	ldr	r2, [pc, #228]	; (8006bd4 <HAL_ADC_Start_DMA+0x1a8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d004      	beq.n	8006afc <HAL_ADC_Start_DMA+0xd0>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a38      	ldr	r2, [pc, #224]	; (8006bd8 <HAL_ADC_Start_DMA+0x1ac>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d10d      	bne.n	8006b18 <HAL_ADC_Start_DMA+0xec>
 8006afc:	4b35      	ldr	r3, [pc, #212]	; (8006bd4 <HAL_ADC_Start_DMA+0x1a8>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d007      	beq.n	8006b18 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d006      	beq.n	8006b32 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	f023 0206 	bic.w	r2, r3, #6
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b30:	e002      	b.n	8006b38 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	4a25      	ldr	r2, [pc, #148]	; (8006bdc <HAL_ADC_Start_DMA+0x1b0>)
 8006b46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	4a24      	ldr	r2, [pc, #144]	; (8006be0 <HAL_ADC_Start_DMA+0x1b4>)
 8006b4e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	4a23      	ldr	r2, [pc, #140]	; (8006be4 <HAL_ADC_Start_DMA+0x1b8>)
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0202 	mvn.w	r2, #2
 8006b60:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b70:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a18      	ldr	r0, [r3, #32]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	334c      	adds	r3, #76	; 0x4c
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f000 fc5b 	bl	800743c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006b90:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006b94:	d108      	bne.n	8006ba8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006ba4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8006ba6:	e00f      	b.n	8006bc8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006bb6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8006bb8:	e006      	b.n	8006bc8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8006bc2:	e001      	b.n	8006bc8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40012400 	.word	0x40012400
 8006bd8:	40012800 	.word	0x40012800
 8006bdc:	08006f47 	.word	0x08006f47
 8006be0:	08006fc3 	.word	0x08006fc3
 8006be4:	08006fdf 	.word	0x08006fdf

08006be8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr

08006bfa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bc80      	pop	{r7}
 8006c1c:	4770      	bx	lr
	...

08006c20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_ADC_ConfigChannel+0x20>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e0dc      	b.n	8006dfa <HAL_ADC_ConfigChannel+0x1da>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2b06      	cmp	r3, #6
 8006c4e:	d81c      	bhi.n	8006c8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	3b05      	subs	r3, #5
 8006c62:	221f      	movs	r2, #31
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	4019      	ands	r1, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	6818      	ldr	r0, [r3, #0]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	3b05      	subs	r3, #5
 8006c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	635a      	str	r2, [r3, #52]	; 0x34
 8006c88:	e03c      	b.n	8006d04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2b0c      	cmp	r3, #12
 8006c90:	d81c      	bhi.n	8006ccc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	3b23      	subs	r3, #35	; 0x23
 8006ca4:	221f      	movs	r2, #31
 8006ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8006caa:	43db      	mvns	r3, r3
 8006cac:	4019      	ands	r1, r3
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	3b23      	subs	r3, #35	; 0x23
 8006cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8006cca:	e01b      	b.n	8006d04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	3b41      	subs	r3, #65	; 0x41
 8006cde:	221f      	movs	r2, #31
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	43db      	mvns	r3, r3
 8006ce6:	4019      	ands	r1, r3
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	3b41      	subs	r3, #65	; 0x41
 8006cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b09      	cmp	r3, #9
 8006d0a:	d91c      	bls.n	8006d46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68d9      	ldr	r1, [r3, #12]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	4613      	mov	r3, r2
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	4413      	add	r3, r2
 8006d1c:	3b1e      	subs	r3, #30
 8006d1e:	2207      	movs	r2, #7
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	43db      	mvns	r3, r3
 8006d26:	4019      	ands	r1, r3
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	6898      	ldr	r0, [r3, #8]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	4613      	mov	r3, r2
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	4413      	add	r3, r2
 8006d36:	3b1e      	subs	r3, #30
 8006d38:	fa00 f203 	lsl.w	r2, r0, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	60da      	str	r2, [r3, #12]
 8006d44:	e019      	b.n	8006d7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6919      	ldr	r1, [r3, #16]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4613      	mov	r3, r2
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	4413      	add	r3, r2
 8006d56:	2207      	movs	r2, #7
 8006d58:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	4019      	ands	r1, r3
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	6898      	ldr	r0, [r3, #8]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	4413      	add	r3, r2
 8006d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b10      	cmp	r3, #16
 8006d80:	d003      	beq.n	8006d8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006d86:	2b11      	cmp	r3, #17
 8006d88:	d132      	bne.n	8006df0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a1d      	ldr	r2, [pc, #116]	; (8006e04 <HAL_ADC_ConfigChannel+0x1e4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d125      	bne.n	8006de0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d126      	bne.n	8006df0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006db0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b10      	cmp	r3, #16
 8006db8:	d11a      	bne.n	8006df0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006dba:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <HAL_ADC_ConfigChannel+0x1e8>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a13      	ldr	r2, [pc, #76]	; (8006e0c <HAL_ADC_ConfigChannel+0x1ec>)
 8006dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc4:	0c9a      	lsrs	r2, r3, #18
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006dd0:	e002      	b.n	8006dd8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1f9      	bne.n	8006dd2 <HAL_ADC_ConfigChannel+0x1b2>
 8006dde:	e007      	b.n	8006df0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	f043 0220 	orr.w	r2, r3, #32
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr
 8006e04:	40012400 	.word	0x40012400
 8006e08:	20000800 	.word	0x20000800
 8006e0c:	431bde83 	.word	0x431bde83

08006e10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d040      	beq.n	8006eb0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0201 	orr.w	r2, r2, #1
 8006e3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006e3e:	4b1f      	ldr	r3, [pc, #124]	; (8006ebc <ADC_Enable+0xac>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a1f      	ldr	r2, [pc, #124]	; (8006ec0 <ADC_Enable+0xb0>)
 8006e44:	fba2 2303 	umull	r2, r3, r2, r3
 8006e48:	0c9b      	lsrs	r3, r3, #18
 8006e4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006e4c:	e002      	b.n	8006e54 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1f9      	bne.n	8006e4e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006e5a:	f7ff fce1 	bl	8006820 <HAL_GetTick>
 8006e5e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006e60:	e01f      	b.n	8006ea2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006e62:	f7ff fcdd 	bl	8006820 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d918      	bls.n	8006ea2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d011      	beq.n	8006ea2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e82:	f043 0210 	orr.w	r2, r3, #16
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	f043 0201 	orr.w	r2, r3, #1
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e007      	b.n	8006eb2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d1d8      	bne.n	8006e62 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000800 	.word	0x20000800
 8006ec0:	431bde83 	.word	0x431bde83

08006ec4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d12e      	bne.n	8006f3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0201 	bic.w	r2, r2, #1
 8006eec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006eee:	f7ff fc97 	bl	8006820 <HAL_GetTick>
 8006ef2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006ef4:	e01b      	b.n	8006f2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006ef6:	f7ff fc93 	bl	8006820 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d914      	bls.n	8006f2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d10d      	bne.n	8006f2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	f043 0210 	orr.w	r2, r3, #16
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	f043 0201 	orr.w	r2, r3, #1
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e007      	b.n	8006f3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d0dc      	beq.n	8006ef6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d127      	bne.n	8006fb0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006f76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006f7a:	d115      	bne.n	8006fa8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d111      	bne.n	8006fa8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d105      	bne.n	8006fa8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa0:	f043 0201 	orr.w	r2, r3, #1
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f7ff fe1d 	bl	8006be8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006fae:	e004      	b.n	8006fba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	4798      	blx	r3
}
 8006fba:	bf00      	nop
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7ff fe12 	bl	8006bfa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006fd6:	bf00      	nop
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	f043 0204 	orr.w	r2, r3, #4
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff fe01 	bl	8006c0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8007014:	b590      	push	{r4, r7, lr}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800702a:	2b01      	cmp	r3, #1
 800702c:	d101      	bne.n	8007032 <HAL_ADCEx_Calibration_Start+0x1e>
 800702e:	2302      	movs	r3, #2
 8007030:	e095      	b.n	800715e <HAL_ADCEx_Calibration_Start+0x14a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff ff42 	bl	8006ec4 <ADC_ConversionStop_Disable>
 8007040:	4603      	mov	r3, r0
 8007042:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f040 8084 	bne.w	8007154 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007054:	f023 0302 	bic.w	r3, r3, #2
 8007058:	f043 0202 	orr.w	r2, r3, #2
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8007060:	4b41      	ldr	r3, [pc, #260]	; (8007168 <HAL_ADCEx_Calibration_Start+0x154>)
 8007062:	681c      	ldr	r4, [r3, #0]
 8007064:	2002      	movs	r0, #2
 8007066:	f004 fbef 	bl	800b848 <HAL_RCCEx_GetPeriphCLKFreq>
 800706a:	4603      	mov	r3, r0
 800706c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8007070:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8007072:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8007074:	e002      	b.n	800707c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3b01      	subs	r3, #1
 800707a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f9      	bne.n	8007076 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff fec4 	bl	8006e10 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689a      	ldr	r2, [r3, #8]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0208 	orr.w	r2, r2, #8
 8007096:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8007098:	f7ff fbc2 	bl	8006820 <HAL_GetTick>
 800709c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800709e:	e01b      	b.n	80070d8 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80070a0:	f7ff fbbe 	bl	8006820 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b0a      	cmp	r3, #10
 80070ac:	d914      	bls.n	80070d8 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 0308 	and.w	r3, r3, #8
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00d      	beq.n	80070d8 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c0:	f023 0312 	bic.w	r3, r3, #18
 80070c4:	f043 0210 	orr.w	r2, r3, #16
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e042      	b.n	800715e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1dc      	bne.n	80070a0 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0204 	orr.w	r2, r2, #4
 80070f4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80070f6:	f7ff fb93 	bl	8006820 <HAL_GetTick>
 80070fa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80070fc:	e01b      	b.n	8007136 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80070fe:	f7ff fb8f 	bl	8006820 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b0a      	cmp	r3, #10
 800710a:	d914      	bls.n	8007136 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00d      	beq.n	8007136 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	f023 0312 	bic.w	r3, r3, #18
 8007122:	f043 0210 	orr.w	r2, r3, #16
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e013      	b.n	800715e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1dc      	bne.n	80070fe <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007148:	f023 0303 	bic.w	r3, r3, #3
 800714c:	f043 0201 	orr.w	r2, r3, #1
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800715c:	7dfb      	ldrb	r3, [r7, #23]
}
 800715e:	4618      	mov	r0, r3
 8007160:	371c      	adds	r7, #28
 8007162:	46bd      	mov	sp, r7
 8007164:	bd90      	pop	{r4, r7, pc}
 8007166:	bf00      	nop
 8007168:	20000800 	.word	0x20000800

0800716c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f003 0307 	and.w	r3, r3, #7
 800717a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800717c:	4b0c      	ldr	r3, [pc, #48]	; (80071b0 <__NVIC_SetPriorityGrouping+0x44>)
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007188:	4013      	ands	r3, r2
 800718a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800719c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800719e:	4a04      	ldr	r2, [pc, #16]	; (80071b0 <__NVIC_SetPriorityGrouping+0x44>)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	60d3      	str	r3, [r2, #12]
}
 80071a4:	bf00      	nop
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	e000ed00 	.word	0xe000ed00

080071b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071b4:	b480      	push	{r7}
 80071b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071b8:	4b04      	ldr	r3, [pc, #16]	; (80071cc <__NVIC_GetPriorityGrouping+0x18>)
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	0a1b      	lsrs	r3, r3, #8
 80071be:	f003 0307 	and.w	r3, r3, #7
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bc80      	pop	{r7}
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	e000ed00 	.word	0xe000ed00

080071d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	db0b      	blt.n	80071fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	f003 021f 	and.w	r2, r3, #31
 80071e8:	4906      	ldr	r1, [pc, #24]	; (8007204 <__NVIC_EnableIRQ+0x34>)
 80071ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ee:	095b      	lsrs	r3, r3, #5
 80071f0:	2001      	movs	r0, #1
 80071f2:	fa00 f202 	lsl.w	r2, r0, r2
 80071f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	bc80      	pop	{r7}
 8007202:	4770      	bx	lr
 8007204:	e000e100 	.word	0xe000e100

08007208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	4603      	mov	r3, r0
 8007210:	6039      	str	r1, [r7, #0]
 8007212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007218:	2b00      	cmp	r3, #0
 800721a:	db0a      	blt.n	8007232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	b2da      	uxtb	r2, r3
 8007220:	490c      	ldr	r1, [pc, #48]	; (8007254 <__NVIC_SetPriority+0x4c>)
 8007222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007226:	0112      	lsls	r2, r2, #4
 8007228:	b2d2      	uxtb	r2, r2
 800722a:	440b      	add	r3, r1
 800722c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007230:	e00a      	b.n	8007248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	b2da      	uxtb	r2, r3
 8007236:	4908      	ldr	r1, [pc, #32]	; (8007258 <__NVIC_SetPriority+0x50>)
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	3b04      	subs	r3, #4
 8007240:	0112      	lsls	r2, r2, #4
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	440b      	add	r3, r1
 8007246:	761a      	strb	r2, [r3, #24]
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	e000e100 	.word	0xe000e100
 8007258:	e000ed00 	.word	0xe000ed00

0800725c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	; 0x24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	f1c3 0307 	rsb	r3, r3, #7
 8007276:	2b04      	cmp	r3, #4
 8007278:	bf28      	it	cs
 800727a:	2304      	movcs	r3, #4
 800727c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	3304      	adds	r3, #4
 8007282:	2b06      	cmp	r3, #6
 8007284:	d902      	bls.n	800728c <NVIC_EncodePriority+0x30>
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	3b03      	subs	r3, #3
 800728a:	e000      	b.n	800728e <NVIC_EncodePriority+0x32>
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	fa02 f303 	lsl.w	r3, r2, r3
 800729a:	43da      	mvns	r2, r3
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	401a      	ands	r2, r3
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	fa01 f303 	lsl.w	r3, r1, r3
 80072ae:	43d9      	mvns	r1, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072b4:	4313      	orrs	r3, r2
         );
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3724      	adds	r7, #36	; 0x24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bc80      	pop	{r7}
 80072be:	4770      	bx	lr

080072c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072d0:	d301      	bcc.n	80072d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072d2:	2301      	movs	r3, #1
 80072d4:	e00f      	b.n	80072f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072d6:	4a0a      	ldr	r2, [pc, #40]	; (8007300 <SysTick_Config+0x40>)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3b01      	subs	r3, #1
 80072dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072de:	210f      	movs	r1, #15
 80072e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072e4:	f7ff ff90 	bl	8007208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072e8:	4b05      	ldr	r3, [pc, #20]	; (8007300 <SysTick_Config+0x40>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072ee:	4b04      	ldr	r3, [pc, #16]	; (8007300 <SysTick_Config+0x40>)
 80072f0:	2207      	movs	r2, #7
 80072f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	e000e010 	.word	0xe000e010

08007304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff ff2d 	bl	800716c <__NVIC_SetPriorityGrouping>
}
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800731a:	b580      	push	{r7, lr}
 800731c:	b086      	sub	sp, #24
 800731e:	af00      	add	r7, sp, #0
 8007320:	4603      	mov	r3, r0
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	607a      	str	r2, [r7, #4]
 8007326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007328:	2300      	movs	r3, #0
 800732a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800732c:	f7ff ff42 	bl	80071b4 <__NVIC_GetPriorityGrouping>
 8007330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	6978      	ldr	r0, [r7, #20]
 8007338:	f7ff ff90 	bl	800725c <NVIC_EncodePriority>
 800733c:	4602      	mov	r2, r0
 800733e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007342:	4611      	mov	r1, r2
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff ff5f 	bl	8007208 <__NVIC_SetPriority>
}
 800734a:	bf00      	nop
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	4603      	mov	r3, r0
 800735a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800735c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff ff35 	bl	80071d0 <__NVIC_EnableIRQ>
}
 8007366:	bf00      	nop
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff ffa2 	bl	80072c0 <SysTick_Config>
 800737c:	4603      	mov	r3, r0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e043      	b.n	8007426 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	4b22      	ldr	r3, [pc, #136]	; (8007430 <HAL_DMA_Init+0xa8>)
 80073a6:	4413      	add	r3, r2
 80073a8:	4a22      	ldr	r2, [pc, #136]	; (8007434 <HAL_DMA_Init+0xac>)
 80073aa:	fba2 2303 	umull	r2, r3, r2, r3
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	009a      	lsls	r2, r3, #2
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a1f      	ldr	r2, [pc, #124]	; (8007438 <HAL_DMA_Init+0xb0>)
 80073ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80073d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80073d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80073e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	bc80      	pop	{r7}
 800742e:	4770      	bx	lr
 8007430:	bffdfff8 	.word	0xbffdfff8
 8007434:	cccccccd 	.word	0xcccccccd
 8007438:	40020000 	.word	0x40020000

0800743c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_DMA_Start_IT+0x20>
 8007458:	2302      	movs	r3, #2
 800745a:	e04a      	b.n	80074f2 <HAL_DMA_Start_IT+0xb6>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800746a:	2b01      	cmp	r3, #1
 800746c:	d13a      	bne.n	80074e4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2202      	movs	r2, #2
 8007472:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0201 	bic.w	r2, r2, #1
 800748a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	68b9      	ldr	r1, [r7, #8]
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 f938 	bl	8007708 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	2b00      	cmp	r3, #0
 800749e:	d008      	beq.n	80074b2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 020e 	orr.w	r2, r2, #14
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	e00f      	b.n	80074d2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 0204 	bic.w	r2, r2, #4
 80074c0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f042 020a 	orr.w	r2, r2, #10
 80074d0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f042 0201 	orr.w	r2, r2, #1
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e005      	b.n	80074f0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80074ec:	2302      	movs	r3, #2
 80074ee:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007518:	2204      	movs	r2, #4
 800751a:	409a      	lsls	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4013      	ands	r3, r2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d04f      	beq.n	80075c4 <HAL_DMA_IRQHandler+0xc8>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b00      	cmp	r3, #0
 800752c:	d04a      	beq.n	80075c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d107      	bne.n	800754c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0204 	bic.w	r2, r2, #4
 800754a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a66      	ldr	r2, [pc, #408]	; (80076ec <HAL_DMA_IRQHandler+0x1f0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d029      	beq.n	80075aa <HAL_DMA_IRQHandler+0xae>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a65      	ldr	r2, [pc, #404]	; (80076f0 <HAL_DMA_IRQHandler+0x1f4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d022      	beq.n	80075a6 <HAL_DMA_IRQHandler+0xaa>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a63      	ldr	r2, [pc, #396]	; (80076f4 <HAL_DMA_IRQHandler+0x1f8>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d01a      	beq.n	80075a0 <HAL_DMA_IRQHandler+0xa4>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a62      	ldr	r2, [pc, #392]	; (80076f8 <HAL_DMA_IRQHandler+0x1fc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d012      	beq.n	800759a <HAL_DMA_IRQHandler+0x9e>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a60      	ldr	r2, [pc, #384]	; (80076fc <HAL_DMA_IRQHandler+0x200>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00a      	beq.n	8007594 <HAL_DMA_IRQHandler+0x98>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a5f      	ldr	r2, [pc, #380]	; (8007700 <HAL_DMA_IRQHandler+0x204>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d102      	bne.n	800758e <HAL_DMA_IRQHandler+0x92>
 8007588:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800758c:	e00e      	b.n	80075ac <HAL_DMA_IRQHandler+0xb0>
 800758e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007592:	e00b      	b.n	80075ac <HAL_DMA_IRQHandler+0xb0>
 8007594:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007598:	e008      	b.n	80075ac <HAL_DMA_IRQHandler+0xb0>
 800759a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800759e:	e005      	b.n	80075ac <HAL_DMA_IRQHandler+0xb0>
 80075a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075a4:	e002      	b.n	80075ac <HAL_DMA_IRQHandler+0xb0>
 80075a6:	2340      	movs	r3, #64	; 0x40
 80075a8:	e000      	b.n	80075ac <HAL_DMA_IRQHandler+0xb0>
 80075aa:	2304      	movs	r3, #4
 80075ac:	4a55      	ldr	r2, [pc, #340]	; (8007704 <HAL_DMA_IRQHandler+0x208>)
 80075ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8094 	beq.w	80076e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80075c2:	e08e      	b.n	80076e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	2202      	movs	r2, #2
 80075ca:	409a      	lsls	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4013      	ands	r3, r2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d056      	beq.n	8007682 <HAL_DMA_IRQHandler+0x186>
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d051      	beq.n	8007682 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0320 	and.w	r3, r3, #32
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10b      	bne.n	8007604 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 020a 	bic.w	r2, r2, #10
 80075fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a38      	ldr	r2, [pc, #224]	; (80076ec <HAL_DMA_IRQHandler+0x1f0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d029      	beq.n	8007662 <HAL_DMA_IRQHandler+0x166>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a37      	ldr	r2, [pc, #220]	; (80076f0 <HAL_DMA_IRQHandler+0x1f4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d022      	beq.n	800765e <HAL_DMA_IRQHandler+0x162>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a35      	ldr	r2, [pc, #212]	; (80076f4 <HAL_DMA_IRQHandler+0x1f8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d01a      	beq.n	8007658 <HAL_DMA_IRQHandler+0x15c>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a34      	ldr	r2, [pc, #208]	; (80076f8 <HAL_DMA_IRQHandler+0x1fc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d012      	beq.n	8007652 <HAL_DMA_IRQHandler+0x156>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a32      	ldr	r2, [pc, #200]	; (80076fc <HAL_DMA_IRQHandler+0x200>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00a      	beq.n	800764c <HAL_DMA_IRQHandler+0x150>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a31      	ldr	r2, [pc, #196]	; (8007700 <HAL_DMA_IRQHandler+0x204>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d102      	bne.n	8007646 <HAL_DMA_IRQHandler+0x14a>
 8007640:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007644:	e00e      	b.n	8007664 <HAL_DMA_IRQHandler+0x168>
 8007646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800764a:	e00b      	b.n	8007664 <HAL_DMA_IRQHandler+0x168>
 800764c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007650:	e008      	b.n	8007664 <HAL_DMA_IRQHandler+0x168>
 8007652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007656:	e005      	b.n	8007664 <HAL_DMA_IRQHandler+0x168>
 8007658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800765c:	e002      	b.n	8007664 <HAL_DMA_IRQHandler+0x168>
 800765e:	2320      	movs	r3, #32
 8007660:	e000      	b.n	8007664 <HAL_DMA_IRQHandler+0x168>
 8007662:	2302      	movs	r3, #2
 8007664:	4a27      	ldr	r2, [pc, #156]	; (8007704 <HAL_DMA_IRQHandler+0x208>)
 8007666:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	2b00      	cmp	r3, #0
 8007676:	d034      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007680:	e02f      	b.n	80076e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	2208      	movs	r2, #8
 8007688:	409a      	lsls	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	4013      	ands	r3, r2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d028      	beq.n	80076e4 <HAL_DMA_IRQHandler+0x1e8>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	f003 0308 	and.w	r3, r3, #8
 8007698:	2b00      	cmp	r3, #0
 800769a:	d023      	beq.n	80076e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 020e 	bic.w	r2, r2, #14
 80076aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b4:	2101      	movs	r1, #1
 80076b6:	fa01 f202 	lsl.w	r2, r1, r2
 80076ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	4798      	blx	r3
    }
  }
  return;
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
}
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	40020008 	.word	0x40020008
 80076f0:	4002001c 	.word	0x4002001c
 80076f4:	40020030 	.word	0x40020030
 80076f8:	40020044 	.word	0x40020044
 80076fc:	40020058 	.word	0x40020058
 8007700:	4002006c 	.word	0x4002006c
 8007704:	40020000 	.word	0x40020000

08007708 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771e:	2101      	movs	r1, #1
 8007720:	fa01 f202 	lsl.w	r2, r1, r2
 8007724:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2b10      	cmp	r3, #16
 8007734:	d108      	bne.n	8007748 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007746:	e007      	b.n	8007758 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	60da      	str	r2, [r3, #12]
}
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	bc80      	pop	{r7}
 8007760:	4770      	bx	lr
	...

08007764 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800777e:	4b2f      	ldr	r3, [pc, #188]	; (800783c <HAL_FLASH_Program+0xd8>)
 8007780:	7e1b      	ldrb	r3, [r3, #24]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_FLASH_Program+0x26>
 8007786:	2302      	movs	r3, #2
 8007788:	e054      	b.n	8007834 <HAL_FLASH_Program+0xd0>
 800778a:	4b2c      	ldr	r3, [pc, #176]	; (800783c <HAL_FLASH_Program+0xd8>)
 800778c:	2201      	movs	r2, #1
 800778e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007790:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007794:	f000 f898 	bl	80078c8 <FLASH_WaitForLastOperation>
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d144      	bne.n	800782c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d102      	bne.n	80077ae <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80077a8:	2301      	movs	r3, #1
 80077aa:	757b      	strb	r3, [r7, #21]
 80077ac:	e007      	b.n	80077be <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d102      	bne.n	80077ba <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80077b4:	2302      	movs	r3, #2
 80077b6:	757b      	strb	r3, [r7, #21]
 80077b8:	e001      	b.n	80077be <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80077ba:	2304      	movs	r3, #4
 80077bc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80077be:	2300      	movs	r3, #0
 80077c0:	75bb      	strb	r3, [r7, #22]
 80077c2:	e02d      	b.n	8007820 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80077c4:	7dbb      	ldrb	r3, [r7, #22]
 80077c6:	005a      	lsls	r2, r3, #1
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	eb02 0c03 	add.w	ip, r2, r3
 80077ce:	7dbb      	ldrb	r3, [r7, #22]
 80077d0:	0119      	lsls	r1, r3, #4
 80077d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d6:	f1c1 0620 	rsb	r6, r1, #32
 80077da:	f1a1 0020 	sub.w	r0, r1, #32
 80077de:	fa22 f401 	lsr.w	r4, r2, r1
 80077e2:	fa03 f606 	lsl.w	r6, r3, r6
 80077e6:	4334      	orrs	r4, r6
 80077e8:	fa23 f000 	lsr.w	r0, r3, r0
 80077ec:	4304      	orrs	r4, r0
 80077ee:	fa23 f501 	lsr.w	r5, r3, r1
 80077f2:	b2a3      	uxth	r3, r4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4660      	mov	r0, ip
 80077f8:	f000 f84a 	bl	8007890 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80077fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007800:	f000 f862 	bl	80078c8 <FLASH_WaitForLastOperation>
 8007804:	4603      	mov	r3, r0
 8007806:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007808:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <HAL_FLASH_Program+0xdc>)
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	4a0c      	ldr	r2, [pc, #48]	; (8007840 <HAL_FLASH_Program+0xdc>)
 800780e:	f023 0301 	bic.w	r3, r3, #1
 8007812:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d107      	bne.n	800782a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800781a:	7dbb      	ldrb	r3, [r7, #22]
 800781c:	3301      	adds	r3, #1
 800781e:	75bb      	strb	r3, [r7, #22]
 8007820:	7dba      	ldrb	r2, [r7, #22]
 8007822:	7d7b      	ldrb	r3, [r7, #21]
 8007824:	429a      	cmp	r2, r3
 8007826:	d3cd      	bcc.n	80077c4 <HAL_FLASH_Program+0x60>
 8007828:	e000      	b.n	800782c <HAL_FLASH_Program+0xc8>
      {
        break;
 800782a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800782c:	4b03      	ldr	r3, [pc, #12]	; (800783c <HAL_FLASH_Program+0xd8>)
 800782e:	2200      	movs	r2, #0
 8007830:	761a      	strb	r2, [r3, #24]

  return status;
 8007832:	7dfb      	ldrb	r3, [r7, #23]
}
 8007834:	4618      	mov	r0, r3
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783c:	20001470 	.word	0x20001470
 8007840:	40022000 	.word	0x40022000

08007844 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800784e:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <HAL_FLASH_Unlock+0x40>)
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00d      	beq.n	8007876 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800785a:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <HAL_FLASH_Unlock+0x40>)
 800785c:	4a0a      	ldr	r2, [pc, #40]	; (8007888 <HAL_FLASH_Unlock+0x44>)
 800785e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007860:	4b08      	ldr	r3, [pc, #32]	; (8007884 <HAL_FLASH_Unlock+0x40>)
 8007862:	4a0a      	ldr	r2, [pc, #40]	; (800788c <HAL_FLASH_Unlock+0x48>)
 8007864:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007866:	4b07      	ldr	r3, [pc, #28]	; (8007884 <HAL_FLASH_Unlock+0x40>)
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8007876:	79fb      	ldrb	r3, [r7, #7]
}
 8007878:	4618      	mov	r0, r3
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	bc80      	pop	{r7}
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40022000 	.word	0x40022000
 8007888:	45670123 	.word	0x45670123
 800788c:	cdef89ab 	.word	0xcdef89ab

08007890 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800789c:	4b08      	ldr	r3, [pc, #32]	; (80078c0 <FLASH_Program_HalfWord+0x30>)
 800789e:	2200      	movs	r2, #0
 80078a0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80078a2:	4b08      	ldr	r3, [pc, #32]	; (80078c4 <FLASH_Program_HalfWord+0x34>)
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	4a07      	ldr	r2, [pc, #28]	; (80078c4 <FLASH_Program_HalfWord+0x34>)
 80078a8:	f043 0301 	orr.w	r3, r3, #1
 80078ac:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	887a      	ldrh	r2, [r7, #2]
 80078b2:	801a      	strh	r2, [r3, #0]
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	20001470 	.word	0x20001470
 80078c4:	40022000 	.word	0x40022000

080078c8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80078d0:	f7fe ffa6 	bl	8006820 <HAL_GetTick>
 80078d4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80078d6:	e010      	b.n	80078fa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078de:	d00c      	beq.n	80078fa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d007      	beq.n	80078f6 <FLASH_WaitForLastOperation+0x2e>
 80078e6:	f7fe ff9b 	bl	8006820 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d201      	bcs.n	80078fa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e025      	b.n	8007946 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80078fa:	4b15      	ldr	r3, [pc, #84]	; (8007950 <FLASH_WaitForLastOperation+0x88>)
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e8      	bne.n	80078d8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007906:	4b12      	ldr	r3, [pc, #72]	; (8007950 <FLASH_WaitForLastOperation+0x88>)
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f003 0320 	and.w	r3, r3, #32
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007912:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <FLASH_WaitForLastOperation+0x88>)
 8007914:	2220      	movs	r2, #32
 8007916:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007918:	4b0d      	ldr	r3, [pc, #52]	; (8007950 <FLASH_WaitForLastOperation+0x88>)
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10b      	bne.n	800793c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007924:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <FLASH_WaitForLastOperation+0x88>)
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800792c:	2b00      	cmp	r3, #0
 800792e:	d105      	bne.n	800793c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <FLASH_WaitForLastOperation+0x88>)
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800793c:	f000 f80a 	bl	8007954 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e000      	b.n	8007946 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	40022000 	.word	0x40022000

08007954 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800795e:	4b23      	ldr	r3, [pc, #140]	; (80079ec <FLASH_SetErrorCode+0x98>)
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f003 0310 	and.w	r3, r3, #16
 8007966:	2b00      	cmp	r3, #0
 8007968:	d009      	beq.n	800797e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800796a:	4b21      	ldr	r3, [pc, #132]	; (80079f0 <FLASH_SetErrorCode+0x9c>)
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	f043 0302 	orr.w	r3, r3, #2
 8007972:	4a1f      	ldr	r2, [pc, #124]	; (80079f0 <FLASH_SetErrorCode+0x9c>)
 8007974:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f043 0310 	orr.w	r3, r3, #16
 800797c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800797e:	4b1b      	ldr	r3, [pc, #108]	; (80079ec <FLASH_SetErrorCode+0x98>)
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	f003 0304 	and.w	r3, r3, #4
 8007986:	2b00      	cmp	r3, #0
 8007988:	d009      	beq.n	800799e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800798a:	4b19      	ldr	r3, [pc, #100]	; (80079f0 <FLASH_SetErrorCode+0x9c>)
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	f043 0301 	orr.w	r3, r3, #1
 8007992:	4a17      	ldr	r2, [pc, #92]	; (80079f0 <FLASH_SetErrorCode+0x9c>)
 8007994:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f043 0304 	orr.w	r3, r3, #4
 800799c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <FLASH_SetErrorCode+0x98>)
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00b      	beq.n	80079c2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80079aa:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <FLASH_SetErrorCode+0x9c>)
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	f043 0304 	orr.w	r3, r3, #4
 80079b2:	4a0f      	ldr	r2, [pc, #60]	; (80079f0 <FLASH_SetErrorCode+0x9c>)
 80079b4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80079b6:	4b0d      	ldr	r3, [pc, #52]	; (80079ec <FLASH_SetErrorCode+0x98>)
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	4a0c      	ldr	r2, [pc, #48]	; (80079ec <FLASH_SetErrorCode+0x98>)
 80079bc:	f023 0301 	bic.w	r3, r3, #1
 80079c0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f240 1201 	movw	r2, #257	; 0x101
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d106      	bne.n	80079da <FLASH_SetErrorCode+0x86>
 80079cc:	4b07      	ldr	r3, [pc, #28]	; (80079ec <FLASH_SetErrorCode+0x98>)
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	4a06      	ldr	r2, [pc, #24]	; (80079ec <FLASH_SetErrorCode+0x98>)
 80079d2:	f023 0301 	bic.w	r3, r3, #1
 80079d6:	61d3      	str	r3, [r2, #28]
}  
 80079d8:	e002      	b.n	80079e0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80079da:	4a04      	ldr	r2, [pc, #16]	; (80079ec <FLASH_SetErrorCode+0x98>)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	60d3      	str	r3, [r2, #12]
}  
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc80      	pop	{r7}
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	40022000 	.word	0x40022000
 80079f0:	20001470 	.word	0x20001470

080079f4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007a06:	4b2f      	ldr	r3, [pc, #188]	; (8007ac4 <HAL_FLASHEx_Erase+0xd0>)
 8007a08:	7e1b      	ldrb	r3, [r3, #24]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d101      	bne.n	8007a12 <HAL_FLASHEx_Erase+0x1e>
 8007a0e:	2302      	movs	r3, #2
 8007a10:	e053      	b.n	8007aba <HAL_FLASHEx_Erase+0xc6>
 8007a12:	4b2c      	ldr	r3, [pc, #176]	; (8007ac4 <HAL_FLASHEx_Erase+0xd0>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d116      	bne.n	8007a4e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007a20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a24:	f7ff ff50 	bl	80078c8 <FLASH_WaitForLastOperation>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d141      	bne.n	8007ab2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8007a2e:	2001      	movs	r0, #1
 8007a30:	f000 f84c 	bl	8007acc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a38:	f7ff ff46 	bl	80078c8 <FLASH_WaitForLastOperation>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8007a40:	4b21      	ldr	r3, [pc, #132]	; (8007ac8 <HAL_FLASHEx_Erase+0xd4>)
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	4a20      	ldr	r2, [pc, #128]	; (8007ac8 <HAL_FLASHEx_Erase+0xd4>)
 8007a46:	f023 0304 	bic.w	r3, r3, #4
 8007a4a:	6113      	str	r3, [r2, #16]
 8007a4c:	e031      	b.n	8007ab2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007a4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a52:	f7ff ff39 	bl	80078c8 <FLASH_WaitForLastOperation>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d12a      	bne.n	8007ab2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a62:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	60bb      	str	r3, [r7, #8]
 8007a6a:	e019      	b.n	8007aa0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8007a6c:	68b8      	ldr	r0, [r7, #8]
 8007a6e:	f000 f849 	bl	8007b04 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a76:	f7ff ff27 	bl	80078c8 <FLASH_WaitForLastOperation>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007a7e:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <HAL_FLASHEx_Erase+0xd4>)
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	4a11      	ldr	r2, [pc, #68]	; (8007ac8 <HAL_FLASHEx_Erase+0xd4>)
 8007a84:	f023 0302 	bic.w	r3, r3, #2
 8007a88:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	601a      	str	r2, [r3, #0]
            break;
 8007a96:	e00c      	b.n	8007ab2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a9e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	029a      	lsls	r2, r3, #10
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d3dc      	bcc.n	8007a6c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007ab2:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <HAL_FLASHEx_Erase+0xd0>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	761a      	strb	r2, [r3, #24]

  return status;
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20001470 	.word	0x20001470
 8007ac8:	40022000 	.word	0x40022000

08007acc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007ad4:	4b09      	ldr	r3, [pc, #36]	; (8007afc <FLASH_MassErase+0x30>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8007ada:	4b09      	ldr	r3, [pc, #36]	; (8007b00 <FLASH_MassErase+0x34>)
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	4a08      	ldr	r2, [pc, #32]	; (8007b00 <FLASH_MassErase+0x34>)
 8007ae0:	f043 0304 	orr.w	r3, r3, #4
 8007ae4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007ae6:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <FLASH_MassErase+0x34>)
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	4a05      	ldr	r2, [pc, #20]	; (8007b00 <FLASH_MassErase+0x34>)
 8007aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bc80      	pop	{r7}
 8007afa:	4770      	bx	lr
 8007afc:	20001470 	.word	0x20001470
 8007b00:	40022000 	.word	0x40022000

08007b04 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <FLASH_PageErase+0x38>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007b12:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <FLASH_PageErase+0x3c>)
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	4a0a      	ldr	r2, [pc, #40]	; (8007b40 <FLASH_PageErase+0x3c>)
 8007b18:	f043 0302 	orr.w	r3, r3, #2
 8007b1c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8007b1e:	4a08      	ldr	r2, [pc, #32]	; (8007b40 <FLASH_PageErase+0x3c>)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007b24:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <FLASH_PageErase+0x3c>)
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	4a05      	ldr	r2, [pc, #20]	; (8007b40 <FLASH_PageErase+0x3c>)
 8007b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b2e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bc80      	pop	{r7}
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20001470 	.word	0x20001470
 8007b40:	40022000 	.word	0x40022000

08007b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b08b      	sub	sp, #44	; 0x2c
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007b52:	2300      	movs	r3, #0
 8007b54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b56:	e169      	b.n	8007e2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007b58:	2201      	movs	r2, #1
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69fa      	ldr	r2, [r7, #28]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	f040 8158 	bne.w	8007e26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	4a9a      	ldr	r2, [pc, #616]	; (8007de4 <HAL_GPIO_Init+0x2a0>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d05e      	beq.n	8007c3e <HAL_GPIO_Init+0xfa>
 8007b80:	4a98      	ldr	r2, [pc, #608]	; (8007de4 <HAL_GPIO_Init+0x2a0>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d875      	bhi.n	8007c72 <HAL_GPIO_Init+0x12e>
 8007b86:	4a98      	ldr	r2, [pc, #608]	; (8007de8 <HAL_GPIO_Init+0x2a4>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d058      	beq.n	8007c3e <HAL_GPIO_Init+0xfa>
 8007b8c:	4a96      	ldr	r2, [pc, #600]	; (8007de8 <HAL_GPIO_Init+0x2a4>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d86f      	bhi.n	8007c72 <HAL_GPIO_Init+0x12e>
 8007b92:	4a96      	ldr	r2, [pc, #600]	; (8007dec <HAL_GPIO_Init+0x2a8>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d052      	beq.n	8007c3e <HAL_GPIO_Init+0xfa>
 8007b98:	4a94      	ldr	r2, [pc, #592]	; (8007dec <HAL_GPIO_Init+0x2a8>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d869      	bhi.n	8007c72 <HAL_GPIO_Init+0x12e>
 8007b9e:	4a94      	ldr	r2, [pc, #592]	; (8007df0 <HAL_GPIO_Init+0x2ac>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d04c      	beq.n	8007c3e <HAL_GPIO_Init+0xfa>
 8007ba4:	4a92      	ldr	r2, [pc, #584]	; (8007df0 <HAL_GPIO_Init+0x2ac>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d863      	bhi.n	8007c72 <HAL_GPIO_Init+0x12e>
 8007baa:	4a92      	ldr	r2, [pc, #584]	; (8007df4 <HAL_GPIO_Init+0x2b0>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d046      	beq.n	8007c3e <HAL_GPIO_Init+0xfa>
 8007bb0:	4a90      	ldr	r2, [pc, #576]	; (8007df4 <HAL_GPIO_Init+0x2b0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d85d      	bhi.n	8007c72 <HAL_GPIO_Init+0x12e>
 8007bb6:	2b12      	cmp	r3, #18
 8007bb8:	d82a      	bhi.n	8007c10 <HAL_GPIO_Init+0xcc>
 8007bba:	2b12      	cmp	r3, #18
 8007bbc:	d859      	bhi.n	8007c72 <HAL_GPIO_Init+0x12e>
 8007bbe:	a201      	add	r2, pc, #4	; (adr r2, 8007bc4 <HAL_GPIO_Init+0x80>)
 8007bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc4:	08007c3f 	.word	0x08007c3f
 8007bc8:	08007c19 	.word	0x08007c19
 8007bcc:	08007c2b 	.word	0x08007c2b
 8007bd0:	08007c6d 	.word	0x08007c6d
 8007bd4:	08007c73 	.word	0x08007c73
 8007bd8:	08007c73 	.word	0x08007c73
 8007bdc:	08007c73 	.word	0x08007c73
 8007be0:	08007c73 	.word	0x08007c73
 8007be4:	08007c73 	.word	0x08007c73
 8007be8:	08007c73 	.word	0x08007c73
 8007bec:	08007c73 	.word	0x08007c73
 8007bf0:	08007c73 	.word	0x08007c73
 8007bf4:	08007c73 	.word	0x08007c73
 8007bf8:	08007c73 	.word	0x08007c73
 8007bfc:	08007c73 	.word	0x08007c73
 8007c00:	08007c73 	.word	0x08007c73
 8007c04:	08007c73 	.word	0x08007c73
 8007c08:	08007c21 	.word	0x08007c21
 8007c0c:	08007c35 	.word	0x08007c35
 8007c10:	4a79      	ldr	r2, [pc, #484]	; (8007df8 <HAL_GPIO_Init+0x2b4>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d013      	beq.n	8007c3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007c16:	e02c      	b.n	8007c72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	623b      	str	r3, [r7, #32]
          break;
 8007c1e:	e029      	b.n	8007c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	3304      	adds	r3, #4
 8007c26:	623b      	str	r3, [r7, #32]
          break;
 8007c28:	e024      	b.n	8007c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	623b      	str	r3, [r7, #32]
          break;
 8007c32:	e01f      	b.n	8007c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	330c      	adds	r3, #12
 8007c3a:	623b      	str	r3, [r7, #32]
          break;
 8007c3c:	e01a      	b.n	8007c74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d102      	bne.n	8007c4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007c46:	2304      	movs	r3, #4
 8007c48:	623b      	str	r3, [r7, #32]
          break;
 8007c4a:	e013      	b.n	8007c74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d105      	bne.n	8007c60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007c54:	2308      	movs	r3, #8
 8007c56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	611a      	str	r2, [r3, #16]
          break;
 8007c5e:	e009      	b.n	8007c74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007c60:	2308      	movs	r3, #8
 8007c62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	615a      	str	r2, [r3, #20]
          break;
 8007c6a:	e003      	b.n	8007c74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	623b      	str	r3, [r7, #32]
          break;
 8007c70:	e000      	b.n	8007c74 <HAL_GPIO_Init+0x130>
          break;
 8007c72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	2bff      	cmp	r3, #255	; 0xff
 8007c78:	d801      	bhi.n	8007c7e <HAL_GPIO_Init+0x13a>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	e001      	b.n	8007c82 <HAL_GPIO_Init+0x13e>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3304      	adds	r3, #4
 8007c82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	2bff      	cmp	r3, #255	; 0xff
 8007c88:	d802      	bhi.n	8007c90 <HAL_GPIO_Init+0x14c>
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	e002      	b.n	8007c96 <HAL_GPIO_Init+0x152>
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	3b08      	subs	r3, #8
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	210f      	movs	r1, #15
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca4:	43db      	mvns	r3, r3
 8007ca6:	401a      	ands	r2, r3
 8007ca8:	6a39      	ldr	r1, [r7, #32]
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 80b1 	beq.w	8007e26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007cc4:	4b4d      	ldr	r3, [pc, #308]	; (8007dfc <HAL_GPIO_Init+0x2b8>)
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	4a4c      	ldr	r2, [pc, #304]	; (8007dfc <HAL_GPIO_Init+0x2b8>)
 8007cca:	f043 0301 	orr.w	r3, r3, #1
 8007cce:	6193      	str	r3, [r2, #24]
 8007cd0:	4b4a      	ldr	r3, [pc, #296]	; (8007dfc <HAL_GPIO_Init+0x2b8>)
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	60bb      	str	r3, [r7, #8]
 8007cda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007cdc:	4a48      	ldr	r2, [pc, #288]	; (8007e00 <HAL_GPIO_Init+0x2bc>)
 8007cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce0:	089b      	lsrs	r3, r3, #2
 8007ce2:	3302      	adds	r3, #2
 8007ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	f003 0303 	and.w	r3, r3, #3
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	220f      	movs	r2, #15
 8007cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf8:	43db      	mvns	r3, r3
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a40      	ldr	r2, [pc, #256]	; (8007e04 <HAL_GPIO_Init+0x2c0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d013      	beq.n	8007d30 <HAL_GPIO_Init+0x1ec>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a3f      	ldr	r2, [pc, #252]	; (8007e08 <HAL_GPIO_Init+0x2c4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d00d      	beq.n	8007d2c <HAL_GPIO_Init+0x1e8>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a3e      	ldr	r2, [pc, #248]	; (8007e0c <HAL_GPIO_Init+0x2c8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d007      	beq.n	8007d28 <HAL_GPIO_Init+0x1e4>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a3d      	ldr	r2, [pc, #244]	; (8007e10 <HAL_GPIO_Init+0x2cc>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d101      	bne.n	8007d24 <HAL_GPIO_Init+0x1e0>
 8007d20:	2303      	movs	r3, #3
 8007d22:	e006      	b.n	8007d32 <HAL_GPIO_Init+0x1ee>
 8007d24:	2304      	movs	r3, #4
 8007d26:	e004      	b.n	8007d32 <HAL_GPIO_Init+0x1ee>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e002      	b.n	8007d32 <HAL_GPIO_Init+0x1ee>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e000      	b.n	8007d32 <HAL_GPIO_Init+0x1ee>
 8007d30:	2300      	movs	r3, #0
 8007d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d34:	f002 0203 	and.w	r2, r2, #3
 8007d38:	0092      	lsls	r2, r2, #2
 8007d3a:	4093      	lsls	r3, r2
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007d42:	492f      	ldr	r1, [pc, #188]	; (8007e00 <HAL_GPIO_Init+0x2bc>)
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	089b      	lsrs	r3, r3, #2
 8007d48:	3302      	adds	r3, #2
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d006      	beq.n	8007d6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007d5c:	4b2d      	ldr	r3, [pc, #180]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	492c      	ldr	r1, [pc, #176]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	600b      	str	r3, [r1, #0]
 8007d68:	e006      	b.n	8007d78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007d6a:	4b2a      	ldr	r3, [pc, #168]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	43db      	mvns	r3, r3
 8007d72:	4928      	ldr	r1, [pc, #160]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007d74:	4013      	ands	r3, r2
 8007d76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d006      	beq.n	8007d92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007d84:	4b23      	ldr	r3, [pc, #140]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	4922      	ldr	r1, [pc, #136]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	604b      	str	r3, [r1, #4]
 8007d90:	e006      	b.n	8007da0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007d92:	4b20      	ldr	r3, [pc, #128]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	43db      	mvns	r3, r3
 8007d9a:	491e      	ldr	r1, [pc, #120]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d006      	beq.n	8007dba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007dac:	4b19      	ldr	r3, [pc, #100]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	4918      	ldr	r1, [pc, #96]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	608b      	str	r3, [r1, #8]
 8007db8:	e006      	b.n	8007dc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007dba:	4b16      	ldr	r3, [pc, #88]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007dbc:	689a      	ldr	r2, [r3, #8]
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	4914      	ldr	r1, [pc, #80]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d021      	beq.n	8007e18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007dd4:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	490e      	ldr	r1, [pc, #56]	; (8007e14 <HAL_GPIO_Init+0x2d0>)
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60cb      	str	r3, [r1, #12]
 8007de0:	e021      	b.n	8007e26 <HAL_GPIO_Init+0x2e2>
 8007de2:	bf00      	nop
 8007de4:	10320000 	.word	0x10320000
 8007de8:	10310000 	.word	0x10310000
 8007dec:	10220000 	.word	0x10220000
 8007df0:	10210000 	.word	0x10210000
 8007df4:	10120000 	.word	0x10120000
 8007df8:	10110000 	.word	0x10110000
 8007dfc:	40021000 	.word	0x40021000
 8007e00:	40010000 	.word	0x40010000
 8007e04:	40010800 	.word	0x40010800
 8007e08:	40010c00 	.word	0x40010c00
 8007e0c:	40011000 	.word	0x40011000
 8007e10:	40011400 	.word	0x40011400
 8007e14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007e18:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <HAL_GPIO_Init+0x304>)
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	43db      	mvns	r3, r3
 8007e20:	4909      	ldr	r1, [pc, #36]	; (8007e48 <HAL_GPIO_Init+0x304>)
 8007e22:	4013      	ands	r3, r2
 8007e24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	3301      	adds	r3, #1
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	fa22 f303 	lsr.w	r3, r2, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f47f ae8e 	bne.w	8007b58 <HAL_GPIO_Init+0x14>
  }
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	372c      	adds	r7, #44	; 0x2c
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bc80      	pop	{r7}
 8007e46:	4770      	bx	lr
 8007e48:	40010400 	.word	0x40010400

08007e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	887b      	ldrh	r3, [r7, #2]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e64:	2301      	movs	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
 8007e68:	e001      	b.n	8007e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr

08007e7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	807b      	strh	r3, [r7, #2]
 8007e86:	4613      	mov	r3, r2
 8007e88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e8a:	787b      	ldrb	r3, [r7, #1]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e90:	887a      	ldrh	r2, [r7, #2]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007e96:	e003      	b.n	8007ea0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007e98:	887b      	ldrh	r3, [r7, #2]
 8007e9a:	041a      	lsls	r2, r3, #16
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	611a      	str	r2, [r3, #16]
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bc80      	pop	{r7}
 8007ea8:	4770      	bx	lr
	...

08007eac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e12b      	b.n	8008116 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d106      	bne.n	8007ed8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7fc f9ba 	bl	800424c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2224      	movs	r2, #36	; 0x24
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0201 	bic.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007efe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f10:	f003 fb9e 	bl	800b650 <HAL_RCC_GetPCLK1Freq>
 8007f14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	4a81      	ldr	r2, [pc, #516]	; (8008120 <HAL_I2C_Init+0x274>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d807      	bhi.n	8007f30 <HAL_I2C_Init+0x84>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4a80      	ldr	r2, [pc, #512]	; (8008124 <HAL_I2C_Init+0x278>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	bf94      	ite	ls
 8007f28:	2301      	movls	r3, #1
 8007f2a:	2300      	movhi	r3, #0
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	e006      	b.n	8007f3e <HAL_I2C_Init+0x92>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4a7d      	ldr	r2, [pc, #500]	; (8008128 <HAL_I2C_Init+0x27c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	bf94      	ite	ls
 8007f38:	2301      	movls	r3, #1
 8007f3a:	2300      	movhi	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e0e7      	b.n	8008116 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4a78      	ldr	r2, [pc, #480]	; (800812c <HAL_I2C_Init+0x280>)
 8007f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4e:	0c9b      	lsrs	r3, r3, #18
 8007f50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	4a6a      	ldr	r2, [pc, #424]	; (8008120 <HAL_I2C_Init+0x274>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d802      	bhi.n	8007f80 <HAL_I2C_Init+0xd4>
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	e009      	b.n	8007f94 <HAL_I2C_Init+0xe8>
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007f86:	fb02 f303 	mul.w	r3, r2, r3
 8007f8a:	4a69      	ldr	r2, [pc, #420]	; (8008130 <HAL_I2C_Init+0x284>)
 8007f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f90:	099b      	lsrs	r3, r3, #6
 8007f92:	3301      	adds	r3, #1
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	6812      	ldr	r2, [r2, #0]
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007fa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	495c      	ldr	r1, [pc, #368]	; (8008120 <HAL_I2C_Init+0x274>)
 8007fb0:	428b      	cmp	r3, r1
 8007fb2:	d819      	bhi.n	8007fe8 <HAL_I2C_Init+0x13c>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	1e59      	subs	r1, r3, #1
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	005b      	lsls	r3, r3, #1
 8007fbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fc2:	1c59      	adds	r1, r3, #1
 8007fc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007fc8:	400b      	ands	r3, r1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <HAL_I2C_Init+0x138>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	1e59      	subs	r1, r3, #1
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fdc:	3301      	adds	r3, #1
 8007fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fe2:	e051      	b.n	8008088 <HAL_I2C_Init+0x1dc>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	e04f      	b.n	8008088 <HAL_I2C_Init+0x1dc>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d111      	bne.n	8008014 <HAL_I2C_Init+0x168>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	1e58      	subs	r0, r3, #1
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6859      	ldr	r1, [r3, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	440b      	add	r3, r1
 8007ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008002:	3301      	adds	r3, #1
 8008004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008008:	2b00      	cmp	r3, #0
 800800a:	bf0c      	ite	eq
 800800c:	2301      	moveq	r3, #1
 800800e:	2300      	movne	r3, #0
 8008010:	b2db      	uxtb	r3, r3
 8008012:	e012      	b.n	800803a <HAL_I2C_Init+0x18e>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	1e58      	subs	r0, r3, #1
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6859      	ldr	r1, [r3, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	0099      	lsls	r1, r3, #2
 8008024:	440b      	add	r3, r1
 8008026:	fbb0 f3f3 	udiv	r3, r0, r3
 800802a:	3301      	adds	r3, #1
 800802c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008030:	2b00      	cmp	r3, #0
 8008032:	bf0c      	ite	eq
 8008034:	2301      	moveq	r3, #1
 8008036:	2300      	movne	r3, #0
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <HAL_I2C_Init+0x196>
 800803e:	2301      	movs	r3, #1
 8008040:	e022      	b.n	8008088 <HAL_I2C_Init+0x1dc>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10e      	bne.n	8008068 <HAL_I2C_Init+0x1bc>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	1e58      	subs	r0, r3, #1
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6859      	ldr	r1, [r3, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	440b      	add	r3, r1
 8008058:	fbb0 f3f3 	udiv	r3, r0, r3
 800805c:	3301      	adds	r3, #1
 800805e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008066:	e00f      	b.n	8008088 <HAL_I2C_Init+0x1dc>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	1e58      	subs	r0, r3, #1
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6859      	ldr	r1, [r3, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	0099      	lsls	r1, r3, #2
 8008078:	440b      	add	r3, r1
 800807a:	fbb0 f3f3 	udiv	r3, r0, r3
 800807e:	3301      	adds	r3, #1
 8008080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008088:	6879      	ldr	r1, [r7, #4]
 800808a:	6809      	ldr	r1, [r1, #0]
 800808c:	4313      	orrs	r3, r2
 800808e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	69da      	ldr	r2, [r3, #28]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	431a      	orrs	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80080b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6911      	ldr	r1, [r2, #16]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	68d2      	ldr	r2, [r2, #12]
 80080c2:	4311      	orrs	r1, r2
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	6812      	ldr	r2, [r2, #0]
 80080c8:	430b      	orrs	r3, r1
 80080ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	695a      	ldr	r2, [r3, #20]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	431a      	orrs	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f042 0201 	orr.w	r2, r2, #1
 80080f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	000186a0 	.word	0x000186a0
 8008124:	001e847f 	.word	0x001e847f
 8008128:	003d08ff 	.word	0x003d08ff
 800812c:	431bde83 	.word	0x431bde83
 8008130:	10624dd3 	.word	0x10624dd3

08008134 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08c      	sub	sp, #48	; 0x30
 8008138:	af02      	add	r7, sp, #8
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	607a      	str	r2, [r7, #4]
 800813e:	461a      	mov	r2, r3
 8008140:	460b      	mov	r3, r1
 8008142:	817b      	strh	r3, [r7, #10]
 8008144:	4613      	mov	r3, r2
 8008146:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8008148:	2300      	movs	r3, #0
 800814a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800814c:	f7fe fb68 	bl	8006820 <HAL_GetTick>
 8008150:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b20      	cmp	r3, #32
 800815c:	f040 823f 	bne.w	80085de <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	2319      	movs	r3, #25
 8008166:	2201      	movs	r2, #1
 8008168:	497f      	ldr	r1, [pc, #508]	; (8008368 <HAL_I2C_Master_Receive+0x234>)
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fff0 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8008176:	2302      	movs	r3, #2
 8008178:	e232      	b.n	80085e0 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008180:	2b01      	cmp	r3, #1
 8008182:	d101      	bne.n	8008188 <HAL_I2C_Master_Receive+0x54>
 8008184:	2302      	movs	r3, #2
 8008186:	e22b      	b.n	80085e0 <HAL_I2C_Master_Receive+0x4ac>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b01      	cmp	r3, #1
 800819c:	d007      	beq.n	80081ae <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f042 0201 	orr.w	r2, r2, #1
 80081ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2222      	movs	r2, #34	; 0x22
 80081c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2210      	movs	r2, #16
 80081ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	893a      	ldrh	r2, [r7, #8]
 80081de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4a5f      	ldr	r2, [pc, #380]	; (800836c <HAL_I2C_Master_Receive+0x238>)
 80081ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80081f0:	8979      	ldrh	r1, [r7, #10]
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f000 fd5e 	bl	8008cb8 <I2C_MasterRequestRead>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e1ec      	b.n	80085e0 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800820a:	2b00      	cmp	r3, #0
 800820c:	d113      	bne.n	8008236 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800820e:	2300      	movs	r3, #0
 8008210:	61fb      	str	r3, [r7, #28]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	61fb      	str	r3, [r7, #28]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	61fb      	str	r3, [r7, #28]
 8008222:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	e1c0      	b.n	80085b8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800823a:	2b01      	cmp	r3, #1
 800823c:	d11e      	bne.n	800827c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800824c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800824e:	b672      	cpsid	i
}
 8008250:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008252:	2300      	movs	r3, #0
 8008254:	61bb      	str	r3, [r7, #24]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	61bb      	str	r3, [r7, #24]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	61bb      	str	r3, [r7, #24]
 8008266:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008276:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008278:	b662      	cpsie	i
}
 800827a:	e035      	b.n	80082e8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008280:	2b02      	cmp	r3, #2
 8008282:	d11e      	bne.n	80082c2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008292:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008294:	b672      	cpsid	i
}
 8008296:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008298:	2300      	movs	r3, #0
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	617b      	str	r3, [r7, #20]
 80082ac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80082be:	b662      	cpsie	i
}
 80082c0:	e012      	b.n	80082e8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082d2:	2300      	movs	r3, #0
 80082d4:	613b      	str	r3, [r7, #16]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	695b      	ldr	r3, [r3, #20]
 80082dc:	613b      	str	r3, [r7, #16]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	613b      	str	r3, [r7, #16]
 80082e6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80082e8:	e166      	b.n	80085b8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	f200 811f 	bhi.w	8008532 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d123      	bne.n	8008344 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f001 f87d 	bl	8009400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e167      	b.n	80085e0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	691a      	ldr	r2, [r3, #16]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	b2d2      	uxtb	r2, r2
 800831c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800832c:	3b01      	subs	r3, #1
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	b29a      	uxth	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008342:	e139      	b.n	80085b8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008348:	2b02      	cmp	r3, #2
 800834a:	d152      	bne.n	80083f2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	2200      	movs	r2, #0
 8008354:	4906      	ldr	r1, [pc, #24]	; (8008370 <HAL_I2C_Master_Receive+0x23c>)
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 fefa 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d008      	beq.n	8008374 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e13c      	b.n	80085e0 <HAL_I2C_Master_Receive+0x4ac>
 8008366:	bf00      	nop
 8008368:	00100002 	.word	0x00100002
 800836c:	ffff0000 	.word	0xffff0000
 8008370:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008374:	b672      	cpsid	i
}
 8008376:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	691a      	ldr	r2, [r3, #16]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	3b01      	subs	r3, #1
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80083ba:	b662      	cpsie	i
}
 80083bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c8:	b2d2      	uxtb	r2, r2
 80083ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29a      	uxth	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	3b01      	subs	r3, #1
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083f0:	e0e2      	b.n	80085b8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f8:	2200      	movs	r2, #0
 80083fa:	497b      	ldr	r1, [pc, #492]	; (80085e8 <HAL_I2C_Master_Receive+0x4b4>)
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 fea7 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e0e9      	b.n	80085e0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800841a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800841c:	b672      	cpsid	i
}
 800841e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691a      	ldr	r2, [r3, #16]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	b2d2      	uxtb	r2, r2
 800842c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800843c:	3b01      	subs	r3, #1
 800843e:	b29a      	uxth	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008452:	4b66      	ldr	r3, [pc, #408]	; (80085ec <HAL_I2C_Master_Receive+0x4b8>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	08db      	lsrs	r3, r3, #3
 8008458:	4a65      	ldr	r2, [pc, #404]	; (80085f0 <HAL_I2C_Master_Receive+0x4bc>)
 800845a:	fba2 2303 	umull	r2, r3, r2, r3
 800845e:	0a1a      	lsrs	r2, r3, #8
 8008460:	4613      	mov	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	00da      	lsls	r2, r3, #3
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	3b01      	subs	r3, #1
 8008470:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d118      	bne.n	80084aa <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2220      	movs	r2, #32
 8008482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	f043 0220 	orr.w	r2, r3, #32
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800849a:	b662      	cpsie	i
}
 800849c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e09a      	b.n	80085e0 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d1d9      	bne.n	800846c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	691a      	ldr	r2, [r3, #16]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	b2d2      	uxtb	r2, r2
 80084d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084e4:	3b01      	subs	r3, #1
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	3b01      	subs	r3, #1
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80084fa:	b662      	cpsie	i
}
 80084fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	b2d2      	uxtb	r2, r2
 800850a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008510:	1c5a      	adds	r2, r3, #1
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800851a:	3b01      	subs	r3, #1
 800851c:	b29a      	uxth	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008526:	b29b      	uxth	r3, r3
 8008528:	3b01      	subs	r3, #1
 800852a:	b29a      	uxth	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008530:	e042      	b.n	80085b8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008534:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 ff62 	bl	8009400 <I2C_WaitOnRXNEFlagUntilTimeout>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e04c      	b.n	80085e0 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	691a      	ldr	r2, [r3, #16]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	b2d2      	uxtb	r2, r2
 8008552:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008562:	3b01      	subs	r3, #1
 8008564:	b29a      	uxth	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800856e:	b29b      	uxth	r3, r3
 8008570:	3b01      	subs	r3, #1
 8008572:	b29a      	uxth	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	f003 0304 	and.w	r3, r3, #4
 8008582:	2b04      	cmp	r3, #4
 8008584:	d118      	bne.n	80085b8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	691a      	ldr	r2, [r3, #16]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	b2d2      	uxtb	r2, r2
 8008592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f47f ae94 	bne.w	80082ea <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2220      	movs	r2, #32
 80085c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	e000      	b.n	80085e0 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80085de:	2302      	movs	r3, #2
  }
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3728      	adds	r7, #40	; 0x28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	00010004 	.word	0x00010004
 80085ec:	20000800 	.word	0x20000800
 80085f0:	14f8b589 	.word	0x14f8b589

080085f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af02      	add	r7, sp, #8
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	4608      	mov	r0, r1
 80085fe:	4611      	mov	r1, r2
 8008600:	461a      	mov	r2, r3
 8008602:	4603      	mov	r3, r0
 8008604:	817b      	strh	r3, [r7, #10]
 8008606:	460b      	mov	r3, r1
 8008608:	813b      	strh	r3, [r7, #8]
 800860a:	4613      	mov	r3, r2
 800860c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800860e:	f7fe f907 	bl	8006820 <HAL_GetTick>
 8008612:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b20      	cmp	r3, #32
 800861e:	f040 80d9 	bne.w	80087d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	2319      	movs	r3, #25
 8008628:	2201      	movs	r2, #1
 800862a:	496d      	ldr	r1, [pc, #436]	; (80087e0 <HAL_I2C_Mem_Write+0x1ec>)
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 fd8f 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008638:	2302      	movs	r3, #2
 800863a:	e0cc      	b.n	80087d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008642:	2b01      	cmp	r3, #1
 8008644:	d101      	bne.n	800864a <HAL_I2C_Mem_Write+0x56>
 8008646:	2302      	movs	r3, #2
 8008648:	e0c5      	b.n	80087d6 <HAL_I2C_Mem_Write+0x1e2>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b01      	cmp	r3, #1
 800865e:	d007      	beq.n	8008670 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0201 	orr.w	r2, r2, #1
 800866e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800867e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2221      	movs	r2, #33	; 0x21
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2240      	movs	r2, #64	; 0x40
 800868c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6a3a      	ldr	r2, [r7, #32]
 800869a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4a4d      	ldr	r2, [pc, #308]	; (80087e4 <HAL_I2C_Mem_Write+0x1f0>)
 80086b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086b2:	88f8      	ldrh	r0, [r7, #6]
 80086b4:	893a      	ldrh	r2, [r7, #8]
 80086b6:	8979      	ldrh	r1, [r7, #10]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	9301      	str	r3, [sp, #4]
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	4603      	mov	r3, r0
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f000 fbc6 	bl	8008e54 <I2C_RequestMemoryWrite>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d052      	beq.n	8008774 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e081      	b.n	80087d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f000 fe10 	bl	80092fc <I2C_WaitOnTXEFlagUntilTimeout>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00d      	beq.n	80086fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	2b04      	cmp	r3, #4
 80086e8:	d107      	bne.n	80086fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e06b      	b.n	80087d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008702:	781a      	ldrb	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008718:	3b01      	subs	r3, #1
 800871a:	b29a      	uxth	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008724:	b29b      	uxth	r3, r3
 8008726:	3b01      	subs	r3, #1
 8008728:	b29a      	uxth	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b04      	cmp	r3, #4
 800873a:	d11b      	bne.n	8008774 <HAL_I2C_Mem_Write+0x180>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008740:	2b00      	cmp	r3, #0
 8008742:	d017      	beq.n	8008774 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	781a      	ldrb	r2, [r3, #0]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800875e:	3b01      	subs	r3, #1
 8008760:	b29a      	uxth	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800876a:	b29b      	uxth	r3, r3
 800876c:	3b01      	subs	r3, #1
 800876e:	b29a      	uxth	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1aa      	bne.n	80086d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 fdfc 	bl	800937e <I2C_WaitOnBTFFlagUntilTimeout>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00d      	beq.n	80087a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008790:	2b04      	cmp	r3, #4
 8008792:	d107      	bne.n	80087a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e016      	b.n	80087d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2220      	movs	r2, #32
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	e000      	b.n	80087d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80087d4:	2302      	movs	r3, #2
  }
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3718      	adds	r7, #24
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	00100002 	.word	0x00100002
 80087e4:	ffff0000 	.word	0xffff0000

080087e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08c      	sub	sp, #48	; 0x30
 80087ec:	af02      	add	r7, sp, #8
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	4608      	mov	r0, r1
 80087f2:	4611      	mov	r1, r2
 80087f4:	461a      	mov	r2, r3
 80087f6:	4603      	mov	r3, r0
 80087f8:	817b      	strh	r3, [r7, #10]
 80087fa:	460b      	mov	r3, r1
 80087fc:	813b      	strh	r3, [r7, #8]
 80087fe:	4613      	mov	r3, r2
 8008800:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008806:	f7fe f80b 	bl	8006820 <HAL_GetTick>
 800880a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b20      	cmp	r3, #32
 8008816:	f040 8244 	bne.w	8008ca2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	2319      	movs	r3, #25
 8008820:	2201      	movs	r2, #1
 8008822:	4982      	ldr	r1, [pc, #520]	; (8008a2c <HAL_I2C_Mem_Read+0x244>)
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 fc93 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8008830:	2302      	movs	r3, #2
 8008832:	e237      	b.n	8008ca4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800883a:	2b01      	cmp	r3, #1
 800883c:	d101      	bne.n	8008842 <HAL_I2C_Mem_Read+0x5a>
 800883e:	2302      	movs	r3, #2
 8008840:	e230      	b.n	8008ca4 <HAL_I2C_Mem_Read+0x4bc>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b01      	cmp	r3, #1
 8008856:	d007      	beq.n	8008868 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0201 	orr.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008876:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2222      	movs	r2, #34	; 0x22
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2240      	movs	r2, #64	; 0x40
 8008884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800889e:	b29a      	uxth	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4a62      	ldr	r2, [pc, #392]	; (8008a30 <HAL_I2C_Mem_Read+0x248>)
 80088a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088aa:	88f8      	ldrh	r0, [r7, #6]
 80088ac:	893a      	ldrh	r2, [r7, #8]
 80088ae:	8979      	ldrh	r1, [r7, #10]
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	4603      	mov	r3, r0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 fb60 	bl	8008f80 <I2C_RequestMemoryRead>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e1ec      	b.n	8008ca4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d113      	bne.n	80088fa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088d2:	2300      	movs	r3, #0
 80088d4:	61fb      	str	r3, [r7, #28]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	61fb      	str	r3, [r7, #28]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	61fb      	str	r3, [r7, #28]
 80088e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	e1c0      	b.n	8008c7c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d11e      	bne.n	8008940 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008910:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008912:	b672      	cpsid	i
}
 8008914:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008916:	2300      	movs	r3, #0
 8008918:	61bb      	str	r3, [r7, #24]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	61bb      	str	r3, [r7, #24]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	61bb      	str	r3, [r7, #24]
 800892a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800893a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800893c:	b662      	cpsie	i
}
 800893e:	e035      	b.n	80089ac <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008944:	2b02      	cmp	r3, #2
 8008946:	d11e      	bne.n	8008986 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008956:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008958:	b672      	cpsid	i
}
 800895a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800895c:	2300      	movs	r3, #0
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008980:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008982:	b662      	cpsie	i
}
 8008984:	e012      	b.n	80089ac <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008994:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008996:	2300      	movs	r3, #0
 8008998:	613b      	str	r3, [r7, #16]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	613b      	str	r3, [r7, #16]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	613b      	str	r3, [r7, #16]
 80089aa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80089ac:	e166      	b.n	8008c7c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	f200 811f 	bhi.w	8008bf6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d123      	bne.n	8008a08 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 fd1b 	bl	8009400 <I2C_WaitOnRXNEFlagUntilTimeout>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e167      	b.n	8008ca4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	691a      	ldr	r2, [r3, #16]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	b2d2      	uxtb	r2, r2
 80089e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	1c5a      	adds	r2, r3, #1
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f0:	3b01      	subs	r3, #1
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	3b01      	subs	r3, #1
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a06:	e139      	b.n	8008c7c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d152      	bne.n	8008ab6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a16:	2200      	movs	r2, #0
 8008a18:	4906      	ldr	r1, [pc, #24]	; (8008a34 <HAL_I2C_Mem_Read+0x24c>)
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 fb98 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d008      	beq.n	8008a38 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e13c      	b.n	8008ca4 <HAL_I2C_Mem_Read+0x4bc>
 8008a2a:	bf00      	nop
 8008a2c:	00100002 	.word	0x00100002
 8008a30:	ffff0000 	.word	0xffff0000
 8008a34:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008a38:	b672      	cpsid	i
}
 8008a3a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	691a      	ldr	r2, [r3, #16]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	b2d2      	uxtb	r2, r2
 8008a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008a7e:	b662      	cpsie	i
}
 8008a80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	691a      	ldr	r2, [r3, #16]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	b2d2      	uxtb	r2, r2
 8008a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	3b01      	subs	r3, #1
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ab4:	e0e2      	b.n	8008c7c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abc:	2200      	movs	r2, #0
 8008abe:	497b      	ldr	r1, [pc, #492]	; (8008cac <HAL_I2C_Mem_Read+0x4c4>)
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 fb45 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e0e9      	b.n	8008ca4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ade:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ae0:	b672      	cpsid	i
}
 8008ae2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	691a      	ldr	r2, [r3, #16]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b00:	3b01      	subs	r3, #1
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008b16:	4b66      	ldr	r3, [pc, #408]	; (8008cb0 <HAL_I2C_Mem_Read+0x4c8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	08db      	lsrs	r3, r3, #3
 8008b1c:	4a65      	ldr	r2, [pc, #404]	; (8008cb4 <HAL_I2C_Mem_Read+0x4cc>)
 8008b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b22:	0a1a      	lsrs	r2, r3, #8
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	00da      	lsls	r2, r3, #3
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d118      	bne.n	8008b6e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	f043 0220 	orr.w	r2, r3, #32
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008b5e:	b662      	cpsie	i
}
 8008b60:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e09a      	b.n	8008ca4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d1d9      	bne.n	8008b30 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	691a      	ldr	r2, [r3, #16]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	b2d2      	uxtb	r2, r2
 8008b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008bbe:	b662      	cpsie	i
}
 8008bc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	691a      	ldr	r2, [r3, #16]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	b2d2      	uxtb	r2, r2
 8008bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bde:	3b01      	subs	r3, #1
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	3b01      	subs	r3, #1
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bf4:	e042      	b.n	8008c7c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 fc00 	bl	8009400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e04c      	b.n	8008ca4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	691a      	ldr	r2, [r3, #16]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	b2d2      	uxtb	r2, r2
 8008c16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c26:	3b01      	subs	r3, #1
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	3b01      	subs	r3, #1
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	f003 0304 	and.w	r3, r3, #4
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	d118      	bne.n	8008c7c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	691a      	ldr	r2, [r3, #16]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	b2d2      	uxtb	r2, r2
 8008c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5c:	1c5a      	adds	r2, r3, #1
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c66:	3b01      	subs	r3, #1
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	3b01      	subs	r3, #1
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f47f ae94 	bne.w	80089ae <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	e000      	b.n	8008ca4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8008ca2:	2302      	movs	r3, #2
  }
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3728      	adds	r7, #40	; 0x28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	00010004 	.word	0x00010004
 8008cb0:	20000800 	.word	0x20000800
 8008cb4:	14f8b589 	.word	0x14f8b589

08008cb8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b088      	sub	sp, #32
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	607a      	str	r2, [r7, #4]
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cdc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2b08      	cmp	r3, #8
 8008ce2:	d006      	beq.n	8008cf2 <I2C_MasterRequestRead+0x3a>
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d003      	beq.n	8008cf2 <I2C_MasterRequestRead+0x3a>
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008cf0:	d108      	bne.n	8008d04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d00:	601a      	str	r2, [r3, #0]
 8008d02:	e00b      	b.n	8008d1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d08:	2b11      	cmp	r3, #17
 8008d0a:	d107      	bne.n	8008d1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 fa11 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00d      	beq.n	8008d50 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d42:	d103      	bne.n	8008d4c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e079      	b.n	8008e44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d58:	d108      	bne.n	8008d6c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008d5a:	897b      	ldrh	r3, [r7, #10]
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	611a      	str	r2, [r3, #16]
 8008d6a:	e05f      	b.n	8008e2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008d6c:	897b      	ldrh	r3, [r7, #10]
 8008d6e:	11db      	asrs	r3, r3, #7
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	f003 0306 	and.w	r3, r3, #6
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	f063 030f 	orn	r3, r3, #15
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	4930      	ldr	r1, [pc, #192]	; (8008e4c <I2C_MasterRequestRead+0x194>)
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 fa37 	bl	80091fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e054      	b.n	8008e44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008d9a:	897b      	ldrh	r3, [r7, #10]
 8008d9c:	b2da      	uxtb	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	4929      	ldr	r1, [pc, #164]	; (8008e50 <I2C_MasterRequestRead+0x198>)
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 fa27 	bl	80091fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e044      	b.n	8008e44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dba:	2300      	movs	r3, #0
 8008dbc:	613b      	str	r3, [r7, #16]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	613b      	str	r3, [r7, #16]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	613b      	str	r3, [r7, #16]
 8008dce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dde:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 f9af 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00d      	beq.n	8008e14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e06:	d103      	bne.n	8008e10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e017      	b.n	8008e44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008e14:	897b      	ldrh	r3, [r7, #10]
 8008e16:	11db      	asrs	r3, r3, #7
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	f003 0306 	and.w	r3, r3, #6
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	f063 030e 	orn	r3, r3, #14
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	4907      	ldr	r1, [pc, #28]	; (8008e50 <I2C_MasterRequestRead+0x198>)
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 f9e3 	bl	80091fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e000      	b.n	8008e44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	00010008 	.word	0x00010008
 8008e50:	00010002 	.word	0x00010002

08008e54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	4611      	mov	r1, r2
 8008e60:	461a      	mov	r2, r3
 8008e62:	4603      	mov	r3, r0
 8008e64:	817b      	strh	r3, [r7, #10]
 8008e66:	460b      	mov	r3, r1
 8008e68:	813b      	strh	r3, [r7, #8]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f000 f960 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00d      	beq.n	8008eb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ea4:	d103      	bne.n	8008eae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008eac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e05f      	b.n	8008f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008eb2:	897b      	ldrh	r3, [r7, #10]
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ec0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	6a3a      	ldr	r2, [r7, #32]
 8008ec6:	492d      	ldr	r1, [pc, #180]	; (8008f7c <I2C_RequestMemoryWrite+0x128>)
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f000 f998 	bl	80091fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e04c      	b.n	8008f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ed8:	2300      	movs	r3, #0
 8008eda:	617b      	str	r3, [r7, #20]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	617b      	str	r3, [r7, #20]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef0:	6a39      	ldr	r1, [r7, #32]
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 fa02 	bl	80092fc <I2C_WaitOnTXEFlagUntilTimeout>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00d      	beq.n	8008f1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	d107      	bne.n	8008f16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e02b      	b.n	8008f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f1a:	88fb      	ldrh	r3, [r7, #6]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d105      	bne.n	8008f2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f20:	893b      	ldrh	r3, [r7, #8]
 8008f22:	b2da      	uxtb	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	611a      	str	r2, [r3, #16]
 8008f2a:	e021      	b.n	8008f70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008f2c:	893b      	ldrh	r3, [r7, #8]
 8008f2e:	0a1b      	lsrs	r3, r3, #8
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3c:	6a39      	ldr	r1, [r7, #32]
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 f9dc 	bl	80092fc <I2C_WaitOnTXEFlagUntilTimeout>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00d      	beq.n	8008f66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d107      	bne.n	8008f62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e005      	b.n	8008f72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f66:	893b      	ldrh	r3, [r7, #8]
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	00010002 	.word	0x00010002

08008f80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af02      	add	r7, sp, #8
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	4608      	mov	r0, r1
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	4603      	mov	r3, r0
 8008f90:	817b      	strh	r3, [r7, #10]
 8008f92:	460b      	mov	r3, r1
 8008f94:	813b      	strh	r3, [r7, #8]
 8008f96:	4613      	mov	r3, r2
 8008f98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008fa8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 f8c2 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00d      	beq.n	8008fee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fe0:	d103      	bne.n	8008fea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e0aa      	b.n	8009144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008fee:	897b      	ldrh	r3, [r7, #10]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ffc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	6a3a      	ldr	r2, [r7, #32]
 8009002:	4952      	ldr	r1, [pc, #328]	; (800914c <I2C_RequestMemoryRead+0x1cc>)
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f000 f8fa 	bl	80091fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e097      	b.n	8009144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009014:	2300      	movs	r3, #0
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	617b      	str	r3, [r7, #20]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	617b      	str	r3, [r7, #20]
 8009028:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800902a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902c:	6a39      	ldr	r1, [r7, #32]
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f000 f964 	bl	80092fc <I2C_WaitOnTXEFlagUntilTimeout>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00d      	beq.n	8009056 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	2b04      	cmp	r3, #4
 8009040:	d107      	bne.n	8009052 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009050:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e076      	b.n	8009144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009056:	88fb      	ldrh	r3, [r7, #6]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d105      	bne.n	8009068 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800905c:	893b      	ldrh	r3, [r7, #8]
 800905e:	b2da      	uxtb	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	611a      	str	r2, [r3, #16]
 8009066:	e021      	b.n	80090ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009068:	893b      	ldrh	r3, [r7, #8]
 800906a:	0a1b      	lsrs	r3, r3, #8
 800906c:	b29b      	uxth	r3, r3
 800906e:	b2da      	uxtb	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009078:	6a39      	ldr	r1, [r7, #32]
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 f93e 	bl	80092fc <I2C_WaitOnTXEFlagUntilTimeout>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00d      	beq.n	80090a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908a:	2b04      	cmp	r3, #4
 800908c:	d107      	bne.n	800909e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800909c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e050      	b.n	8009144 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80090a2:	893b      	ldrh	r3, [r7, #8]
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ae:	6a39      	ldr	r1, [r7, #32]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 f923 	bl	80092fc <I2C_WaitOnTXEFlagUntilTimeout>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00d      	beq.n	80090d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c0:	2b04      	cmp	r3, #4
 80090c2:	d107      	bne.n	80090d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e035      	b.n	8009144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 f82b 	bl	8009150 <I2C_WaitOnFlagUntilTimeout>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00d      	beq.n	800911c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800910e:	d103      	bne.n	8009118 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009116:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e013      	b.n	8009144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800911c:	897b      	ldrh	r3, [r7, #10]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	f043 0301 	orr.w	r3, r3, #1
 8009124:	b2da      	uxtb	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	6a3a      	ldr	r2, [r7, #32]
 8009130:	4906      	ldr	r1, [pc, #24]	; (800914c <I2C_RequestMemoryRead+0x1cc>)
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 f863 	bl	80091fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e000      	b.n	8009144 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3718      	adds	r7, #24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	00010002 	.word	0x00010002

08009150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	603b      	str	r3, [r7, #0]
 800915c:	4613      	mov	r3, r2
 800915e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009160:	e025      	b.n	80091ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009168:	d021      	beq.n	80091ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800916a:	f7fd fb59 	bl	8006820 <HAL_GetTick>
 800916e:	4602      	mov	r2, r0
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	429a      	cmp	r2, r3
 8009178:	d302      	bcc.n	8009180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d116      	bne.n	80091ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2220      	movs	r2, #32
 800918a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919a:	f043 0220 	orr.w	r2, r3, #32
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e023      	b.n	80091f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	0c1b      	lsrs	r3, r3, #16
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d10d      	bne.n	80091d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	43da      	mvns	r2, r3
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	4013      	ands	r3, r2
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	bf0c      	ite	eq
 80091ca:	2301      	moveq	r3, #1
 80091cc:	2300      	movne	r3, #0
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	e00c      	b.n	80091ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	43da      	mvns	r2, r3
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	4013      	ands	r3, r2
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	bf0c      	ite	eq
 80091e6:	2301      	moveq	r3, #1
 80091e8:	2300      	movne	r3, #0
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	461a      	mov	r2, r3
 80091ee:	79fb      	ldrb	r3, [r7, #7]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d0b6      	beq.n	8009162 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	60f8      	str	r0, [r7, #12]
 8009206:	60b9      	str	r1, [r7, #8]
 8009208:	607a      	str	r2, [r7, #4]
 800920a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800920c:	e051      	b.n	80092b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	695b      	ldr	r3, [r3, #20]
 8009214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800921c:	d123      	bne.n	8009266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800922c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009236:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2220      	movs	r2, #32
 8009242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009252:	f043 0204 	orr.w	r2, r3, #4
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e046      	b.n	80092f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800926c:	d021      	beq.n	80092b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800926e:	f7fd fad7 	bl	8006820 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	429a      	cmp	r2, r3
 800927c:	d302      	bcc.n	8009284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d116      	bne.n	80092b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2220      	movs	r2, #32
 800928e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929e:	f043 0220 	orr.w	r2, r3, #32
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e020      	b.n	80092f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	0c1b      	lsrs	r3, r3, #16
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d10c      	bne.n	80092d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	43da      	mvns	r2, r3
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	4013      	ands	r3, r2
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bf14      	ite	ne
 80092ce:	2301      	movne	r3, #1
 80092d0:	2300      	moveq	r3, #0
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	e00b      	b.n	80092ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	43da      	mvns	r2, r3
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	4013      	ands	r3, r2
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	bf14      	ite	ne
 80092e8:	2301      	movne	r3, #1
 80092ea:	2300      	moveq	r3, #0
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d18d      	bne.n	800920e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009308:	e02d      	b.n	8009366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 f8ce 	bl	80094ac <I2C_IsAcknowledgeFailed>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e02d      	b.n	8009376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009320:	d021      	beq.n	8009366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009322:	f7fd fa7d 	bl	8006820 <HAL_GetTick>
 8009326:	4602      	mov	r2, r0
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	429a      	cmp	r2, r3
 8009330:	d302      	bcc.n	8009338 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d116      	bne.n	8009366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2220      	movs	r2, #32
 8009342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	f043 0220 	orr.w	r2, r3, #32
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e007      	b.n	8009376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009370:	2b80      	cmp	r3, #128	; 0x80
 8009372:	d1ca      	bne.n	800930a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800938a:	e02d      	b.n	80093e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f000 f88d 	bl	80094ac <I2C_IsAcknowledgeFailed>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d001      	beq.n	800939c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e02d      	b.n	80093f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093a2:	d021      	beq.n	80093e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093a4:	f7fd fa3c 	bl	8006820 <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d302      	bcc.n	80093ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d116      	bne.n	80093e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2220      	movs	r2, #32
 80093c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d4:	f043 0220 	orr.w	r2, r3, #32
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e007      	b.n	80093f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	f003 0304 	and.w	r3, r3, #4
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	d1ca      	bne.n	800938c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800940c:	e042      	b.n	8009494 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	f003 0310 	and.w	r3, r3, #16
 8009418:	2b10      	cmp	r3, #16
 800941a:	d119      	bne.n	8009450 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f06f 0210 	mvn.w	r2, #16
 8009424:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2220      	movs	r2, #32
 8009430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e029      	b.n	80094a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009450:	f7fd f9e6 	bl	8006820 <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	429a      	cmp	r2, r3
 800945e:	d302      	bcc.n	8009466 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d116      	bne.n	8009494 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2220      	movs	r2, #32
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009480:	f043 0220 	orr.w	r2, r3, #32
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e007      	b.n	80094a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949e:	2b40      	cmp	r3, #64	; 0x40
 80094a0:	d1b5      	bne.n	800940e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094c2:	d11b      	bne.n	80094fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80094cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2220      	movs	r2, #32
 80094d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e8:	f043 0204 	orr.w	r2, r3, #4
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e000      	b.n	80094fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	bc80      	pop	{r7}
 8009506:	4770      	bx	lr

08009508 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800950a:	b08b      	sub	sp, #44	; 0x2c
 800950c:	af06      	add	r7, sp, #24
 800950e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e0fd      	b.n	8009716 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b00      	cmp	r3, #0
 8009524:	d106      	bne.n	8009534 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f008 fe58 	bl	80121e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2203      	movs	r2, #3
 8009538:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4618      	mov	r0, r3
 8009542:	f004 fb9d 	bl	800dc80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	603b      	str	r3, [r7, #0]
 800954c:	687e      	ldr	r6, [r7, #4]
 800954e:	466d      	mov	r5, sp
 8009550:	f106 0410 	add.w	r4, r6, #16
 8009554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	602b      	str	r3, [r5, #0]
 800955c:	1d33      	adds	r3, r6, #4
 800955e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009560:	6838      	ldr	r0, [r7, #0]
 8009562:	f004 fb67 	bl	800dc34 <USB_CoreInit>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d005      	beq.n	8009578 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2202      	movs	r2, #2
 8009570:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e0ce      	b.n	8009716 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2100      	movs	r1, #0
 800957e:	4618      	mov	r0, r3
 8009580:	f004 fb98 	bl	800dcb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]
 8009588:	e04c      	b.n	8009624 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800958a:	7bfb      	ldrb	r3, [r7, #15]
 800958c:	6879      	ldr	r1, [r7, #4]
 800958e:	1c5a      	adds	r2, r3, #1
 8009590:	4613      	mov	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	440b      	add	r3, r1
 800959a:	3301      	adds	r3, #1
 800959c:	2201      	movs	r2, #1
 800959e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	1c5a      	adds	r2, r3, #1
 80095a6:	4613      	mov	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	00db      	lsls	r3, r3, #3
 80095ae:	440b      	add	r3, r1
 80095b0:	7bfa      	ldrb	r2, [r7, #15]
 80095b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80095b4:	7bfa      	ldrb	r2, [r7, #15]
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	b298      	uxth	r0, r3
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	4613      	mov	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	440b      	add	r3, r1
 80095c6:	3336      	adds	r3, #54	; 0x36
 80095c8:	4602      	mov	r2, r0
 80095ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	1c5a      	adds	r2, r3, #1
 80095d2:	4613      	mov	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	440b      	add	r3, r1
 80095dc:	3303      	adds	r3, #3
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80095e2:	7bfa      	ldrb	r2, [r7, #15]
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	440b      	add	r3, r1
 80095f0:	3338      	adds	r3, #56	; 0x38
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80095f6:	7bfa      	ldrb	r2, [r7, #15]
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	00db      	lsls	r3, r3, #3
 8009602:	440b      	add	r3, r1
 8009604:	333c      	adds	r3, #60	; 0x3c
 8009606:	2200      	movs	r2, #0
 8009608:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800960a:	7bfa      	ldrb	r2, [r7, #15]
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	4613      	mov	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	00db      	lsls	r3, r3, #3
 8009616:	440b      	add	r3, r1
 8009618:	3340      	adds	r3, #64	; 0x40
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	3301      	adds	r3, #1
 8009622:	73fb      	strb	r3, [r7, #15]
 8009624:	7bfa      	ldrb	r2, [r7, #15]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	429a      	cmp	r2, r3
 800962c:	d3ad      	bcc.n	800958a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800962e:	2300      	movs	r3, #0
 8009630:	73fb      	strb	r3, [r7, #15]
 8009632:	e044      	b.n	80096be <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009634:	7bfa      	ldrb	r2, [r7, #15]
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	440b      	add	r3, r1
 8009642:	f203 1369 	addw	r3, r3, #361	; 0x169
 8009646:	2200      	movs	r2, #0
 8009648:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800964a:	7bfa      	ldrb	r2, [r7, #15]
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	00db      	lsls	r3, r3, #3
 8009656:	440b      	add	r3, r1
 8009658:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800965c:	7bfa      	ldrb	r2, [r7, #15]
 800965e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009660:	7bfa      	ldrb	r2, [r7, #15]
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	4613      	mov	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	00db      	lsls	r3, r3, #3
 800966c:	440b      	add	r3, r1
 800966e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8009672:	2200      	movs	r2, #0
 8009674:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009676:	7bfa      	ldrb	r2, [r7, #15]
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	4613      	mov	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	00db      	lsls	r3, r3, #3
 8009682:	440b      	add	r3, r1
 8009684:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800968c:	7bfa      	ldrb	r2, [r7, #15]
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	4613      	mov	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	00db      	lsls	r3, r3, #3
 8009698:	440b      	add	r3, r1
 800969a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80096a2:	7bfa      	ldrb	r2, [r7, #15]
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	4613      	mov	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	00db      	lsls	r3, r3, #3
 80096ae:	440b      	add	r3, r1
 80096b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	3301      	adds	r3, #1
 80096bc:	73fb      	strb	r3, [r7, #15]
 80096be:	7bfa      	ldrb	r2, [r7, #15]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d3b5      	bcc.n	8009634 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	603b      	str	r3, [r7, #0]
 80096ce:	687e      	ldr	r6, [r7, #4]
 80096d0:	466d      	mov	r5, sp
 80096d2:	f106 0410 	add.w	r4, r6, #16
 80096d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	602b      	str	r3, [r5, #0]
 80096de:	1d33      	adds	r3, r6, #4
 80096e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096e2:	6838      	ldr	r0, [r7, #0]
 80096e4:	f004 faf2 	bl	800dccc <USB_DevInit>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2202      	movs	r2, #2
 80096f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e00d      	b.n	8009716 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4618      	mov	r0, r3
 8009710:	f006 ffa4 	bl	801065c <USB_DevDisconnect>

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800971e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800972c:	2b01      	cmp	r3, #1
 800972e:	d101      	bne.n	8009734 <HAL_PCD_Start+0x16>
 8009730:	2302      	movs	r3, #2
 8009732:	e016      	b.n	8009762 <HAL_PCD_Start+0x44>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4618      	mov	r0, r3
 8009742:	f004 fa87 	bl	800dc54 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8009746:	2101      	movs	r1, #1
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f008 ffbe 	bl	80126ca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f006 ff78 	bl	8010648 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b088      	sub	sp, #32
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4618      	mov	r0, r3
 8009778:	f006 ff7a 	bl	8010670 <USB_ReadInterrupts>
 800977c:	4603      	mov	r3, r0
 800977e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009786:	d102      	bne.n	800978e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fb5f 	bl	8009e4c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4618      	mov	r0, r3
 8009794:	f006 ff6c 	bl	8010670 <USB_ReadInterrupts>
 8009798:	4603      	mov	r3, r0
 800979a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800979e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097a2:	d112      	bne.n	80097ca <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097b6:	b292      	uxth	r2, r2
 80097b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f008 fd8c 	bl	80122da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80097c2:	2100      	movs	r1, #0
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f923 	bl	8009a10 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f006 ff4e 	bl	8010670 <USB_ReadInterrupts>
 80097d4:	4603      	mov	r3, r0
 80097d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097de:	d10b      	bne.n	80097f8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097f2:	b292      	uxth	r2, r2
 80097f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f006 ff37 	bl	8010670 <USB_ReadInterrupts>
 8009802:	4603      	mov	r3, r0
 8009804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800980c:	d10b      	bne.n	8009826 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009816:	b29a      	uxth	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009820:	b292      	uxth	r2, r2
 8009822:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4618      	mov	r0, r3
 800982c:	f006 ff20 	bl	8010670 <USB_ReadInterrupts>
 8009830:	4603      	mov	r3, r0
 8009832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800983a:	d126      	bne.n	800988a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009844:	b29a      	uxth	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f022 0204 	bic.w	r2, r2, #4
 800984e:	b292      	uxth	r2, r2
 8009850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800985c:	b29a      	uxth	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f022 0208 	bic.w	r2, r2, #8
 8009866:	b292      	uxth	r2, r2
 8009868:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f008 fd6d 	bl	801234c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800987a:	b29a      	uxth	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009884:	b292      	uxth	r2, r2
 8009886:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4618      	mov	r0, r3
 8009890:	f006 feee 	bl	8010670 <USB_ReadInterrupts>
 8009894:	4603      	mov	r3, r0
 8009896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800989a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800989e:	f040 8082 	bne.w	80099a6 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80098a2:	2300      	movs	r3, #0
 80098a4:	77fb      	strb	r3, [r7, #31]
 80098a6:	e010      	b.n	80098ca <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	461a      	mov	r2, r3
 80098ae:	7ffb      	ldrb	r3, [r7, #31]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	441a      	add	r2, r3
 80098b4:	7ffb      	ldrb	r3, [r7, #31]
 80098b6:	8812      	ldrh	r2, [r2, #0]
 80098b8:	b292      	uxth	r2, r2
 80098ba:	005b      	lsls	r3, r3, #1
 80098bc:	3320      	adds	r3, #32
 80098be:	443b      	add	r3, r7
 80098c0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80098c4:	7ffb      	ldrb	r3, [r7, #31]
 80098c6:	3301      	adds	r3, #1
 80098c8:	77fb      	strb	r3, [r7, #31]
 80098ca:	7ffb      	ldrb	r3, [r7, #31]
 80098cc:	2b07      	cmp	r3, #7
 80098ce:	d9eb      	bls.n	80098a8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80098d8:	b29a      	uxth	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f042 0201 	orr.w	r2, r2, #1
 80098e2:	b292      	uxth	r2, r2
 80098e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 0201 	bic.w	r2, r2, #1
 80098fa:	b292      	uxth	r2, r2
 80098fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8009900:	bf00      	nop
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800990a:	b29b      	uxth	r3, r3
 800990c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009910:	2b00      	cmp	r3, #0
 8009912:	d0f6      	beq.n	8009902 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800991c:	b29a      	uxth	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009926:	b292      	uxth	r2, r2
 8009928:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800992c:	2300      	movs	r3, #0
 800992e:	77fb      	strb	r3, [r7, #31]
 8009930:	e00f      	b.n	8009952 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8009932:	7ffb      	ldrb	r3, [r7, #31]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	6812      	ldr	r2, [r2, #0]
 8009938:	4611      	mov	r1, r2
 800993a:	7ffa      	ldrb	r2, [r7, #31]
 800993c:	0092      	lsls	r2, r2, #2
 800993e:	440a      	add	r2, r1
 8009940:	005b      	lsls	r3, r3, #1
 8009942:	3320      	adds	r3, #32
 8009944:	443b      	add	r3, r7
 8009946:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800994a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800994c:	7ffb      	ldrb	r3, [r7, #31]
 800994e:	3301      	adds	r3, #1
 8009950:	77fb      	strb	r3, [r7, #31]
 8009952:	7ffb      	ldrb	r3, [r7, #31]
 8009954:	2b07      	cmp	r3, #7
 8009956:	d9ec      	bls.n	8009932 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009960:	b29a      	uxth	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f042 0208 	orr.w	r2, r2, #8
 800996a:	b292      	uxth	r2, r2
 800996c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009978:	b29a      	uxth	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009982:	b292      	uxth	r2, r2
 8009984:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009990:	b29a      	uxth	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0204 	orr.w	r2, r2, #4
 800999a:	b292      	uxth	r2, r2
 800999c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f008 fcb9 	bl	8012318 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f006 fe60 	bl	8010670 <USB_ReadInterrupts>
 80099b0:	4603      	mov	r3, r0
 80099b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ba:	d10e      	bne.n	80099da <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80099ce:	b292      	uxth	r2, r2
 80099d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f008 fc72 	bl	80122be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4618      	mov	r0, r3
 80099e0:	f006 fe46 	bl	8010670 <USB_ReadInterrupts>
 80099e4:	4603      	mov	r3, r0
 80099e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ee:	d10b      	bne.n	8009a08 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a02:	b292      	uxth	r2, r2
 8009a04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8009a08:	bf00      	nop
 8009a0a:	3720      	adds	r7, #32
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d101      	bne.n	8009a2a <HAL_PCD_SetAddress+0x1a>
 8009a26:	2302      	movs	r3, #2
 8009a28:	e013      	b.n	8009a52 <HAL_PCD_SetAddress+0x42>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	78fa      	ldrb	r2, [r7, #3]
 8009a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	78fa      	ldrb	r2, [r7, #3]
 8009a40:	4611      	mov	r1, r2
 8009a42:	4618      	mov	r0, r3
 8009a44:	f006 fded 	bl	8010622 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	4608      	mov	r0, r1
 8009a64:	4611      	mov	r1, r2
 8009a66:	461a      	mov	r2, r3
 8009a68:	4603      	mov	r3, r0
 8009a6a:	70fb      	strb	r3, [r7, #3]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	803b      	strh	r3, [r7, #0]
 8009a70:	4613      	mov	r3, r2
 8009a72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	da0e      	bge.n	8009a9e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a80:	78fb      	ldrb	r3, [r7, #3]
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	1c5a      	adds	r2, r3, #1
 8009a88:	4613      	mov	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	00db      	lsls	r3, r3, #3
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	4413      	add	r3, r2
 8009a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	705a      	strb	r2, [r3, #1]
 8009a9c:	e00e      	b.n	8009abc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a9e:	78fb      	ldrb	r3, [r7, #3]
 8009aa0:	f003 0207 	and.w	r2, r3, #7
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	00db      	lsls	r3, r3, #3
 8009aac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009abc:	78fb      	ldrb	r3, [r7, #3]
 8009abe:	f003 0307 	and.w	r3, r3, #7
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009ac8:	883a      	ldrh	r2, [r7, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	78ba      	ldrb	r2, [r7, #2]
 8009ad2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	785b      	ldrb	r3, [r3, #1]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d004      	beq.n	8009ae6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009ae6:	78bb      	ldrb	r3, [r7, #2]
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d102      	bne.n	8009af2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d101      	bne.n	8009b00 <HAL_PCD_EP_Open+0xa6>
 8009afc:	2302      	movs	r3, #2
 8009afe:	e00e      	b.n	8009b1e <HAL_PCD_EP_Open+0xc4>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68f9      	ldr	r1, [r7, #12]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f004 f8fc 	bl	800dd0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8009b1c:	7afb      	ldrb	r3, [r7, #11]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	460b      	mov	r3, r1
 8009b30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	da0e      	bge.n	8009b58 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b3a:	78fb      	ldrb	r3, [r7, #3]
 8009b3c:	f003 0307 	and.w	r3, r3, #7
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	4613      	mov	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2201      	movs	r2, #1
 8009b54:	705a      	strb	r2, [r3, #1]
 8009b56:	e00e      	b.n	8009b76 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b58:	78fb      	ldrb	r3, [r7, #3]
 8009b5a:	f003 0207 	and.w	r2, r3, #7
 8009b5e:	4613      	mov	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009b76:	78fb      	ldrb	r3, [r7, #3]
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d101      	bne.n	8009b90 <HAL_PCD_EP_Close+0x6a>
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	e00e      	b.n	8009bae <HAL_PCD_EP_Close+0x88>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68f9      	ldr	r1, [r7, #12]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f004 fc1e 	bl	800e3e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b086      	sub	sp, #24
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	60f8      	str	r0, [r7, #12]
 8009bbe:	607a      	str	r2, [r7, #4]
 8009bc0:	603b      	str	r3, [r7, #0]
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009bc6:	7afb      	ldrb	r3, [r7, #11]
 8009bc8:	f003 0207 	and.w	r2, r3, #7
 8009bcc:	4613      	mov	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	00db      	lsls	r3, r3, #3
 8009bd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	4413      	add	r3, r2
 8009bdc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2200      	movs	r2, #0
 8009bee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009bf6:	7afb      	ldrb	r3, [r7, #11]
 8009bf8:	f003 0307 	and.w	r3, r3, #7
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009c02:	7afb      	ldrb	r3, [r7, #11]
 8009c04:	f003 0307 	and.w	r3, r3, #7
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d106      	bne.n	8009c1a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6979      	ldr	r1, [r7, #20]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f004 fdd0 	bl	800e7b8 <USB_EPStartXfer>
 8009c18:	e005      	b.n	8009c26 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6979      	ldr	r1, [r7, #20]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f004 fdc9 	bl	800e7b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009c3c:	78fb      	ldrb	r3, [r7, #3]
 8009c3e:	f003 0207 	and.w	r2, r3, #7
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	4613      	mov	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	00db      	lsls	r3, r3, #3
 8009c4c:	440b      	add	r3, r1
 8009c4e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009c52:	681b      	ldr	r3, [r3, #0]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bc80      	pop	{r7}
 8009c5c:	4770      	bx	lr

08009c5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b086      	sub	sp, #24
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c6e:	7afb      	ldrb	r3, [r7, #11]
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	4613      	mov	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	00db      	lsls	r3, r3, #3
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	4413      	add	r3, r2
 8009c82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009caa:	7afb      	ldrb	r3, [r7, #11]
 8009cac:	f003 0307 	and.w	r3, r3, #7
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009cb6:	7afb      	ldrb	r3, [r7, #11]
 8009cb8:	f003 0307 	and.w	r3, r3, #7
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d106      	bne.n	8009cce <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6979      	ldr	r1, [r7, #20]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f004 fd76 	bl	800e7b8 <USB_EPStartXfer>
 8009ccc:	e005      	b.n	8009cda <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6979      	ldr	r1, [r7, #20]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f004 fd6f 	bl	800e7b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009cf0:	78fb      	ldrb	r3, [r7, #3]
 8009cf2:	f003 0207 	and.w	r2, r3, #7
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d901      	bls.n	8009d02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e04c      	b.n	8009d9c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	da0e      	bge.n	8009d28 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	f003 0307 	and.w	r3, r3, #7
 8009d10:	1c5a      	adds	r2, r3, #1
 8009d12:	4613      	mov	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4413      	add	r3, r2
 8009d18:	00db      	lsls	r3, r3, #3
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2201      	movs	r2, #1
 8009d24:	705a      	strb	r2, [r3, #1]
 8009d26:	e00c      	b.n	8009d42 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009d28:	78fa      	ldrb	r2, [r7, #3]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	4413      	add	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2201      	movs	r2, #1
 8009d46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d48:	78fb      	ldrb	r3, [r7, #3]
 8009d4a:	f003 0307 	and.w	r3, r3, #7
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d101      	bne.n	8009d62 <HAL_PCD_EP_SetStall+0x7e>
 8009d5e:	2302      	movs	r3, #2
 8009d60:	e01c      	b.n	8009d9c <HAL_PCD_EP_SetStall+0xb8>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f006 fb59 	bl	8010428 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009d76:	78fb      	ldrb	r3, [r7, #3]
 8009d78:	f003 0307 	and.w	r3, r3, #7
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d108      	bne.n	8009d92 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	f006 fc7e 	bl	801068e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	f003 020f 	and.w	r2, r3, #15
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d901      	bls.n	8009dc2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e040      	b.n	8009e44 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	da0e      	bge.n	8009de8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009dca:	78fb      	ldrb	r3, [r7, #3]
 8009dcc:	f003 0307 	and.w	r3, r3, #7
 8009dd0:	1c5a      	adds	r2, r3, #1
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	00db      	lsls	r3, r3, #3
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	4413      	add	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2201      	movs	r2, #1
 8009de4:	705a      	strb	r2, [r3, #1]
 8009de6:	e00e      	b.n	8009e06 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	f003 0207 	and.w	r2, r3, #7
 8009dee:	4613      	mov	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	00db      	lsls	r3, r3, #3
 8009df6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	f003 0307 	and.w	r3, r3, #7
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d101      	bne.n	8009e26 <HAL_PCD_EP_ClrStall+0x82>
 8009e22:	2302      	movs	r3, #2
 8009e24:	e00e      	b.n	8009e44 <HAL_PCD_EP_ClrStall+0xa0>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68f9      	ldr	r1, [r7, #12]
 8009e34:	4618      	mov	r0, r3
 8009e36:	f006 fb47 	bl	80104c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b08e      	sub	sp, #56	; 0x38
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009e54:	e2ec      	b.n	800a430 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009e5e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009e60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8009e6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f040 8161 	bne.w	800a138 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009e76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e78:	f003 0310 	and.w	r3, r3, #16
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d152      	bne.n	8009f26 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e90:	81fb      	strh	r3, [r7, #14]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	89fb      	ldrh	r3, [r7, #14]
 8009e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	3328      	adds	r3, #40	; 0x28
 8009ea8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	00db      	lsls	r3, r3, #3
 8009ebc:	4413      	add	r3, r2
 8009ebe:	3302      	adds	r3, #2
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	6812      	ldr	r2, [r2, #0]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ecc:	881b      	ldrh	r3, [r3, #0]
 8009ece:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	695a      	ldr	r2, [r3, #20]
 8009eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009edc:	69db      	ldr	r3, [r3, #28]
 8009ede:	441a      	add	r2, r3
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f008 f9cf 	bl	801228a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f000 829b 	beq.w	800a430 <PCD_EP_ISR_Handler+0x5e4>
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	699b      	ldr	r3, [r3, #24]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f040 8296 	bne.w	800a430 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	b292      	uxth	r2, r2
 8009f18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009f24:	e284      	b.n	800a430 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009f2c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009f36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d034      	beq.n	8009faa <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	00db      	lsls	r3, r3, #3
 8009f52:	4413      	add	r3, r2
 8009f54:	3306      	adds	r3, #6
 8009f56:	005b      	lsls	r3, r3, #1
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	6812      	ldr	r2, [r2, #0]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6818      	ldr	r0, [r3, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	f006 fbd5 	bl	801072e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	881b      	ldrh	r3, [r3, #0]
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009f90:	4013      	ands	r3, r2
 8009f92:	823b      	strh	r3, [r7, #16]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	8a3a      	ldrh	r2, [r7, #16]
 8009f9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f9e:	b292      	uxth	r2, r2
 8009fa0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f008 f944 	bl	8012230 <HAL_PCD_SetupStageCallback>
 8009fa8:	e242      	b.n	800a430 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009faa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f280 823e 	bge.w	800a430 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	881b      	ldrh	r3, [r3, #0]
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	83bb      	strh	r3, [r7, #28]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	8bba      	ldrh	r2, [r7, #28]
 8009fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009fce:	b292      	uxth	r2, r2
 8009fd0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	461a      	mov	r2, r3
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	00db      	lsls	r3, r3, #3
 8009fe4:	4413      	add	r3, r2
 8009fe6:	3306      	adds	r3, #6
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	6812      	ldr	r2, [r2, #0]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ff4:	881b      	ldrh	r3, [r3, #0]
 8009ff6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d019      	beq.n	800a03a <PCD_EP_ISR_Handler+0x1ee>
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d015      	beq.n	800a03a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	6959      	ldr	r1, [r3, #20]
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a01e:	b29b      	uxth	r3, r3
 800a020:	f006 fb85 	bl	801072e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	695a      	ldr	r2, [r3, #20]
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	69db      	ldr	r3, [r3, #28]
 800a02c:	441a      	add	r2, r3
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a032:	2100      	movs	r1, #0
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f008 f90d 	bl	8012254 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	881b      	ldrh	r3, [r3, #0]
 800a040:	b29b      	uxth	r3, r3
 800a042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a046:	2b00      	cmp	r3, #0
 800a048:	f040 81f2 	bne.w	800a430 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	61bb      	str	r3, [r7, #24]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	461a      	mov	r2, r3
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	4413      	add	r3, r2
 800a062:	61bb      	str	r3, [r7, #24]
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a06a:	617b      	str	r3, [r7, #20]
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d112      	bne.n	800a09a <PCD_EP_ISR_Handler+0x24e>
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a07e:	b29a      	uxth	r2, r3
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	801a      	strh	r2, [r3, #0]
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a08e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a092:	b29a      	uxth	r2, r3
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	801a      	strh	r2, [r3, #0]
 800a098:	e02f      	b.n	800a0fa <PCD_EP_ISR_Handler+0x2ae>
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	2b3e      	cmp	r3, #62	; 0x3e
 800a0a0:	d813      	bhi.n	800a0ca <PCD_EP_ISR_Handler+0x27e>
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	085b      	lsrs	r3, r3, #1
 800a0a8:	633b      	str	r3, [r7, #48]	; 0x30
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d002      	beq.n	800a0bc <PCD_EP_ISR_Handler+0x270>
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	633b      	str	r3, [r7, #48]	; 0x30
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	029b      	lsls	r3, r3, #10
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	801a      	strh	r2, [r3, #0]
 800a0c8:	e017      	b.n	800a0fa <PCD_EP_ISR_Handler+0x2ae>
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	095b      	lsrs	r3, r3, #5
 800a0d0:	633b      	str	r3, [r7, #48]	; 0x30
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	f003 031f 	and.w	r3, r3, #31
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d102      	bne.n	800a0e4 <PCD_EP_ISR_Handler+0x298>
 800a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	633b      	str	r3, [r7, #48]	; 0x30
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	029b      	lsls	r3, r3, #10
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	881b      	ldrh	r3, [r3, #0]
 800a100:	b29b      	uxth	r3, r3
 800a102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a10a:	827b      	strh	r3, [r7, #18]
 800a10c:	8a7b      	ldrh	r3, [r7, #18]
 800a10e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a112:	827b      	strh	r3, [r7, #18]
 800a114:	8a7b      	ldrh	r3, [r7, #18]
 800a116:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a11a:	827b      	strh	r3, [r7, #18]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	8a7b      	ldrh	r3, [r7, #18]
 800a122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a12a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a12e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a132:	b29b      	uxth	r3, r3
 800a134:	8013      	strh	r3, [r2, #0]
 800a136:	e17b      	b.n	800a430 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	461a      	mov	r2, r3
 800a13e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	4413      	add	r3, r2
 800a146:	881b      	ldrh	r3, [r3, #0]
 800a148:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a14a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f280 80ea 	bge.w	800a328 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	461a      	mov	r2, r3
 800a15a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4413      	add	r3, r2
 800a162:	881b      	ldrh	r3, [r3, #0]
 800a164:	b29a      	uxth	r2, r3
 800a166:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a16a:	4013      	ands	r3, r2
 800a16c:	853b      	strh	r3, [r7, #40]	; 0x28
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4413      	add	r3, r2
 800a17c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a17e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a182:	b292      	uxth	r2, r2
 800a184:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a186:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800a18a:	4613      	mov	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	00db      	lsls	r3, r3, #3
 800a192:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	4413      	add	r3, r2
 800a19a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	7b1b      	ldrb	r3, [r3, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d122      	bne.n	800a1ea <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	00db      	lsls	r3, r3, #3
 800a1b6:	4413      	add	r3, r2
 800a1b8:	3306      	adds	r3, #6
 800a1ba:	005b      	lsls	r3, r3, #1
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	6812      	ldr	r2, [r2, #0]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1cc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800a1ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 8087 	beq.w	800a2e4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6818      	ldr	r0, [r3, #0]
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	6959      	ldr	r1, [r3, #20]
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	88da      	ldrh	r2, [r3, #6]
 800a1e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a1e4:	f006 faa3 	bl	801072e <USB_ReadPMA>
 800a1e8:	e07c      	b.n	800a2e4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	78db      	ldrb	r3, [r3, #3]
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d108      	bne.n	800a204 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a1f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f927 	bl	800a44c <HAL_PCD_EP_DB_Receive>
 800a1fe:	4603      	mov	r3, r0
 800a200:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a202:	e06f      	b.n	800a2e4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	461a      	mov	r2, r3
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4413      	add	r3, r2
 800a212:	881b      	ldrh	r3, [r3, #0]
 800a214:	b29b      	uxth	r3, r3
 800a216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a21a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a21e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	461a      	mov	r2, r3
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	441a      	add	r2, r3
 800a22e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a23c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a240:	b29b      	uxth	r3, r3
 800a242:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	b29b      	uxth	r3, r3
 800a256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d021      	beq.n	800a2a2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a266:	b29b      	uxth	r3, r3
 800a268:	461a      	mov	r2, r3
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	00db      	lsls	r3, r3, #3
 800a270:	4413      	add	r3, r2
 800a272:	3302      	adds	r3, #2
 800a274:	005b      	lsls	r3, r3, #1
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	6812      	ldr	r2, [r2, #0]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a286:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800a288:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d02a      	beq.n	800a2e4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6818      	ldr	r0, [r3, #0]
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	6959      	ldr	r1, [r3, #20]
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	891a      	ldrh	r2, [r3, #8]
 800a29a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a29c:	f006 fa47 	bl	801072e <USB_ReadPMA>
 800a2a0:	e020      	b.n	800a2e4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	00db      	lsls	r3, r3, #3
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3306      	adds	r3, #6
 800a2b8:	005b      	lsls	r3, r3, #1
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	6812      	ldr	r2, [r2, #0]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2ca:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800a2cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d008      	beq.n	800a2e4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6818      	ldr	r0, [r3, #0]
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d8:	6959      	ldr	r1, [r3, #20]
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	895a      	ldrh	r2, [r3, #10]
 800a2de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2e0:	f006 fa25 	bl	801072e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e6:	69da      	ldr	r2, [r3, #28]
 800a2e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2ea:	441a      	add	r2, r3
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	695a      	ldr	r2, [r3, #20]
 800a2f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2f6:	441a      	add	r2, r3
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d004      	beq.n	800a30e <PCD_EP_ISR_Handler+0x4c2>
 800a304:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d206      	bcs.n	800a31c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	4619      	mov	r1, r3
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f007 ff9d 	bl	8012254 <HAL_PCD_DataOutStageCallback>
 800a31a:	e005      	b.n	800a328 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a322:	4618      	mov	r0, r3
 800a324:	f004 fa48 	bl	800e7b8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a328:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d07e      	beq.n	800a430 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800a332:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	4613      	mov	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	00db      	lsls	r3, r3, #3
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	4413      	add	r3, r2
 800a344:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	461a      	mov	r2, r3
 800a34c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	881b      	ldrh	r3, [r3, #0]
 800a356:	b29b      	uxth	r3, r3
 800a358:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a35c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a360:	843b      	strh	r3, [r7, #32]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	461a      	mov	r2, r3
 800a368:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	441a      	add	r2, r3
 800a370:	8c3b      	ldrh	r3, [r7, #32]
 800a372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800a37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a380:	78db      	ldrb	r3, [r3, #3]
 800a382:	2b03      	cmp	r3, #3
 800a384:	d00c      	beq.n	800a3a0 <PCD_EP_ISR_Handler+0x554>
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	78db      	ldrb	r3, [r3, #3]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d008      	beq.n	800a3a0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a390:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800a392:	2b02      	cmp	r3, #2
 800a394:	d146      	bne.n	800a424 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800a396:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d141      	bne.n	800a424 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	4413      	add	r3, r2
 800a3b4:	3302      	adds	r3, #2
 800a3b6:	005b      	lsls	r3, r3, #1
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	6812      	ldr	r2, [r2, #0]
 800a3bc:	4413      	add	r3, r2
 800a3be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3c2:	881b      	ldrh	r3, [r3, #0]
 800a3c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3c8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	699a      	ldr	r2, [r3, #24]
 800a3ce:	8bfb      	ldrh	r3, [r7, #30]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d906      	bls.n	800a3e2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	699a      	ldr	r2, [r3, #24]
 800a3d8:	8bfb      	ldrh	r3, [r7, #30]
 800a3da:	1ad2      	subs	r2, r2, r3
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	619a      	str	r2, [r3, #24]
 800a3e0:	e002      	b.n	800a3e8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d106      	bne.n	800a3fe <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f007 ff47 	bl	801228a <HAL_PCD_DataInStageCallback>
 800a3fc:	e018      	b.n	800a430 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a400:	695a      	ldr	r2, [r3, #20]
 800a402:	8bfb      	ldrh	r3, [r7, #30]
 800a404:	441a      	add	r2, r3
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	69da      	ldr	r2, [r3, #28]
 800a40e:	8bfb      	ldrh	r3, [r7, #30]
 800a410:	441a      	add	r2, r3
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a41c:	4618      	mov	r0, r3
 800a41e:	f004 f9cb 	bl	800e7b8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800a422:	e005      	b.n	800a430 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a424:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a426:	461a      	mov	r2, r3
 800a428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f91b 	bl	800a666 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a438:	b29b      	uxth	r3, r3
 800a43a:	b21b      	sxth	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f6ff ad0a 	blt.w	8009e56 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3738      	adds	r7, #56	; 0x38
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b088      	sub	sp, #32
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	4613      	mov	r3, r2
 800a458:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a45a:	88fb      	ldrh	r3, [r7, #6]
 800a45c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d07e      	beq.n	800a562 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	461a      	mov	r2, r3
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	00db      	lsls	r3, r3, #3
 800a476:	4413      	add	r3, r2
 800a478:	3302      	adds	r3, #2
 800a47a:	005b      	lsls	r3, r3, #1
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	6812      	ldr	r2, [r2, #0]
 800a480:	4413      	add	r3, r2
 800a482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a486:	881b      	ldrh	r3, [r3, #0]
 800a488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a48c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	699a      	ldr	r2, [r3, #24]
 800a492:	8b7b      	ldrh	r3, [r7, #26]
 800a494:	429a      	cmp	r2, r3
 800a496:	d306      	bcc.n	800a4a6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	699a      	ldr	r2, [r3, #24]
 800a49c:	8b7b      	ldrh	r3, [r7, #26]
 800a49e:	1ad2      	subs	r2, r2, r3
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	619a      	str	r2, [r3, #24]
 800a4a4:	e002      	b.n	800a4ac <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d123      	bne.n	800a4fc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4413      	add	r3, r2
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ce:	833b      	strh	r3, [r7, #24]
 800a4d0:	8b3b      	ldrh	r3, [r7, #24]
 800a4d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a4d6:	833b      	strh	r3, [r7, #24]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	441a      	add	r2, r3
 800a4e6:	8b3b      	ldrh	r3, [r7, #24]
 800a4e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a4fc:	88fb      	ldrh	r3, [r7, #6]
 800a4fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a502:	2b00      	cmp	r3, #0
 800a504:	d01f      	beq.n	800a546 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	b29b      	uxth	r3, r3
 800a518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a51c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a520:	82fb      	strh	r3, [r7, #22]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	461a      	mov	r2, r3
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	441a      	add	r2, r3
 800a530:	8afb      	ldrh	r3, [r7, #22]
 800a532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a53a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a53e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a542:	b29b      	uxth	r3, r3
 800a544:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a546:	8b7b      	ldrh	r3, [r7, #26]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 8087 	beq.w	800a65c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6818      	ldr	r0, [r3, #0]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	6959      	ldr	r1, [r3, #20]
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	891a      	ldrh	r2, [r3, #8]
 800a55a:	8b7b      	ldrh	r3, [r7, #26]
 800a55c:	f006 f8e7 	bl	801072e <USB_ReadPMA>
 800a560:	e07c      	b.n	800a65c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	461a      	mov	r2, r3
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	00db      	lsls	r3, r3, #3
 800a574:	4413      	add	r3, r2
 800a576:	3306      	adds	r3, #6
 800a578:	005b      	lsls	r3, r3, #1
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	6812      	ldr	r2, [r2, #0]
 800a57e:	4413      	add	r3, r2
 800a580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a58a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	699a      	ldr	r2, [r3, #24]
 800a590:	8b7b      	ldrh	r3, [r7, #26]
 800a592:	429a      	cmp	r2, r3
 800a594:	d306      	bcc.n	800a5a4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	699a      	ldr	r2, [r3, #24]
 800a59a:	8b7b      	ldrh	r3, [r7, #26]
 800a59c:	1ad2      	subs	r2, r2, r3
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	619a      	str	r2, [r3, #24]
 800a5a2:	e002      	b.n	800a5aa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d123      	bne.n	800a5fa <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	4413      	add	r3, r2
 800a5c0:	881b      	ldrh	r3, [r3, #0]
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5cc:	83fb      	strh	r3, [r7, #30]
 800a5ce:	8bfb      	ldrh	r3, [r7, #30]
 800a5d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5d4:	83fb      	strh	r3, [r7, #30]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	441a      	add	r2, r3
 800a5e4:	8bfb      	ldrh	r3, [r7, #30]
 800a5e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a5fa:	88fb      	ldrh	r3, [r7, #6]
 800a5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a600:	2b00      	cmp	r3, #0
 800a602:	d11f      	bne.n	800a644 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	461a      	mov	r2, r3
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4413      	add	r3, r2
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	b29b      	uxth	r3, r3
 800a616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a61a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a61e:	83bb      	strh	r3, [r7, #28]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	461a      	mov	r2, r3
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	441a      	add	r2, r3
 800a62e:	8bbb      	ldrh	r3, [r7, #28]
 800a630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a63c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a640:	b29b      	uxth	r3, r3
 800a642:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a644:	8b7b      	ldrh	r3, [r7, #26]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d008      	beq.n	800a65c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6818      	ldr	r0, [r3, #0]
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	6959      	ldr	r1, [r3, #20]
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	895a      	ldrh	r2, [r3, #10]
 800a656:	8b7b      	ldrh	r3, [r7, #26]
 800a658:	f006 f869 	bl	801072e <USB_ReadPMA>
    }
  }

  return count;
 800a65c:	8b7b      	ldrh	r3, [r7, #26]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3720      	adds	r7, #32
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b0a2      	sub	sp, #136	; 0x88
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	60f8      	str	r0, [r7, #12]
 800a66e:	60b9      	str	r1, [r7, #8]
 800a670:	4613      	mov	r3, r2
 800a672:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a674:	88fb      	ldrh	r3, [r7, #6]
 800a676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f000 81c7 	beq.w	800aa0e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a688:	b29b      	uxth	r3, r3
 800a68a:	461a      	mov	r2, r3
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	00db      	lsls	r3, r3, #3
 800a692:	4413      	add	r3, r2
 800a694:	3302      	adds	r3, #2
 800a696:	005b      	lsls	r3, r3, #1
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	6812      	ldr	r2, [r2, #0]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6a2:	881b      	ldrh	r3, [r3, #0]
 800a6a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	699a      	ldr	r2, [r3, #24]
 800a6b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d907      	bls.n	800a6c8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	699a      	ldr	r2, [r3, #24]
 800a6bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a6c0:	1ad2      	subs	r2, r2, r3
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	619a      	str	r2, [r3, #24]
 800a6c6:	e002      	b.n	800a6ce <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f040 80b9 	bne.w	800a84a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	785b      	ldrb	r3, [r3, #1]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d126      	bne.n	800a72e <HAL_PCD_EP_DB_Transmit+0xc8>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f4:	4413      	add	r3, r2
 800a6f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	011a      	lsls	r2, r3, #4
 800a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a700:	4413      	add	r3, r2
 800a702:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a706:	627b      	str	r3, [r7, #36]	; 0x24
 800a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a712:	b29a      	uxth	r2, r3
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	801a      	strh	r2, [r3, #0]
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	881b      	ldrh	r3, [r3, #0]
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a726:	b29a      	uxth	r2, r3
 800a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72a:	801a      	strh	r2, [r3, #0]
 800a72c:	e01a      	b.n	800a764 <HAL_PCD_EP_DB_Transmit+0xfe>
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	785b      	ldrb	r3, [r3, #1]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d116      	bne.n	800a764 <HAL_PCD_EP_DB_Transmit+0xfe>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	633b      	str	r3, [r7, #48]	; 0x30
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a744:	b29b      	uxth	r3, r3
 800a746:	461a      	mov	r2, r3
 800a748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74a:	4413      	add	r3, r2
 800a74c:	633b      	str	r3, [r7, #48]	; 0x30
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	011a      	lsls	r2, r3, #4
 800a754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a756:	4413      	add	r3, r2
 800a758:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a75c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a760:	2200      	movs	r2, #0
 800a762:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	623b      	str	r3, [r7, #32]
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	785b      	ldrb	r3, [r3, #1]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d126      	bne.n	800a7c0 <HAL_PCD_EP_DB_Transmit+0x15a>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	61bb      	str	r3, [r7, #24]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a780:	b29b      	uxth	r3, r3
 800a782:	461a      	mov	r2, r3
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	4413      	add	r3, r2
 800a788:	61bb      	str	r3, [r7, #24]
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	011a      	lsls	r2, r3, #4
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	4413      	add	r3, r2
 800a794:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a798:	617b      	str	r3, [r7, #20]
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	881b      	ldrh	r3, [r3, #0]
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	801a      	strh	r2, [r3, #0]
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	881b      	ldrh	r3, [r3, #0]
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	801a      	strh	r2, [r3, #0]
 800a7be:	e017      	b.n	800a7f0 <HAL_PCD_EP_DB_Transmit+0x18a>
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	785b      	ldrb	r3, [r3, #1]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d113      	bne.n	800a7f0 <HAL_PCD_EP_DB_Transmit+0x18a>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	623b      	str	r3, [r7, #32]
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	011a      	lsls	r2, r3, #4
 800a7e0:	6a3b      	ldr	r3, [r7, #32]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a7e8:	61fb      	str	r3, [r7, #28]
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f007 fd47 	bl	801228a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a7fc:	88fb      	ldrh	r3, [r7, #6]
 800a7fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 82d4 	beq.w	800adb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	461a      	mov	r2, r3
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	881b      	ldrh	r3, [r3, #0]
 800a818:	b29b      	uxth	r3, r3
 800a81a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a81e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a822:	827b      	strh	r3, [r7, #18]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	461a      	mov	r2, r3
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	441a      	add	r2, r3
 800a832:	8a7b      	ldrh	r3, [r7, #18]
 800a834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a83c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a844:	b29b      	uxth	r3, r3
 800a846:	8013      	strh	r3, [r2, #0]
 800a848:	e2b2      	b.n	800adb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a84a:	88fb      	ldrh	r3, [r7, #6]
 800a84c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a850:	2b00      	cmp	r3, #0
 800a852:	d021      	beq.n	800a898 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4413      	add	r3, r2
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	b29b      	uxth	r3, r3
 800a866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a86a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a86e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	461a      	mov	r2, r3
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	441a      	add	r2, r3
 800a880:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a88c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a894:	b29b      	uxth	r3, r3
 800a896:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	f040 8286 	bne.w	800adb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	695a      	ldr	r2, [r3, #20]
 800a8a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a8ac:	441a      	add	r2, r3
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	69da      	ldr	r2, [r3, #28]
 800a8b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a8ba:	441a      	add	r2, r3
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	6a1a      	ldr	r2, [r3, #32]
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d309      	bcc.n	800a8e0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	6a1a      	ldr	r2, [r3, #32]
 800a8d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8d8:	1ad2      	subs	r2, r2, r3
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	621a      	str	r2, [r3, #32]
 800a8de:	e015      	b.n	800a90c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	6a1b      	ldr	r3, [r3, #32]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d107      	bne.n	800a8f8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800a8e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a8ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a8f6:	e009      	b.n	800a90c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	6a1b      	ldr	r3, [r3, #32]
 800a904:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	2200      	movs	r2, #0
 800a90a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	785b      	ldrb	r3, [r3, #1]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d155      	bne.n	800a9c0 <HAL_PCD_EP_DB_Transmit+0x35a>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	63bb      	str	r3, [r7, #56]	; 0x38
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a922:	b29b      	uxth	r3, r3
 800a924:	461a      	mov	r2, r3
 800a926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a928:	4413      	add	r3, r2
 800a92a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	011a      	lsls	r2, r3, #4
 800a932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a934:	4413      	add	r3, r2
 800a936:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a93a:	637b      	str	r3, [r7, #52]	; 0x34
 800a93c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d112      	bne.n	800a968 <HAL_PCD_EP_DB_Transmit+0x302>
 800a942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	b29b      	uxth	r3, r3
 800a948:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a950:	801a      	strh	r2, [r3, #0]
 800a952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a954:	881b      	ldrh	r3, [r3, #0]
 800a956:	b29b      	uxth	r3, r3
 800a958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a95c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a960:	b29a      	uxth	r2, r3
 800a962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a964:	801a      	strh	r2, [r3, #0]
 800a966:	e047      	b.n	800a9f8 <HAL_PCD_EP_DB_Transmit+0x392>
 800a968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a96a:	2b3e      	cmp	r3, #62	; 0x3e
 800a96c:	d811      	bhi.n	800a992 <HAL_PCD_EP_DB_Transmit+0x32c>
 800a96e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a970:	085b      	lsrs	r3, r3, #1
 800a972:	64bb      	str	r3, [r7, #72]	; 0x48
 800a974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a976:	f003 0301 	and.w	r3, r3, #1
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <HAL_PCD_EP_DB_Transmit+0x31e>
 800a97e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a980:	3301      	adds	r3, #1
 800a982:	64bb      	str	r3, [r7, #72]	; 0x48
 800a984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a986:	b29b      	uxth	r3, r3
 800a988:	029b      	lsls	r3, r3, #10
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a98e:	801a      	strh	r2, [r3, #0]
 800a990:	e032      	b.n	800a9f8 <HAL_PCD_EP_DB_Transmit+0x392>
 800a992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a994:	095b      	lsrs	r3, r3, #5
 800a996:	64bb      	str	r3, [r7, #72]	; 0x48
 800a998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a99a:	f003 031f 	and.w	r3, r3, #31
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d102      	bne.n	800a9a8 <HAL_PCD_EP_DB_Transmit+0x342>
 800a9a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	029b      	lsls	r3, r3, #10
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9bc:	801a      	strh	r2, [r3, #0]
 800a9be:	e01b      	b.n	800a9f8 <HAL_PCD_EP_DB_Transmit+0x392>
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	785b      	ldrb	r3, [r3, #1]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d117      	bne.n	800a9f8 <HAL_PCD_EP_DB_Transmit+0x392>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	643b      	str	r3, [r7, #64]	; 0x40
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	461a      	mov	r2, r3
 800a9da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9dc:	4413      	add	r3, r2
 800a9de:	643b      	str	r3, [r7, #64]	; 0x40
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	011a      	lsls	r2, r3, #4
 800a9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9f6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6818      	ldr	r0, [r3, #0]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	6959      	ldr	r1, [r3, #20]
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	891a      	ldrh	r2, [r3, #8]
 800aa04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	f005 fe4c 	bl	80106a4 <USB_WritePMA>
 800aa0c:	e1d0      	b.n	800adb0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	461a      	mov	r2, r3
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	00db      	lsls	r3, r3, #3
 800aa20:	4413      	add	r3, r2
 800aa22:	3306      	adds	r3, #6
 800aa24:	005b      	lsls	r3, r3, #1
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	6812      	ldr	r2, [r2, #0]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	699a      	ldr	r2, [r3, #24]
 800aa3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d307      	bcc.n	800aa56 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	699a      	ldr	r2, [r3, #24]
 800aa4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aa4e:	1ad2      	subs	r2, r2, r3
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	619a      	str	r2, [r3, #24]
 800aa54:	e002      	b.n	800aa5c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	699b      	ldr	r3, [r3, #24]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f040 80c4 	bne.w	800abee <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	785b      	ldrb	r3, [r3, #1]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d126      	bne.n	800aabc <HAL_PCD_EP_DB_Transmit+0x456>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	461a      	mov	r2, r3
 800aa80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa82:	4413      	add	r3, r2
 800aa84:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	011a      	lsls	r2, r3, #4
 800aa8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa8e:	4413      	add	r3, r2
 800aa90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa94:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa98:	881b      	ldrh	r3, [r3, #0]
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaa4:	801a      	strh	r2, [r3, #0]
 800aaa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aab8:	801a      	strh	r2, [r3, #0]
 800aaba:	e01a      	b.n	800aaf2 <HAL_PCD_EP_DB_Transmit+0x48c>
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	785b      	ldrb	r3, [r3, #1]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d116      	bne.n	800aaf2 <HAL_PCD_EP_DB_Transmit+0x48c>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	677b      	str	r3, [r7, #116]	; 0x74
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	461a      	mov	r2, r3
 800aad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aad8:	4413      	add	r3, r2
 800aada:	677b      	str	r3, [r7, #116]	; 0x74
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	011a      	lsls	r2, r3, #4
 800aae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aae4:	4413      	add	r3, r2
 800aae6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aaea:	673b      	str	r3, [r7, #112]	; 0x70
 800aaec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaee:	2200      	movs	r2, #0
 800aaf0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	67bb      	str	r3, [r7, #120]	; 0x78
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	785b      	ldrb	r3, [r3, #1]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d12f      	bne.n	800ab60 <HAL_PCD_EP_DB_Transmit+0x4fa>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	461a      	mov	r2, r3
 800ab14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab18:	4413      	add	r3, r2
 800ab1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	011a      	lsls	r2, r3, #4
 800ab24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab28:	4413      	add	r3, r2
 800ab2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab36:	881b      	ldrh	r3, [r3, #0]
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab44:	801a      	strh	r2, [r3, #0]
 800ab46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab4a:	881b      	ldrh	r3, [r3, #0]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab5c:	801a      	strh	r2, [r3, #0]
 800ab5e:	e017      	b.n	800ab90 <HAL_PCD_EP_DB_Transmit+0x52a>
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	785b      	ldrb	r3, [r3, #1]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d113      	bne.n	800ab90 <HAL_PCD_EP_DB_Transmit+0x52a>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	461a      	mov	r2, r3
 800ab74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab76:	4413      	add	r3, r2
 800ab78:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	011a      	lsls	r2, r3, #4
 800ab80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab82:	4413      	add	r3, r2
 800ab84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab88:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	4619      	mov	r1, r3
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f007 fb77 	bl	801228a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ab9c:	88fb      	ldrh	r3, [r7, #6]
 800ab9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f040 8104 	bne.w	800adb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	461a      	mov	r2, r3
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	881b      	ldrh	r3, [r3, #0]
 800abb8:	b29b      	uxth	r3, r3
 800abba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abc2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	461a      	mov	r2, r3
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	441a      	add	r2, r3
 800abd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800abd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe8:	b29b      	uxth	r3, r3
 800abea:	8013      	strh	r3, [r2, #0]
 800abec:	e0e0      	b.n	800adb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800abee:	88fb      	ldrh	r3, [r7, #6]
 800abf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d121      	bne.n	800ac3c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	461a      	mov	r2, r3
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4413      	add	r3, r2
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac12:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	441a      	add	r2, r3
 800ac24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ac28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	f040 80b4 	bne.w	800adb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	695a      	ldr	r2, [r3, #20]
 800ac4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac50:	441a      	add	r2, r3
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	69da      	ldr	r2, [r3, #28]
 800ac5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac5e:	441a      	add	r2, r3
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	6a1a      	ldr	r2, [r3, #32]
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	691b      	ldr	r3, [r3, #16]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d309      	bcc.n	800ac84 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	6a1a      	ldr	r2, [r3, #32]
 800ac7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac7c:	1ad2      	subs	r2, r2, r3
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	621a      	str	r2, [r3, #32]
 800ac82:	e015      	b.n	800acb0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d107      	bne.n	800ac9c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800ac8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ac9a:	e009      	b.n	800acb0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	6a1b      	ldr	r3, [r3, #32]
 800aca0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2200      	movs	r2, #0
 800aca6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	667b      	str	r3, [r7, #100]	; 0x64
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	785b      	ldrb	r3, [r3, #1]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d155      	bne.n	800ad6a <HAL_PCD_EP_DB_Transmit+0x704>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800accc:	b29b      	uxth	r3, r3
 800acce:	461a      	mov	r2, r3
 800acd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acd2:	4413      	add	r3, r2
 800acd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	011a      	lsls	r2, r3, #4
 800acdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acde:	4413      	add	r3, r2
 800ace0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ace4:	65bb      	str	r3, [r7, #88]	; 0x58
 800ace6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d112      	bne.n	800ad12 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800acec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acee:	881b      	ldrh	r3, [r3, #0]
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acfa:	801a      	strh	r2, [r3, #0]
 800acfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acfe:	881b      	ldrh	r3, [r3, #0]
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad0e:	801a      	strh	r2, [r3, #0]
 800ad10:	e044      	b.n	800ad9c <HAL_PCD_EP_DB_Transmit+0x736>
 800ad12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad14:	2b3e      	cmp	r3, #62	; 0x3e
 800ad16:	d811      	bhi.n	800ad3c <HAL_PCD_EP_DB_Transmit+0x6d6>
 800ad18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad1a:	085b      	lsrs	r3, r3, #1
 800ad1c:	657b      	str	r3, [r7, #84]	; 0x54
 800ad1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad20:	f003 0301 	and.w	r3, r3, #1
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <HAL_PCD_EP_DB_Transmit+0x6c8>
 800ad28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	657b      	str	r3, [r7, #84]	; 0x54
 800ad2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	029b      	lsls	r3, r3, #10
 800ad34:	b29a      	uxth	r2, r3
 800ad36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad38:	801a      	strh	r2, [r3, #0]
 800ad3a:	e02f      	b.n	800ad9c <HAL_PCD_EP_DB_Transmit+0x736>
 800ad3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad3e:	095b      	lsrs	r3, r3, #5
 800ad40:	657b      	str	r3, [r7, #84]	; 0x54
 800ad42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad44:	f003 031f 	and.w	r3, r3, #31
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d102      	bne.n	800ad52 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800ad4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	657b      	str	r3, [r7, #84]	; 0x54
 800ad52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	029b      	lsls	r3, r3, #10
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad62:	b29a      	uxth	r2, r3
 800ad64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad66:	801a      	strh	r2, [r3, #0]
 800ad68:	e018      	b.n	800ad9c <HAL_PCD_EP_DB_Transmit+0x736>
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	785b      	ldrb	r3, [r3, #1]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d114      	bne.n	800ad9c <HAL_PCD_EP_DB_Transmit+0x736>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad80:	4413      	add	r3, r2
 800ad82:	667b      	str	r3, [r7, #100]	; 0x64
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	011a      	lsls	r2, r3, #4
 800ad8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ad92:	663b      	str	r3, [r7, #96]	; 0x60
 800ad94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad9a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6818      	ldr	r0, [r3, #0]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	6959      	ldr	r1, [r3, #20]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	895a      	ldrh	r2, [r3, #10]
 800ada8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adaa:	b29b      	uxth	r3, r3
 800adac:	f005 fc7a 	bl	80106a4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	4413      	add	r3, r2
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adca:	823b      	strh	r3, [r7, #16]
 800adcc:	8a3b      	ldrh	r3, [r7, #16]
 800adce:	f083 0310 	eor.w	r3, r3, #16
 800add2:	823b      	strh	r3, [r7, #16]
 800add4:	8a3b      	ldrh	r3, [r7, #16]
 800add6:	f083 0320 	eor.w	r3, r3, #32
 800adda:	823b      	strh	r3, [r7, #16]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	461a      	mov	r2, r3
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	441a      	add	r2, r3
 800adea:	8a3b      	ldrh	r3, [r7, #16]
 800adec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3788      	adds	r7, #136	; 0x88
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b087      	sub	sp, #28
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	60f8      	str	r0, [r7, #12]
 800ae12:	607b      	str	r3, [r7, #4]
 800ae14:	460b      	mov	r3, r1
 800ae16:	817b      	strh	r3, [r7, #10]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800ae1c:	897b      	ldrh	r3, [r7, #10]
 800ae1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00b      	beq.n	800ae40 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae28:	897b      	ldrh	r3, [r7, #10]
 800ae2a:	f003 0307 	and.w	r3, r3, #7
 800ae2e:	1c5a      	adds	r2, r3, #1
 800ae30:	4613      	mov	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	00db      	lsls	r3, r3, #3
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	617b      	str	r3, [r7, #20]
 800ae3e:	e009      	b.n	800ae54 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ae40:	897a      	ldrh	r2, [r7, #10]
 800ae42:	4613      	mov	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4413      	add	r3, r2
 800ae48:	00db      	lsls	r3, r3, #3
 800ae4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	4413      	add	r3, r2
 800ae52:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800ae54:	893b      	ldrh	r3, [r7, #8]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d107      	bne.n	800ae6a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	80da      	strh	r2, [r3, #6]
 800ae68:	e00b      	b.n	800ae82 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	0c1b      	lsrs	r3, r3, #16
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	371c      	adds	r7, #28
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bc80      	pop	{r7}
 800ae8c:	4770      	bx	lr
	...

0800ae90 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ae90:	b480      	push	{r7}
 800ae92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800ae94:	4b03      	ldr	r3, [pc, #12]	; (800aea4 <HAL_PWR_EnableBkUpAccess+0x14>)
 800ae96:	2201      	movs	r2, #1
 800ae98:	601a      	str	r2, [r3, #0]
}
 800ae9a:	bf00      	nop
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bc80      	pop	{r7}
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	420e0020 	.word	0x420e0020

0800aea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e272      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 0301 	and.w	r3, r3, #1
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 8087 	beq.w	800afd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aec8:	4b92      	ldr	r3, [pc, #584]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	f003 030c 	and.w	r3, r3, #12
 800aed0:	2b04      	cmp	r3, #4
 800aed2:	d00c      	beq.n	800aeee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800aed4:	4b8f      	ldr	r3, [pc, #572]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	f003 030c 	and.w	r3, r3, #12
 800aedc:	2b08      	cmp	r3, #8
 800aede:	d112      	bne.n	800af06 <HAL_RCC_OscConfig+0x5e>
 800aee0:	4b8c      	ldr	r3, [pc, #560]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aeec:	d10b      	bne.n	800af06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aeee:	4b89      	ldr	r3, [pc, #548]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d06c      	beq.n	800afd4 <HAL_RCC_OscConfig+0x12c>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d168      	bne.n	800afd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e24c      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af0e:	d106      	bne.n	800af1e <HAL_RCC_OscConfig+0x76>
 800af10:	4b80      	ldr	r3, [pc, #512]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a7f      	ldr	r2, [pc, #508]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af1a:	6013      	str	r3, [r2, #0]
 800af1c:	e02e      	b.n	800af7c <HAL_RCC_OscConfig+0xd4>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d10c      	bne.n	800af40 <HAL_RCC_OscConfig+0x98>
 800af26:	4b7b      	ldr	r3, [pc, #492]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a7a      	ldr	r2, [pc, #488]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af30:	6013      	str	r3, [r2, #0]
 800af32:	4b78      	ldr	r3, [pc, #480]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a77      	ldr	r2, [pc, #476]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	e01d      	b.n	800af7c <HAL_RCC_OscConfig+0xd4>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af48:	d10c      	bne.n	800af64 <HAL_RCC_OscConfig+0xbc>
 800af4a:	4b72      	ldr	r3, [pc, #456]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a71      	ldr	r2, [pc, #452]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	4b6f      	ldr	r3, [pc, #444]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a6e      	ldr	r2, [pc, #440]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af60:	6013      	str	r3, [r2, #0]
 800af62:	e00b      	b.n	800af7c <HAL_RCC_OscConfig+0xd4>
 800af64:	4b6b      	ldr	r3, [pc, #428]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a6a      	ldr	r2, [pc, #424]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	4b68      	ldr	r3, [pc, #416]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a67      	ldr	r2, [pc, #412]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d013      	beq.n	800afac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af84:	f7fb fc4c 	bl	8006820 <HAL_GetTick>
 800af88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af8a:	e008      	b.n	800af9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af8c:	f7fb fc48 	bl	8006820 <HAL_GetTick>
 800af90:	4602      	mov	r2, r0
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	2b64      	cmp	r3, #100	; 0x64
 800af98:	d901      	bls.n	800af9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800af9a:	2303      	movs	r3, #3
 800af9c:	e200      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af9e:	4b5d      	ldr	r3, [pc, #372]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d0f0      	beq.n	800af8c <HAL_RCC_OscConfig+0xe4>
 800afaa:	e014      	b.n	800afd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afac:	f7fb fc38 	bl	8006820 <HAL_GetTick>
 800afb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afb2:	e008      	b.n	800afc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afb4:	f7fb fc34 	bl	8006820 <HAL_GetTick>
 800afb8:	4602      	mov	r2, r0
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	2b64      	cmp	r3, #100	; 0x64
 800afc0:	d901      	bls.n	800afc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e1ec      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afc6:	4b53      	ldr	r3, [pc, #332]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1f0      	bne.n	800afb4 <HAL_RCC_OscConfig+0x10c>
 800afd2:	e000      	b.n	800afd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0302 	and.w	r3, r3, #2
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d063      	beq.n	800b0aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800afe2:	4b4c      	ldr	r3, [pc, #304]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	f003 030c 	and.w	r3, r3, #12
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800afee:	4b49      	ldr	r3, [pc, #292]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f003 030c 	and.w	r3, r3, #12
 800aff6:	2b08      	cmp	r3, #8
 800aff8:	d11c      	bne.n	800b034 <HAL_RCC_OscConfig+0x18c>
 800affa:	4b46      	ldr	r3, [pc, #280]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b002:	2b00      	cmp	r3, #0
 800b004:	d116      	bne.n	800b034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b006:	4b43      	ldr	r3, [pc, #268]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <HAL_RCC_OscConfig+0x176>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d001      	beq.n	800b01e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e1c0      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b01e:	4b3d      	ldr	r3, [pc, #244]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	00db      	lsls	r3, r3, #3
 800b02c:	4939      	ldr	r1, [pc, #228]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b02e:	4313      	orrs	r3, r2
 800b030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b032:	e03a      	b.n	800b0aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d020      	beq.n	800b07e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b03c:	4b36      	ldr	r3, [pc, #216]	; (800b118 <HAL_RCC_OscConfig+0x270>)
 800b03e:	2201      	movs	r2, #1
 800b040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b042:	f7fb fbed 	bl	8006820 <HAL_GetTick>
 800b046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b048:	e008      	b.n	800b05c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b04a:	f7fb fbe9 	bl	8006820 <HAL_GetTick>
 800b04e:	4602      	mov	r2, r0
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	2b02      	cmp	r3, #2
 800b056:	d901      	bls.n	800b05c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b058:	2303      	movs	r3, #3
 800b05a:	e1a1      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b05c:	4b2d      	ldr	r3, [pc, #180]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 0302 	and.w	r3, r3, #2
 800b064:	2b00      	cmp	r3, #0
 800b066:	d0f0      	beq.n	800b04a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b068:	4b2a      	ldr	r3, [pc, #168]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	4927      	ldr	r1, [pc, #156]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b078:	4313      	orrs	r3, r2
 800b07a:	600b      	str	r3, [r1, #0]
 800b07c:	e015      	b.n	800b0aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b07e:	4b26      	ldr	r3, [pc, #152]	; (800b118 <HAL_RCC_OscConfig+0x270>)
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b084:	f7fb fbcc 	bl	8006820 <HAL_GetTick>
 800b088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b08a:	e008      	b.n	800b09e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b08c:	f7fb fbc8 	bl	8006820 <HAL_GetTick>
 800b090:	4602      	mov	r2, r0
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	2b02      	cmp	r3, #2
 800b098:	d901      	bls.n	800b09e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e180      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b09e:	4b1d      	ldr	r3, [pc, #116]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1f0      	bne.n	800b08c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0308 	and.w	r3, r3, #8
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d03a      	beq.n	800b12c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d019      	beq.n	800b0f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b0be:	4b17      	ldr	r3, [pc, #92]	; (800b11c <HAL_RCC_OscConfig+0x274>)
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0c4:	f7fb fbac 	bl	8006820 <HAL_GetTick>
 800b0c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0ca:	e008      	b.n	800b0de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0cc:	f7fb fba8 	bl	8006820 <HAL_GetTick>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d901      	bls.n	800b0de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	e160      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0de:	4b0d      	ldr	r3, [pc, #52]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e2:	f003 0302 	and.w	r3, r3, #2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d0f0      	beq.n	800b0cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	f000 fad8 	bl	800b6a0 <RCC_Delay>
 800b0f0:	e01c      	b.n	800b12c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0f2:	4b0a      	ldr	r3, [pc, #40]	; (800b11c <HAL_RCC_OscConfig+0x274>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0f8:	f7fb fb92 	bl	8006820 <HAL_GetTick>
 800b0fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0fe:	e00f      	b.n	800b120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b100:	f7fb fb8e 	bl	8006820 <HAL_GetTick>
 800b104:	4602      	mov	r2, r0
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d908      	bls.n	800b120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b10e:	2303      	movs	r3, #3
 800b110:	e146      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
 800b112:	bf00      	nop
 800b114:	40021000 	.word	0x40021000
 800b118:	42420000 	.word	0x42420000
 800b11c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b120:	4b92      	ldr	r3, [pc, #584]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	f003 0302 	and.w	r3, r3, #2
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1e9      	bne.n	800b100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0304 	and.w	r3, r3, #4
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 80a6 	beq.w	800b286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b13a:	2300      	movs	r3, #0
 800b13c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b13e:	4b8b      	ldr	r3, [pc, #556]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10d      	bne.n	800b166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b14a:	4b88      	ldr	r3, [pc, #544]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b14c:	69db      	ldr	r3, [r3, #28]
 800b14e:	4a87      	ldr	r2, [pc, #540]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b154:	61d3      	str	r3, [r2, #28]
 800b156:	4b85      	ldr	r3, [pc, #532]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b158:	69db      	ldr	r3, [r3, #28]
 800b15a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b15e:	60bb      	str	r3, [r7, #8]
 800b160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b162:	2301      	movs	r3, #1
 800b164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b166:	4b82      	ldr	r3, [pc, #520]	; (800b370 <HAL_RCC_OscConfig+0x4c8>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d118      	bne.n	800b1a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b172:	4b7f      	ldr	r3, [pc, #508]	; (800b370 <HAL_RCC_OscConfig+0x4c8>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a7e      	ldr	r2, [pc, #504]	; (800b370 <HAL_RCC_OscConfig+0x4c8>)
 800b178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b17c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b17e:	f7fb fb4f 	bl	8006820 <HAL_GetTick>
 800b182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b184:	e008      	b.n	800b198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b186:	f7fb fb4b 	bl	8006820 <HAL_GetTick>
 800b18a:	4602      	mov	r2, r0
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	2b64      	cmp	r3, #100	; 0x64
 800b192:	d901      	bls.n	800b198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b194:	2303      	movs	r3, #3
 800b196:	e103      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b198:	4b75      	ldr	r3, [pc, #468]	; (800b370 <HAL_RCC_OscConfig+0x4c8>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d0f0      	beq.n	800b186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d106      	bne.n	800b1ba <HAL_RCC_OscConfig+0x312>
 800b1ac:	4b6f      	ldr	r3, [pc, #444]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1ae:	6a1b      	ldr	r3, [r3, #32]
 800b1b0:	4a6e      	ldr	r2, [pc, #440]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1b2:	f043 0301 	orr.w	r3, r3, #1
 800b1b6:	6213      	str	r3, [r2, #32]
 800b1b8:	e02d      	b.n	800b216 <HAL_RCC_OscConfig+0x36e>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10c      	bne.n	800b1dc <HAL_RCC_OscConfig+0x334>
 800b1c2:	4b6a      	ldr	r3, [pc, #424]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	4a69      	ldr	r2, [pc, #420]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1c8:	f023 0301 	bic.w	r3, r3, #1
 800b1cc:	6213      	str	r3, [r2, #32]
 800b1ce:	4b67      	ldr	r3, [pc, #412]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	4a66      	ldr	r2, [pc, #408]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1d4:	f023 0304 	bic.w	r3, r3, #4
 800b1d8:	6213      	str	r3, [r2, #32]
 800b1da:	e01c      	b.n	800b216 <HAL_RCC_OscConfig+0x36e>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	2b05      	cmp	r3, #5
 800b1e2:	d10c      	bne.n	800b1fe <HAL_RCC_OscConfig+0x356>
 800b1e4:	4b61      	ldr	r3, [pc, #388]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1e6:	6a1b      	ldr	r3, [r3, #32]
 800b1e8:	4a60      	ldr	r2, [pc, #384]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1ea:	f043 0304 	orr.w	r3, r3, #4
 800b1ee:	6213      	str	r3, [r2, #32]
 800b1f0:	4b5e      	ldr	r3, [pc, #376]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1f2:	6a1b      	ldr	r3, [r3, #32]
 800b1f4:	4a5d      	ldr	r2, [pc, #372]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1f6:	f043 0301 	orr.w	r3, r3, #1
 800b1fa:	6213      	str	r3, [r2, #32]
 800b1fc:	e00b      	b.n	800b216 <HAL_RCC_OscConfig+0x36e>
 800b1fe:	4b5b      	ldr	r3, [pc, #364]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	4a5a      	ldr	r2, [pc, #360]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b204:	f023 0301 	bic.w	r3, r3, #1
 800b208:	6213      	str	r3, [r2, #32]
 800b20a:	4b58      	ldr	r3, [pc, #352]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	4a57      	ldr	r2, [pc, #348]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b210:	f023 0304 	bic.w	r3, r3, #4
 800b214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d015      	beq.n	800b24a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b21e:	f7fb faff 	bl	8006820 <HAL_GetTick>
 800b222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b224:	e00a      	b.n	800b23c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b226:	f7fb fafb 	bl	8006820 <HAL_GetTick>
 800b22a:	4602      	mov	r2, r0
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	f241 3288 	movw	r2, #5000	; 0x1388
 800b234:	4293      	cmp	r3, r2
 800b236:	d901      	bls.n	800b23c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b238:	2303      	movs	r3, #3
 800b23a:	e0b1      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b23c:	4b4b      	ldr	r3, [pc, #300]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b23e:	6a1b      	ldr	r3, [r3, #32]
 800b240:	f003 0302 	and.w	r3, r3, #2
 800b244:	2b00      	cmp	r3, #0
 800b246:	d0ee      	beq.n	800b226 <HAL_RCC_OscConfig+0x37e>
 800b248:	e014      	b.n	800b274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b24a:	f7fb fae9 	bl	8006820 <HAL_GetTick>
 800b24e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b250:	e00a      	b.n	800b268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b252:	f7fb fae5 	bl	8006820 <HAL_GetTick>
 800b256:	4602      	mov	r2, r0
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b260:	4293      	cmp	r3, r2
 800b262:	d901      	bls.n	800b268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b264:	2303      	movs	r3, #3
 800b266:	e09b      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b268:	4b40      	ldr	r3, [pc, #256]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b26a:	6a1b      	ldr	r3, [r3, #32]
 800b26c:	f003 0302 	and.w	r3, r3, #2
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1ee      	bne.n	800b252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b274:	7dfb      	ldrb	r3, [r7, #23]
 800b276:	2b01      	cmp	r3, #1
 800b278:	d105      	bne.n	800b286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b27a:	4b3c      	ldr	r3, [pc, #240]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b27c:	69db      	ldr	r3, [r3, #28]
 800b27e:	4a3b      	ldr	r2, [pc, #236]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	69db      	ldr	r3, [r3, #28]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f000 8087 	beq.w	800b39e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b290:	4b36      	ldr	r3, [pc, #216]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	f003 030c 	and.w	r3, r3, #12
 800b298:	2b08      	cmp	r3, #8
 800b29a:	d061      	beq.n	800b360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	69db      	ldr	r3, [r3, #28]
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d146      	bne.n	800b332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2a4:	4b33      	ldr	r3, [pc, #204]	; (800b374 <HAL_RCC_OscConfig+0x4cc>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2aa:	f7fb fab9 	bl	8006820 <HAL_GetTick>
 800b2ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b2b0:	e008      	b.n	800b2c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2b2:	f7fb fab5 	bl	8006820 <HAL_GetTick>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d901      	bls.n	800b2c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	e06d      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b2c4:	4b29      	ldr	r3, [pc, #164]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1f0      	bne.n	800b2b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a1b      	ldr	r3, [r3, #32]
 800b2d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d8:	d108      	bne.n	800b2ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b2da:	4b24      	ldr	r3, [pc, #144]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	4921      	ldr	r1, [pc, #132]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b2ec:	4b1f      	ldr	r3, [pc, #124]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6a19      	ldr	r1, [r3, #32]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fc:	430b      	orrs	r3, r1
 800b2fe:	491b      	ldr	r1, [pc, #108]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b300:	4313      	orrs	r3, r2
 800b302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b304:	4b1b      	ldr	r3, [pc, #108]	; (800b374 <HAL_RCC_OscConfig+0x4cc>)
 800b306:	2201      	movs	r2, #1
 800b308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b30a:	f7fb fa89 	bl	8006820 <HAL_GetTick>
 800b30e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b310:	e008      	b.n	800b324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b312:	f7fb fa85 	bl	8006820 <HAL_GetTick>
 800b316:	4602      	mov	r2, r0
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d901      	bls.n	800b324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	e03d      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b324:	4b11      	ldr	r3, [pc, #68]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d0f0      	beq.n	800b312 <HAL_RCC_OscConfig+0x46a>
 800b330:	e035      	b.n	800b39e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b332:	4b10      	ldr	r3, [pc, #64]	; (800b374 <HAL_RCC_OscConfig+0x4cc>)
 800b334:	2200      	movs	r2, #0
 800b336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b338:	f7fb fa72 	bl	8006820 <HAL_GetTick>
 800b33c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b33e:	e008      	b.n	800b352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b340:	f7fb fa6e 	bl	8006820 <HAL_GetTick>
 800b344:	4602      	mov	r2, r0
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d901      	bls.n	800b352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b34e:	2303      	movs	r3, #3
 800b350:	e026      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b352:	4b06      	ldr	r3, [pc, #24]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1f0      	bne.n	800b340 <HAL_RCC_OscConfig+0x498>
 800b35e:	e01e      	b.n	800b39e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	69db      	ldr	r3, [r3, #28]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d107      	bne.n	800b378 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e019      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
 800b36c:	40021000 	.word	0x40021000
 800b370:	40007000 	.word	0x40007000
 800b374:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b378:	4b0b      	ldr	r3, [pc, #44]	; (800b3a8 <HAL_RCC_OscConfig+0x500>)
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a1b      	ldr	r3, [r3, #32]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d106      	bne.n	800b39a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b396:	429a      	cmp	r2, r3
 800b398:	d001      	beq.n	800b39e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b39a:	2301      	movs	r3, #1
 800b39c:	e000      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3718      	adds	r7, #24
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	40021000 	.word	0x40021000

0800b3ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e0d0      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3c0:	4b6a      	ldr	r3, [pc, #424]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f003 0307 	and.w	r3, r3, #7
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d910      	bls.n	800b3f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ce:	4b67      	ldr	r3, [pc, #412]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f023 0207 	bic.w	r2, r3, #7
 800b3d6:	4965      	ldr	r1, [pc, #404]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3de:	4b63      	ldr	r3, [pc, #396]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f003 0307 	and.w	r3, r3, #7
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d001      	beq.n	800b3f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e0b8      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0302 	and.w	r3, r3, #2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d020      	beq.n	800b43e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 0304 	and.w	r3, r3, #4
 800b404:	2b00      	cmp	r3, #0
 800b406:	d005      	beq.n	800b414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b408:	4b59      	ldr	r3, [pc, #356]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	4a58      	ldr	r2, [pc, #352]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b40e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b412:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 0308 	and.w	r3, r3, #8
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d005      	beq.n	800b42c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b420:	4b53      	ldr	r3, [pc, #332]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	4a52      	ldr	r2, [pc, #328]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b426:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b42a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b42c:	4b50      	ldr	r3, [pc, #320]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	494d      	ldr	r1, [pc, #308]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b43a:	4313      	orrs	r3, r2
 800b43c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 0301 	and.w	r3, r3, #1
 800b446:	2b00      	cmp	r3, #0
 800b448:	d040      	beq.n	800b4cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d107      	bne.n	800b462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b452:	4b47      	ldr	r3, [pc, #284]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d115      	bne.n	800b48a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e07f      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	2b02      	cmp	r3, #2
 800b468:	d107      	bne.n	800b47a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b46a:	4b41      	ldr	r3, [pc, #260]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b472:	2b00      	cmp	r3, #0
 800b474:	d109      	bne.n	800b48a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	e073      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b47a:	4b3d      	ldr	r3, [pc, #244]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 0302 	and.w	r3, r3, #2
 800b482:	2b00      	cmp	r3, #0
 800b484:	d101      	bne.n	800b48a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e06b      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b48a:	4b39      	ldr	r3, [pc, #228]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f023 0203 	bic.w	r2, r3, #3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	4936      	ldr	r1, [pc, #216]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b498:	4313      	orrs	r3, r2
 800b49a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b49c:	f7fb f9c0 	bl	8006820 <HAL_GetTick>
 800b4a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4a2:	e00a      	b.n	800b4ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4a4:	f7fb f9bc 	bl	8006820 <HAL_GetTick>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d901      	bls.n	800b4ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b4b6:	2303      	movs	r3, #3
 800b4b8:	e053      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4ba:	4b2d      	ldr	r3, [pc, #180]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f003 020c 	and.w	r2, r3, #12
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d1eb      	bne.n	800b4a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b4cc:	4b27      	ldr	r3, [pc, #156]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0307 	and.w	r3, r3, #7
 800b4d4:	683a      	ldr	r2, [r7, #0]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d210      	bcs.n	800b4fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4da:	4b24      	ldr	r3, [pc, #144]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f023 0207 	bic.w	r2, r3, #7
 800b4e2:	4922      	ldr	r1, [pc, #136]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4ea:	4b20      	ldr	r3, [pc, #128]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 0307 	and.w	r3, r3, #7
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d001      	beq.n	800b4fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e032      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 0304 	and.w	r3, r3, #4
 800b504:	2b00      	cmp	r3, #0
 800b506:	d008      	beq.n	800b51a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b508:	4b19      	ldr	r3, [pc, #100]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	4916      	ldr	r1, [pc, #88]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b516:	4313      	orrs	r3, r2
 800b518:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0308 	and.w	r3, r3, #8
 800b522:	2b00      	cmp	r3, #0
 800b524:	d009      	beq.n	800b53a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b526:	4b12      	ldr	r3, [pc, #72]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	00db      	lsls	r3, r3, #3
 800b534:	490e      	ldr	r1, [pc, #56]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b536:	4313      	orrs	r3, r2
 800b538:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b53a:	f000 f821 	bl	800b580 <HAL_RCC_GetSysClockFreq>
 800b53e:	4602      	mov	r2, r0
 800b540:	4b0b      	ldr	r3, [pc, #44]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	091b      	lsrs	r3, r3, #4
 800b546:	f003 030f 	and.w	r3, r3, #15
 800b54a:	490a      	ldr	r1, [pc, #40]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b54c:	5ccb      	ldrb	r3, [r1, r3]
 800b54e:	fa22 f303 	lsr.w	r3, r2, r3
 800b552:	4a09      	ldr	r2, [pc, #36]	; (800b578 <HAL_RCC_ClockConfig+0x1cc>)
 800b554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b556:	4b09      	ldr	r3, [pc, #36]	; (800b57c <HAL_RCC_ClockConfig+0x1d0>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fb f91e 	bl	800679c <HAL_InitTick>

  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	40022000 	.word	0x40022000
 800b570:	40021000 	.word	0x40021000
 800b574:	0801412c 	.word	0x0801412c
 800b578:	20000800 	.word	0x20000800
 800b57c:	20000804 	.word	0x20000804

0800b580 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b580:	b490      	push	{r4, r7}
 800b582:	b08a      	sub	sp, #40	; 0x28
 800b584:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800b586:	4b29      	ldr	r3, [pc, #164]	; (800b62c <HAL_RCC_GetSysClockFreq+0xac>)
 800b588:	1d3c      	adds	r4, r7, #4
 800b58a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b58c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800b590:	f240 2301 	movw	r3, #513	; 0x201
 800b594:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b596:	2300      	movs	r3, #0
 800b598:	61fb      	str	r3, [r7, #28]
 800b59a:	2300      	movs	r3, #0
 800b59c:	61bb      	str	r3, [r7, #24]
 800b59e:	2300      	movs	r3, #0
 800b5a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b5aa:	4b21      	ldr	r3, [pc, #132]	; (800b630 <HAL_RCC_GetSysClockFreq+0xb0>)
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	f003 030c 	and.w	r3, r3, #12
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d002      	beq.n	800b5c0 <HAL_RCC_GetSysClockFreq+0x40>
 800b5ba:	2b08      	cmp	r3, #8
 800b5bc:	d003      	beq.n	800b5c6 <HAL_RCC_GetSysClockFreq+0x46>
 800b5be:	e02b      	b.n	800b618 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b5c0:	4b1c      	ldr	r3, [pc, #112]	; (800b634 <HAL_RCC_GetSysClockFreq+0xb4>)
 800b5c2:	623b      	str	r3, [r7, #32]
      break;
 800b5c4:	e02b      	b.n	800b61e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	0c9b      	lsrs	r3, r3, #18
 800b5ca:	f003 030f 	and.w	r3, r3, #15
 800b5ce:	3328      	adds	r3, #40	; 0x28
 800b5d0:	443b      	add	r3, r7
 800b5d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800b5d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d012      	beq.n	800b608 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b5e2:	4b13      	ldr	r3, [pc, #76]	; (800b630 <HAL_RCC_GetSysClockFreq+0xb0>)
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	0c5b      	lsrs	r3, r3, #17
 800b5e8:	f003 0301 	and.w	r3, r3, #1
 800b5ec:	3328      	adds	r3, #40	; 0x28
 800b5ee:	443b      	add	r3, r7
 800b5f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b5f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	4a0e      	ldr	r2, [pc, #56]	; (800b634 <HAL_RCC_GetSysClockFreq+0xb4>)
 800b5fa:	fb03 f202 	mul.w	r2, r3, r2
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	fbb2 f3f3 	udiv	r3, r2, r3
 800b604:	627b      	str	r3, [r7, #36]	; 0x24
 800b606:	e004      	b.n	800b612 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	4a0b      	ldr	r2, [pc, #44]	; (800b638 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b60c:	fb02 f303 	mul.w	r3, r2, r3
 800b610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800b612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b614:	623b      	str	r3, [r7, #32]
      break;
 800b616:	e002      	b.n	800b61e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b618:	4b06      	ldr	r3, [pc, #24]	; (800b634 <HAL_RCC_GetSysClockFreq+0xb4>)
 800b61a:	623b      	str	r3, [r7, #32]
      break;
 800b61c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b61e:	6a3b      	ldr	r3, [r7, #32]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3728      	adds	r7, #40	; 0x28
 800b624:	46bd      	mov	sp, r7
 800b626:	bc90      	pop	{r4, r7}
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	080140b8 	.word	0x080140b8
 800b630:	40021000 	.word	0x40021000
 800b634:	007a1200 	.word	0x007a1200
 800b638:	003d0900 	.word	0x003d0900

0800b63c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b63c:	b480      	push	{r7}
 800b63e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b640:	4b02      	ldr	r3, [pc, #8]	; (800b64c <HAL_RCC_GetHCLKFreq+0x10>)
 800b642:	681b      	ldr	r3, [r3, #0]
}
 800b644:	4618      	mov	r0, r3
 800b646:	46bd      	mov	sp, r7
 800b648:	bc80      	pop	{r7}
 800b64a:	4770      	bx	lr
 800b64c:	20000800 	.word	0x20000800

0800b650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b654:	f7ff fff2 	bl	800b63c <HAL_RCC_GetHCLKFreq>
 800b658:	4602      	mov	r2, r0
 800b65a:	4b05      	ldr	r3, [pc, #20]	; (800b670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	0a1b      	lsrs	r3, r3, #8
 800b660:	f003 0307 	and.w	r3, r3, #7
 800b664:	4903      	ldr	r1, [pc, #12]	; (800b674 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b666:	5ccb      	ldrb	r3, [r1, r3]
 800b668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	40021000 	.word	0x40021000
 800b674:	0801413c 	.word	0x0801413c

0800b678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b67c:	f7ff ffde 	bl	800b63c <HAL_RCC_GetHCLKFreq>
 800b680:	4602      	mov	r2, r0
 800b682:	4b05      	ldr	r3, [pc, #20]	; (800b698 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	0adb      	lsrs	r3, r3, #11
 800b688:	f003 0307 	and.w	r3, r3, #7
 800b68c:	4903      	ldr	r1, [pc, #12]	; (800b69c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b68e:	5ccb      	ldrb	r3, [r1, r3]
 800b690:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b694:	4618      	mov	r0, r3
 800b696:	bd80      	pop	{r7, pc}
 800b698:	40021000 	.word	0x40021000
 800b69c:	0801413c 	.word	0x0801413c

0800b6a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b6a8:	4b0a      	ldr	r3, [pc, #40]	; (800b6d4 <RCC_Delay+0x34>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a0a      	ldr	r2, [pc, #40]	; (800b6d8 <RCC_Delay+0x38>)
 800b6ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b2:	0a5b      	lsrs	r3, r3, #9
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	fb02 f303 	mul.w	r3, r2, r3
 800b6ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b6bc:	bf00      	nop
  }
  while (Delay --);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	1e5a      	subs	r2, r3, #1
 800b6c2:	60fa      	str	r2, [r7, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1f9      	bne.n	800b6bc <RCC_Delay+0x1c>
}
 800b6c8:	bf00      	nop
 800b6ca:	bf00      	nop
 800b6cc:	3714      	adds	r7, #20
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bc80      	pop	{r7}
 800b6d2:	4770      	bx	lr
 800b6d4:	20000800 	.word	0x20000800
 800b6d8:	10624dd3 	.word	0x10624dd3

0800b6dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b086      	sub	sp, #24
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	613b      	str	r3, [r7, #16]
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d07d      	beq.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b6fc:	4b4f      	ldr	r3, [pc, #316]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6fe:	69db      	ldr	r3, [r3, #28]
 800b700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b704:	2b00      	cmp	r3, #0
 800b706:	d10d      	bne.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b708:	4b4c      	ldr	r3, [pc, #304]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b70a:	69db      	ldr	r3, [r3, #28]
 800b70c:	4a4b      	ldr	r2, [pc, #300]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b70e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b712:	61d3      	str	r3, [r2, #28]
 800b714:	4b49      	ldr	r3, [pc, #292]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b716:	69db      	ldr	r3, [r3, #28]
 800b718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b71c:	60bb      	str	r3, [r7, #8]
 800b71e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b720:	2301      	movs	r3, #1
 800b722:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b724:	4b46      	ldr	r3, [pc, #280]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d118      	bne.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b730:	4b43      	ldr	r3, [pc, #268]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a42      	ldr	r2, [pc, #264]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b73a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b73c:	f7fb f870 	bl	8006820 <HAL_GetTick>
 800b740:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b742:	e008      	b.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b744:	f7fb f86c 	bl	8006820 <HAL_GetTick>
 800b748:	4602      	mov	r2, r0
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	2b64      	cmp	r3, #100	; 0x64
 800b750:	d901      	bls.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800b752:	2303      	movs	r3, #3
 800b754:	e06d      	b.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b756:	4b3a      	ldr	r3, [pc, #232]	; (800b840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0f0      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b762:	4b36      	ldr	r3, [pc, #216]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b76a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d02e      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d027      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b780:	4b2e      	ldr	r3, [pc, #184]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b782:	6a1b      	ldr	r3, [r3, #32]
 800b784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b788:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b78a:	4b2e      	ldr	r3, [pc, #184]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b78c:	2201      	movs	r2, #1
 800b78e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b790:	4b2c      	ldr	r3, [pc, #176]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b792:	2200      	movs	r2, #0
 800b794:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800b796:	4a29      	ldr	r2, [pc, #164]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d014      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7a6:	f7fb f83b 	bl	8006820 <HAL_GetTick>
 800b7aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7ac:	e00a      	b.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7ae:	f7fb f837 	bl	8006820 <HAL_GetTick>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d901      	bls.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	e036      	b.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7c4:	4b1d      	ldr	r3, [pc, #116]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b7c6:	6a1b      	ldr	r3, [r3, #32]
 800b7c8:	f003 0302 	and.w	r3, r3, #2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d0ee      	beq.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7d0:	4b1a      	ldr	r3, [pc, #104]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b7d2:	6a1b      	ldr	r3, [r3, #32]
 800b7d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	4917      	ldr	r1, [pc, #92]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b7e2:	7dfb      	ldrb	r3, [r7, #23]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d105      	bne.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7e8:	4b14      	ldr	r3, [pc, #80]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b7ea:	69db      	ldr	r3, [r3, #28]
 800b7ec:	4a13      	ldr	r2, [pc, #76]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b7ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 0302 	and.w	r3, r3, #2
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d008      	beq.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b800:	4b0e      	ldr	r3, [pc, #56]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	490b      	ldr	r1, [pc, #44]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b80e:	4313      	orrs	r3, r2
 800b810:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0310 	and.w	r3, r3, #16
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d008      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b81e:	4b07      	ldr	r3, [pc, #28]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	4904      	ldr	r1, [pc, #16]	; (800b83c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b82c:	4313      	orrs	r3, r2
 800b82e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3718      	adds	r7, #24
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	40021000 	.word	0x40021000
 800b840:	40007000 	.word	0x40007000
 800b844:	42420440 	.word	0x42420440

0800b848 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b848:	b590      	push	{r4, r7, lr}
 800b84a:	b08d      	sub	sp, #52	; 0x34
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800b850:	4b58      	ldr	r3, [pc, #352]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800b852:	f107 040c 	add.w	r4, r7, #12
 800b856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b858:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800b85c:	f240 2301 	movw	r3, #513	; 0x201
 800b860:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800b862:	2300      	movs	r3, #0
 800b864:	627b      	str	r3, [r7, #36]	; 0x24
 800b866:	2300      	movs	r3, #0
 800b868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b86a:	2300      	movs	r3, #0
 800b86c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800b86e:	2300      	movs	r3, #0
 800b870:	61fb      	str	r3, [r7, #28]
 800b872:	2300      	movs	r3, #0
 800b874:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2b10      	cmp	r3, #16
 800b87a:	d00a      	beq.n	800b892 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b10      	cmp	r3, #16
 800b880:	f200 808e 	bhi.w	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d049      	beq.n	800b91e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	d079      	beq.n	800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800b890:	e086      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800b892:	4b49      	ldr	r3, [pc, #292]	; (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800b898:	4b47      	ldr	r3, [pc, #284]	; (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d07f      	beq.n	800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	0c9b      	lsrs	r3, r3, #18
 800b8a8:	f003 030f 	and.w	r3, r3, #15
 800b8ac:	3330      	adds	r3, #48	; 0x30
 800b8ae:	443b      	add	r3, r7
 800b8b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800b8b4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d017      	beq.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b8c0:	4b3d      	ldr	r3, [pc, #244]	; (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	0c5b      	lsrs	r3, r3, #17
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	3330      	adds	r3, #48	; 0x30
 800b8cc:	443b      	add	r3, r7
 800b8ce:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b8d2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00d      	beq.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800b8de:	4a37      	ldr	r2, [pc, #220]	; (800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	fbb2 f2f3 	udiv	r2, r2, r3
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	fb02 f303 	mul.w	r3, r2, r3
 800b8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8ee:	e004      	b.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b8f0:	6a3b      	ldr	r3, [r7, #32]
 800b8f2:	4a33      	ldr	r2, [pc, #204]	; (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800b8f4:	fb02 f303 	mul.w	r3, r2, r3
 800b8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800b8fa:	4b2f      	ldr	r3, [pc, #188]	; (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b906:	d102      	bne.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800b908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800b90c:	e04a      	b.n	800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800b90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b910:	005b      	lsls	r3, r3, #1
 800b912:	4a2c      	ldr	r2, [pc, #176]	; (800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800b914:	fba2 2303 	umull	r2, r3, r2, r3
 800b918:	085b      	lsrs	r3, r3, #1
 800b91a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800b91c:	e042      	b.n	800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800b91e:	4b26      	ldr	r3, [pc, #152]	; (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800b920:	6a1b      	ldr	r3, [r3, #32]
 800b922:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b92a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b92e:	d108      	bne.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	f003 0302 	and.w	r3, r3, #2
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800b93a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b93e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b940:	e01f      	b.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b94c:	d109      	bne.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800b94e:	4b1a      	ldr	r3, [pc, #104]	; (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800b950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b952:	f003 0302 	and.w	r3, r3, #2
 800b956:	2b00      	cmp	r3, #0
 800b958:	d003      	beq.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800b95a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800b95e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b960:	e00f      	b.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b96c:	d11c      	bne.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800b96e:	4b12      	ldr	r3, [pc, #72]	; (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b976:	2b00      	cmp	r3, #0
 800b978:	d016      	beq.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800b97a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b97e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800b980:	e012      	b.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800b982:	e011      	b.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800b984:	f7ff fe78 	bl	800b678 <HAL_RCC_GetPCLK2Freq>
 800b988:	4602      	mov	r2, r0
 800b98a:	4b0b      	ldr	r3, [pc, #44]	; (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	0b9b      	lsrs	r3, r3, #14
 800b990:	f003 0303 	and.w	r3, r3, #3
 800b994:	3301      	adds	r3, #1
 800b996:	005b      	lsls	r3, r3, #1
 800b998:	fbb2 f3f3 	udiv	r3, r2, r3
 800b99c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800b99e:	e004      	b.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800b9a0:	bf00      	nop
 800b9a2:	e002      	b.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800b9a4:	bf00      	nop
 800b9a6:	e000      	b.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800b9a8:	bf00      	nop
    }
  }
  return (frequency);
 800b9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3734      	adds	r7, #52	; 0x34
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd90      	pop	{r4, r7, pc}
 800b9b4:	080140c8 	.word	0x080140c8
 800b9b8:	40021000 	.word	0x40021000
 800b9bc:	007a1200 	.word	0x007a1200
 800b9c0:	003d0900 	.word	0x003d0900
 800b9c4:	aaaaaaab 	.word	0xaaaaaaab

0800b9c8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d101      	bne.n	800b9de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e084      	b.n	800bae8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	7c5b      	ldrb	r3, [r3, #17]
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d105      	bne.n	800b9f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f7f8 fc6c 	bl	80042cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 faa0 	bl	800bf40 <HAL_RTC_WaitForSynchro>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d004      	beq.n	800ba10 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2204      	movs	r2, #4
 800ba0a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	e06b      	b.n	800bae8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 fb59 	bl	800c0c8 <RTC_EnterInitMode>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d004      	beq.n	800ba26 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2204      	movs	r2, #4
 800ba20:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	e060      	b.n	800bae8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f022 0207 	bic.w	r2, r2, #7
 800ba34:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d005      	beq.n	800ba4a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800ba3e:	4b2c      	ldr	r3, [pc, #176]	; (800baf0 <HAL_RTC_Init+0x128>)
 800ba40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba42:	4a2b      	ldr	r2, [pc, #172]	; (800baf0 <HAL_RTC_Init+0x128>)
 800ba44:	f023 0301 	bic.w	r3, r3, #1
 800ba48:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800ba4a:	4b29      	ldr	r3, [pc, #164]	; (800baf0 <HAL_RTC_Init+0x128>)
 800ba4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba4e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	4926      	ldr	r1, [pc, #152]	; (800baf0 <HAL_RTC_Init+0x128>)
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba64:	d003      	beq.n	800ba6e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	e00e      	b.n	800ba8c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800ba6e:	2001      	movs	r0, #1
 800ba70:	f7ff feea 	bl	800b848 <HAL_RCCEx_GetPeriphCLKFreq>
 800ba74:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d104      	bne.n	800ba86 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2204      	movs	r2, #4
 800ba80:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	e030      	b.n	800bae8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f023 010f 	bic.w	r1, r3, #15
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	0c1a      	lsrs	r2, r3, #16
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	430a      	orrs	r2, r1
 800baa0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	0c1b      	lsrs	r3, r3, #16
 800baaa:	041b      	lsls	r3, r3, #16
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	b291      	uxth	r1, r2
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	6812      	ldr	r2, [r2, #0]
 800bab4:	430b      	orrs	r3, r1
 800bab6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 fb2d 	bl	800c118 <RTC_ExitInitMode>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d004      	beq.n	800bace <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2204      	movs	r2, #4
 800bac8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	e00c      	b.n	800bae8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2201      	movs	r2, #1
 800bade:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2201      	movs	r2, #1
 800bae4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800bae6:	2300      	movs	r3, #0
  }
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	40006c00 	.word	0x40006c00

0800baf4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800baf4:	b590      	push	{r4, r7, lr}
 800baf6:	b087      	sub	sp, #28
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800bb00:	2300      	movs	r3, #0
 800bb02:	617b      	str	r3, [r7, #20]
 800bb04:	2300      	movs	r3, #0
 800bb06:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d002      	beq.n	800bb14 <HAL_RTC_SetTime+0x20>
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d101      	bne.n	800bb18 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e080      	b.n	800bc1a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	7c1b      	ldrb	r3, [r3, #16]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d101      	bne.n	800bb24 <HAL_RTC_SetTime+0x30>
 800bb20:	2302      	movs	r3, #2
 800bb22:	e07a      	b.n	800bc1a <HAL_RTC_SetTime+0x126>
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2201      	movs	r2, #1
 800bb28:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d113      	bne.n	800bb5e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800bb40:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	785b      	ldrb	r3, [r3, #1]
 800bb48:	4619      	mov	r1, r3
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	011b      	lsls	r3, r3, #4
 800bb4e:	1a5b      	subs	r3, r3, r1
 800bb50:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800bb52:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800bb58:	4413      	add	r3, r2
 800bb5a:	617b      	str	r3, [r7, #20]
 800bb5c:	e01e      	b.n	800bb9c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 fb1d 	bl	800c1a2 <RTC_Bcd2ToByte>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800bb70:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	785b      	ldrb	r3, [r3, #1]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f000 fb12 	bl	800c1a2 <RTC_Bcd2ToByte>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	461a      	mov	r2, r3
 800bb82:	4613      	mov	r3, r2
 800bb84:	011b      	lsls	r3, r3, #4
 800bb86:	1a9b      	subs	r3, r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800bb8a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	789b      	ldrb	r3, [r3, #2]
 800bb90:	4618      	mov	r0, r3
 800bb92:	f000 fb06 	bl	800c1a2 <RTC_Bcd2ToByte>
 800bb96:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800bb98:	4423      	add	r3, r4
 800bb9a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800bb9c:	6979      	ldr	r1, [r7, #20]
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f000 fa2b 	bl	800bffa <RTC_WriteTimeCounter>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d007      	beq.n	800bbba <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2204      	movs	r2, #4
 800bbae:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e02f      	b.n	800bc1a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f022 0205 	bic.w	r2, r2, #5
 800bbc8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f000 fa3c 	bl	800c048 <RTC_ReadAlarmCounter>
 800bbd0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbd8:	d018      	beq.n	800bc0c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d214      	bcs.n	800bc0c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800bbe8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800bbec:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800bbee:	6939      	ldr	r1, [r7, #16]
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	f000 fa42 	bl	800c07a <RTC_WriteAlarmCounter>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d007      	beq.n	800bc0c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2204      	movs	r2, #4
 800bc00:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e006      	b.n	800bc1a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2200      	movs	r2, #0
 800bc16:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800bc18:	2300      	movs	r3, #0
  }
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	371c      	adds	r7, #28
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd90      	pop	{r4, r7, pc}
	...

0800bc24 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b088      	sub	sp, #32
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	61bb      	str	r3, [r7, #24]
 800bc34:	2300      	movs	r3, #0
 800bc36:	61fb      	str	r3, [r7, #28]
 800bc38:	2300      	movs	r3, #0
 800bc3a:	617b      	str	r3, [r7, #20]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d002      	beq.n	800bc4c <HAL_RTC_GetTime+0x28>
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e0b5      	b.n	800bdbc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	f003 0304 	and.w	r3, r3, #4
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e0ac      	b.n	800bdbc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f000 f999 	bl	800bf9a <RTC_ReadTimeCounter>
 800bc68:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	4a55      	ldr	r2, [pc, #340]	; (800bdc4 <HAL_RTC_GetTime+0x1a0>)
 800bc6e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc72:	0adb      	lsrs	r3, r3, #11
 800bc74:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800bc76:	69ba      	ldr	r2, [r7, #24]
 800bc78:	4b52      	ldr	r3, [pc, #328]	; (800bdc4 <HAL_RTC_GetTime+0x1a0>)
 800bc7a:	fba3 1302 	umull	r1, r3, r3, r2
 800bc7e:	0adb      	lsrs	r3, r3, #11
 800bc80:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800bc84:	fb01 f303 	mul.w	r3, r1, r3
 800bc88:	1ad3      	subs	r3, r2, r3
 800bc8a:	4a4f      	ldr	r2, [pc, #316]	; (800bdc8 <HAL_RTC_GetTime+0x1a4>)
 800bc8c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc90:	095b      	lsrs	r3, r3, #5
 800bc92:	b2da      	uxtb	r2, r3
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	4a4a      	ldr	r2, [pc, #296]	; (800bdc4 <HAL_RTC_GetTime+0x1a0>)
 800bc9c:	fba2 1203 	umull	r1, r2, r2, r3
 800bca0:	0ad2      	lsrs	r2, r2, #11
 800bca2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800bca6:	fb01 f202 	mul.w	r2, r1, r2
 800bcaa:	1a9a      	subs	r2, r3, r2
 800bcac:	4b46      	ldr	r3, [pc, #280]	; (800bdc8 <HAL_RTC_GetTime+0x1a4>)
 800bcae:	fba3 1302 	umull	r1, r3, r3, r2
 800bcb2:	0959      	lsrs	r1, r3, #5
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	011b      	lsls	r3, r3, #4
 800bcb8:	1a5b      	subs	r3, r3, r1
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	1ad1      	subs	r1, r2, r3
 800bcbe:	b2ca      	uxtb	r2, r1
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	2b17      	cmp	r3, #23
 800bcc8:	d955      	bls.n	800bd76 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	4a3f      	ldr	r2, [pc, #252]	; (800bdcc <HAL_RTC_GetTime+0x1a8>)
 800bcce:	fba2 2303 	umull	r2, r3, r2, r3
 800bcd2:	091b      	lsrs	r3, r3, #4
 800bcd4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800bcd6:	6939      	ldr	r1, [r7, #16]
 800bcd8:	4b3c      	ldr	r3, [pc, #240]	; (800bdcc <HAL_RTC_GetTime+0x1a8>)
 800bcda:	fba3 2301 	umull	r2, r3, r3, r1
 800bcde:	091a      	lsrs	r2, r3, #4
 800bce0:	4613      	mov	r3, r2
 800bce2:	005b      	lsls	r3, r3, #1
 800bce4:	4413      	add	r3, r2
 800bce6:	00db      	lsls	r3, r3, #3
 800bce8:	1aca      	subs	r2, r1, r3
 800bcea:	b2d2      	uxtb	r2, r2
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f000 f9a9 	bl	800c048 <RTC_ReadAlarmCounter>
 800bcf6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcfe:	d008      	beq.n	800bd12 <HAL_RTC_GetTime+0xee>
 800bd00:	69fa      	ldr	r2, [r7, #28]
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d904      	bls.n	800bd12 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800bd08:	69fa      	ldr	r2, [r7, #28]
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	1ad3      	subs	r3, r2, r3
 800bd0e:	61fb      	str	r3, [r7, #28]
 800bd10:	e002      	b.n	800bd18 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800bd12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd16:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	4a2d      	ldr	r2, [pc, #180]	; (800bdd0 <HAL_RTC_GetTime+0x1ac>)
 800bd1c:	fb02 f303 	mul.w	r3, r2, r3
 800bd20:	69ba      	ldr	r2, [r7, #24]
 800bd22:	1ad3      	subs	r3, r2, r3
 800bd24:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800bd26:	69b9      	ldr	r1, [r7, #24]
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f000 f966 	bl	800bffa <RTC_WriteTimeCounter>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d001      	beq.n	800bd38 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e041      	b.n	800bdbc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd3e:	d00c      	beq.n	800bd5a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800bd40:	69fa      	ldr	r2, [r7, #28]
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	4413      	add	r3, r2
 800bd46:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800bd48:	69f9      	ldr	r1, [r7, #28]
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f000 f995 	bl	800c07a <RTC_WriteAlarmCounter>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00a      	beq.n	800bd6c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e030      	b.n	800bdbc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800bd5a:	69f9      	ldr	r1, [r7, #28]
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f000 f98c 	bl	800c07a <RTC_WriteAlarmCounter>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d001      	beq.n	800bd6c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e027      	b.n	800bdbc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800bd6c:	6979      	ldr	r1, [r7, #20]
 800bd6e:	68f8      	ldr	r0, [r7, #12]
 800bd70:	f000 fa34 	bl	800c1dc <RTC_DateUpdate>
 800bd74:	e003      	b.n	800bd7e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d01a      	beq.n	800bdba <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 f9ed 	bl	800c168 <RTC_ByteToBcd2>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	461a      	mov	r2, r3
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	785b      	ldrb	r3, [r3, #1]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f000 f9e4 	bl	800c168 <RTC_ByteToBcd2>
 800bda0:	4603      	mov	r3, r0
 800bda2:	461a      	mov	r2, r3
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	789b      	ldrb	r3, [r3, #2]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f000 f9db 	bl	800c168 <RTC_ByteToBcd2>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3720      	adds	r7, #32
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	91a2b3c5 	.word	0x91a2b3c5
 800bdc8:	88888889 	.word	0x88888889
 800bdcc:	aaaaaaab 	.word	0xaaaaaaab
 800bdd0:	00015180 	.word	0x00015180

0800bdd4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b088      	sub	sp, #32
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800bde0:	2300      	movs	r3, #0
 800bde2:	61fb      	str	r3, [r7, #28]
 800bde4:	2300      	movs	r3, #0
 800bde6:	61bb      	str	r3, [r7, #24]
 800bde8:	2300      	movs	r3, #0
 800bdea:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d002      	beq.n	800bdf8 <HAL_RTC_SetDate+0x24>
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d101      	bne.n	800bdfc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e097      	b.n	800bf2c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	7c1b      	ldrb	r3, [r3, #16]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d101      	bne.n	800be08 <HAL_RTC_SetDate+0x34>
 800be04:	2302      	movs	r3, #2
 800be06:	e091      	b.n	800bf2c <HAL_RTC_SetDate+0x158>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2201      	movs	r2, #1
 800be0c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2202      	movs	r2, #2
 800be12:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d10c      	bne.n	800be34 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	78da      	ldrb	r2, [r3, #3]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	785a      	ldrb	r2, [r3, #1]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	789a      	ldrb	r2, [r3, #2]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	739a      	strb	r2, [r3, #14]
 800be32:	e01a      	b.n	800be6a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	78db      	ldrb	r3, [r3, #3]
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 f9b2 	bl	800c1a2 <RTC_Bcd2ToByte>
 800be3e:	4603      	mov	r3, r0
 800be40:	461a      	mov	r2, r3
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	785b      	ldrb	r3, [r3, #1]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f000 f9a9 	bl	800c1a2 <RTC_Bcd2ToByte>
 800be50:	4603      	mov	r3, r0
 800be52:	461a      	mov	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	789b      	ldrb	r3, [r3, #2]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f000 f9a0 	bl	800c1a2 <RTC_Bcd2ToByte>
 800be62:	4603      	mov	r3, r0
 800be64:	461a      	mov	r2, r3
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	7bdb      	ldrb	r3, [r3, #15]
 800be6e:	4618      	mov	r0, r3
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	7b59      	ldrb	r1, [r3, #13]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	7b9b      	ldrb	r3, [r3, #14]
 800be78:	461a      	mov	r2, r3
 800be7a:	f000 fa8b 	bl	800c394 <RTC_WeekDayNum>
 800be7e:	4603      	mov	r3, r0
 800be80:	461a      	mov	r2, r3
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	7b1a      	ldrb	r2, [r3, #12]
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f000 f883 	bl	800bf9a <RTC_ReadTimeCounter>
 800be94:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	4a26      	ldr	r2, [pc, #152]	; (800bf34 <HAL_RTC_SetDate+0x160>)
 800be9a:	fba2 2303 	umull	r2, r3, r2, r3
 800be9e:	0adb      	lsrs	r3, r3, #11
 800bea0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	2b18      	cmp	r3, #24
 800bea6:	d93a      	bls.n	800bf1e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	4a23      	ldr	r2, [pc, #140]	; (800bf38 <HAL_RTC_SetDate+0x164>)
 800beac:	fba2 2303 	umull	r2, r3, r2, r3
 800beb0:	091b      	lsrs	r3, r3, #4
 800beb2:	4a22      	ldr	r2, [pc, #136]	; (800bf3c <HAL_RTC_SetDate+0x168>)
 800beb4:	fb02 f303 	mul.w	r3, r2, r3
 800beb8:	69fa      	ldr	r2, [r7, #28]
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800bebe:	69f9      	ldr	r1, [r7, #28]
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f000 f89a 	bl	800bffa <RTC_WriteTimeCounter>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d007      	beq.n	800bedc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2204      	movs	r2, #4
 800bed0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800bed8:	2301      	movs	r3, #1
 800beda:	e027      	b.n	800bf2c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f000 f8b3 	bl	800c048 <RTC_ReadAlarmCounter>
 800bee2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beea:	d018      	beq.n	800bf1e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d214      	bcs.n	800bf1e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800befa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800befe:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800bf00:	69b9      	ldr	r1, [r7, #24]
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f000 f8b9 	bl	800c07a <RTC_WriteAlarmCounter>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d007      	beq.n	800bf1e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2204      	movs	r2, #4
 800bf12:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e006      	b.n	800bf2c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2201      	movs	r2, #1
 800bf22:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2200      	movs	r2, #0
 800bf28:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3720      	adds	r7, #32
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	91a2b3c5 	.word	0x91a2b3c5
 800bf38:	aaaaaaab 	.word	0xaaaaaaab
 800bf3c:	00015180 	.word	0x00015180

0800bf40 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d101      	bne.n	800bf56 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800bf52:	2301      	movs	r3, #1
 800bf54:	e01d      	b.n	800bf92 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f022 0208 	bic.w	r2, r2, #8
 800bf64:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800bf66:	f7fa fc5b 	bl	8006820 <HAL_GetTick>
 800bf6a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800bf6c:	e009      	b.n	800bf82 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800bf6e:	f7fa fc57 	bl	8006820 <HAL_GetTick>
 800bf72:	4602      	mov	r2, r0
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf7c:	d901      	bls.n	800bf82 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	e007      	b.n	800bf92 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	f003 0308 	and.w	r3, r3, #8
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d0ee      	beq.n	800bf6e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b087      	sub	sp, #28
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	827b      	strh	r3, [r7, #18]
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	823b      	strh	r3, [r7, #16]
 800bfaa:	2300      	movs	r3, #0
 800bfac:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	699b      	ldr	r3, [r3, #24]
 800bfb8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	69db      	ldr	r3, [r3, #28]
 800bfc0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	699b      	ldr	r3, [r3, #24]
 800bfc8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800bfca:	8a7a      	ldrh	r2, [r7, #18]
 800bfcc:	8a3b      	ldrh	r3, [r7, #16]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d008      	beq.n	800bfe4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800bfd2:	8a3b      	ldrh	r3, [r7, #16]
 800bfd4:	041a      	lsls	r2, r3, #16
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	69db      	ldr	r3, [r3, #28]
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	617b      	str	r3, [r7, #20]
 800bfe2:	e004      	b.n	800bfee <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800bfe4:	8a7b      	ldrh	r3, [r7, #18]
 800bfe6:	041a      	lsls	r2, r3, #16
 800bfe8:	89fb      	ldrh	r3, [r7, #14]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800bfee:	697b      	ldr	r3, [r7, #20]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	371c      	adds	r7, #28
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bc80      	pop	{r7}
 800bff8:	4770      	bx	lr

0800bffa <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b084      	sub	sp, #16
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 f85d 	bl	800c0c8 <RTC_EnterInitMode>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d002      	beq.n	800c01a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	73fb      	strb	r3, [r7, #15]
 800c018:	e011      	b.n	800c03e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	683a      	ldr	r2, [r7, #0]
 800c020:	0c12      	lsrs	r2, r2, #16
 800c022:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	683a      	ldr	r2, [r7, #0]
 800c02a:	b292      	uxth	r2, r2
 800c02c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f872 	bl	800c118 <RTC_ExitInitMode>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d001      	beq.n	800c03e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800c03a:	2301      	movs	r3, #1
 800c03c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800c050:	2300      	movs	r3, #0
 800c052:	81fb      	strh	r3, [r7, #14]
 800c054:	2300      	movs	r3, #0
 800c056:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c066:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800c068:	89fb      	ldrh	r3, [r7, #14]
 800c06a:	041a      	lsls	r2, r3, #16
 800c06c:	89bb      	ldrh	r3, [r7, #12]
 800c06e:	4313      	orrs	r3, r2
}
 800c070:	4618      	mov	r0, r3
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	bc80      	pop	{r7}
 800c078:	4770      	bx	lr

0800c07a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b084      	sub	sp, #16
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
 800c082:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 f81d 	bl	800c0c8 <RTC_EnterInitMode>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	73fb      	strb	r3, [r7, #15]
 800c098:	e011      	b.n	800c0be <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	0c12      	lsrs	r2, r2, #16
 800c0a2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	683a      	ldr	r2, [r7, #0]
 800c0aa:	b292      	uxth	r2, r2
 800c0ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 f832 	bl	800c118 <RTC_ExitInitMode>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d001      	beq.n	800c0be <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800c0d4:	f7fa fba4 	bl	8006820 <HAL_GetTick>
 800c0d8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800c0da:	e009      	b.n	800c0f0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800c0dc:	f7fa fba0 	bl	8006820 <HAL_GetTick>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0ea:	d901      	bls.n	800c0f0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	e00f      	b.n	800c110 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	f003 0320 	and.w	r3, r3, #32
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d0ee      	beq.n	800c0dc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	685a      	ldr	r2, [r3, #4]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f042 0210 	orr.w	r2, r2, #16
 800c10c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c120:	2300      	movs	r3, #0
 800c122:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	685a      	ldr	r2, [r3, #4]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f022 0210 	bic.w	r2, r2, #16
 800c132:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800c134:	f7fa fb74 	bl	8006820 <HAL_GetTick>
 800c138:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800c13a:	e009      	b.n	800c150 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800c13c:	f7fa fb70 	bl	8006820 <HAL_GetTick>
 800c140:	4602      	mov	r2, r0
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c14a:	d901      	bls.n	800c150 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800c14c:	2303      	movs	r3, #3
 800c14e:	e007      	b.n	800c160 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	f003 0320 	and.w	r3, r3, #32
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d0ee      	beq.n	800c13c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c168:	b480      	push	{r7}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	4603      	mov	r3, r0
 800c170:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c172:	2300      	movs	r3, #0
 800c174:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800c176:	e005      	b.n	800c184 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	3301      	adds	r3, #1
 800c17c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c17e:	79fb      	ldrb	r3, [r7, #7]
 800c180:	3b0a      	subs	r3, #10
 800c182:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800c184:	79fb      	ldrb	r3, [r7, #7]
 800c186:	2b09      	cmp	r3, #9
 800c188:	d8f6      	bhi.n	800c178 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	011b      	lsls	r3, r3, #4
 800c190:	b2da      	uxtb	r2, r3
 800c192:	79fb      	ldrb	r3, [r7, #7]
 800c194:	4313      	orrs	r3, r2
 800c196:	b2db      	uxtb	r3, r3
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3714      	adds	r7, #20
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bc80      	pop	{r7}
 800c1a0:	4770      	bx	lr

0800c1a2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c1a2:	b480      	push	{r7}
 800c1a4:	b085      	sub	sp, #20
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800c1b0:	79fb      	ldrb	r3, [r7, #7]
 800c1b2:	091b      	lsrs	r3, r3, #4
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	4413      	add	r3, r2
 800c1be:	005b      	lsls	r3, r3, #1
 800c1c0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c1c2:	79fb      	ldrb	r3, [r7, #7]
 800c1c4:	f003 030f 	and.w	r3, r3, #15
 800c1c8:	b2da      	uxtb	r2, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	4413      	add	r3, r2
 800c1d0:	b2db      	uxtb	r3, r3
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3714      	adds	r7, #20
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bc80      	pop	{r7}
 800c1da:	4770      	bx	lr

0800c1dc <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	617b      	str	r3, [r7, #20]
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	613b      	str	r3, [r7, #16]
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	7bdb      	ldrb	r3, [r3, #15]
 800c1fa:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	7b5b      	ldrb	r3, [r3, #13]
 800c200:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	7b9b      	ldrb	r3, [r3, #14]
 800c206:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800c208:	2300      	movs	r3, #0
 800c20a:	60bb      	str	r3, [r7, #8]
 800c20c:	e06f      	b.n	800c2ee <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d011      	beq.n	800c238 <RTC_DateUpdate+0x5c>
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	2b03      	cmp	r3, #3
 800c218:	d00e      	beq.n	800c238 <RTC_DateUpdate+0x5c>
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	2b05      	cmp	r3, #5
 800c21e:	d00b      	beq.n	800c238 <RTC_DateUpdate+0x5c>
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	2b07      	cmp	r3, #7
 800c224:	d008      	beq.n	800c238 <RTC_DateUpdate+0x5c>
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	2b08      	cmp	r3, #8
 800c22a:	d005      	beq.n	800c238 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	2b0a      	cmp	r3, #10
 800c230:	d002      	beq.n	800c238 <RTC_DateUpdate+0x5c>
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	2b0c      	cmp	r3, #12
 800c236:	d117      	bne.n	800c268 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2b1e      	cmp	r3, #30
 800c23c:	d803      	bhi.n	800c246 <RTC_DateUpdate+0x6a>
      {
        day++;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	3301      	adds	r3, #1
 800c242:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800c244:	e050      	b.n	800c2e8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	2b0c      	cmp	r3, #12
 800c24a:	d005      	beq.n	800c258 <RTC_DateUpdate+0x7c>
        {
          month++;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	3301      	adds	r3, #1
 800c250:	613b      	str	r3, [r7, #16]
          day = 1U;
 800c252:	2301      	movs	r3, #1
 800c254:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800c256:	e047      	b.n	800c2e8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800c258:	2301      	movs	r3, #1
 800c25a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800c25c:	2301      	movs	r3, #1
 800c25e:	60fb      	str	r3, [r7, #12]
          year++;
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	3301      	adds	r3, #1
 800c264:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800c266:	e03f      	b.n	800c2e8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	2b04      	cmp	r3, #4
 800c26c:	d008      	beq.n	800c280 <RTC_DateUpdate+0xa4>
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	2b06      	cmp	r3, #6
 800c272:	d005      	beq.n	800c280 <RTC_DateUpdate+0xa4>
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	2b09      	cmp	r3, #9
 800c278:	d002      	beq.n	800c280 <RTC_DateUpdate+0xa4>
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	2b0b      	cmp	r3, #11
 800c27e:	d10c      	bne.n	800c29a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2b1d      	cmp	r3, #29
 800c284:	d803      	bhi.n	800c28e <RTC_DateUpdate+0xb2>
      {
        day++;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	3301      	adds	r3, #1
 800c28a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800c28c:	e02c      	b.n	800c2e8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	3301      	adds	r3, #1
 800c292:	613b      	str	r3, [r7, #16]
        day = 1U;
 800c294:	2301      	movs	r3, #1
 800c296:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800c298:	e026      	b.n	800c2e8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d123      	bne.n	800c2e8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2b1b      	cmp	r3, #27
 800c2a4:	d803      	bhi.n	800c2ae <RTC_DateUpdate+0xd2>
      {
        day++;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	e01c      	b.n	800c2e8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2b1c      	cmp	r3, #28
 800c2b2:	d111      	bne.n	800c2d8 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f000 f839 	bl	800c330 <RTC_IsLeapYear>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d003      	beq.n	800c2cc <RTC_DateUpdate+0xf0>
        {
          day++;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	60fb      	str	r3, [r7, #12]
 800c2ca:	e00d      	b.n	800c2e8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	613b      	str	r3, [r7, #16]
          day = 1U;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	e007      	b.n	800c2e8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2b1d      	cmp	r3, #29
 800c2dc:	d104      	bne.n	800c2e8 <RTC_DateUpdate+0x10c>
      {
        month++;
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	613b      	str	r3, [r7, #16]
        day = 1U;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	60bb      	str	r3, [r7, #8]
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d38b      	bcc.n	800c20e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	b2da      	uxtb	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	b2da      	uxtb	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	b2da      	uxtb	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	b2db      	uxtb	r3, r3
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	b2d2      	uxtb	r2, r2
 800c316:	4619      	mov	r1, r3
 800c318:	6978      	ldr	r0, [r7, #20]
 800c31a:	f000 f83b 	bl	800c394 <RTC_WeekDayNum>
 800c31e:	4603      	mov	r3, r0
 800c320:	461a      	mov	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	731a      	strb	r2, [r3, #12]
}
 800c326:	bf00      	nop
 800c328:	3718      	adds	r7, #24
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
	...

0800c330 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	4603      	mov	r3, r0
 800c338:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800c33a:	88fb      	ldrh	r3, [r7, #6]
 800c33c:	f003 0303 	and.w	r3, r3, #3
 800c340:	b29b      	uxth	r3, r3
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800c346:	2300      	movs	r3, #0
 800c348:	e01d      	b.n	800c386 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800c34a:	88fb      	ldrh	r3, [r7, #6]
 800c34c:	4a10      	ldr	r2, [pc, #64]	; (800c390 <RTC_IsLeapYear+0x60>)
 800c34e:	fba2 1203 	umull	r1, r2, r2, r3
 800c352:	0952      	lsrs	r2, r2, #5
 800c354:	2164      	movs	r1, #100	; 0x64
 800c356:	fb01 f202 	mul.w	r2, r1, r2
 800c35a:	1a9b      	subs	r3, r3, r2
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800c362:	2301      	movs	r3, #1
 800c364:	e00f      	b.n	800c386 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800c366:	88fb      	ldrh	r3, [r7, #6]
 800c368:	4a09      	ldr	r2, [pc, #36]	; (800c390 <RTC_IsLeapYear+0x60>)
 800c36a:	fba2 1203 	umull	r1, r2, r2, r3
 800c36e:	09d2      	lsrs	r2, r2, #7
 800c370:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800c374:	fb01 f202 	mul.w	r2, r1, r2
 800c378:	1a9b      	subs	r3, r3, r2
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d101      	bne.n	800c384 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800c380:	2301      	movs	r3, #1
 800c382:	e000      	b.n	800c386 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800c384:	2300      	movs	r3, #0
  }
}
 800c386:	4618      	mov	r0, r3
 800c388:	370c      	adds	r7, #12
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bc80      	pop	{r7}
 800c38e:	4770      	bx	lr
 800c390:	51eb851f 	.word	0x51eb851f

0800c394 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	460b      	mov	r3, r1
 800c39e:	70fb      	strb	r3, [r7, #3]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	60bb      	str	r3, [r7, #8]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800c3b2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800c3b4:	78fb      	ldrb	r3, [r7, #3]
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d82d      	bhi.n	800c416 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800c3ba:	78fa      	ldrb	r2, [r7, #3]
 800c3bc:	4613      	mov	r3, r2
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	4413      	add	r3, r2
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	1a9b      	subs	r3, r3, r2
 800c3c6:	4a2c      	ldr	r2, [pc, #176]	; (800c478 <RTC_WeekDayNum+0xe4>)
 800c3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800c3cc:	085a      	lsrs	r2, r3, #1
 800c3ce:	78bb      	ldrb	r3, [r7, #2]
 800c3d0:	441a      	add	r2, r3
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	441a      	add	r2, r3
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	089b      	lsrs	r3, r3, #2
 800c3dc:	441a      	add	r2, r3
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	4926      	ldr	r1, [pc, #152]	; (800c47c <RTC_WeekDayNum+0xe8>)
 800c3e4:	fba1 1303 	umull	r1, r3, r1, r3
 800c3e8:	095b      	lsrs	r3, r3, #5
 800c3ea:	1ad2      	subs	r2, r2, r3
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	3b01      	subs	r3, #1
 800c3f0:	4922      	ldr	r1, [pc, #136]	; (800c47c <RTC_WeekDayNum+0xe8>)
 800c3f2:	fba1 1303 	umull	r1, r3, r1, r3
 800c3f6:	09db      	lsrs	r3, r3, #7
 800c3f8:	4413      	add	r3, r2
 800c3fa:	1d1a      	adds	r2, r3, #4
 800c3fc:	4b20      	ldr	r3, [pc, #128]	; (800c480 <RTC_WeekDayNum+0xec>)
 800c3fe:	fba3 1302 	umull	r1, r3, r3, r2
 800c402:	1ad1      	subs	r1, r2, r3
 800c404:	0849      	lsrs	r1, r1, #1
 800c406:	440b      	add	r3, r1
 800c408:	0899      	lsrs	r1, r3, #2
 800c40a:	460b      	mov	r3, r1
 800c40c:	00db      	lsls	r3, r3, #3
 800c40e:	1a5b      	subs	r3, r3, r1
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	60fb      	str	r3, [r7, #12]
 800c414:	e029      	b.n	800c46a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800c416:	78fa      	ldrb	r2, [r7, #3]
 800c418:	4613      	mov	r3, r2
 800c41a:	005b      	lsls	r3, r3, #1
 800c41c:	4413      	add	r3, r2
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	1a9b      	subs	r3, r3, r2
 800c422:	4a15      	ldr	r2, [pc, #84]	; (800c478 <RTC_WeekDayNum+0xe4>)
 800c424:	fba2 2303 	umull	r2, r3, r2, r3
 800c428:	085a      	lsrs	r2, r3, #1
 800c42a:	78bb      	ldrb	r3, [r7, #2]
 800c42c:	441a      	add	r2, r3
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	441a      	add	r2, r3
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	089b      	lsrs	r3, r3, #2
 800c436:	441a      	add	r2, r3
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	4910      	ldr	r1, [pc, #64]	; (800c47c <RTC_WeekDayNum+0xe8>)
 800c43c:	fba1 1303 	umull	r1, r3, r1, r3
 800c440:	095b      	lsrs	r3, r3, #5
 800c442:	1ad2      	subs	r2, r2, r3
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	490d      	ldr	r1, [pc, #52]	; (800c47c <RTC_WeekDayNum+0xe8>)
 800c448:	fba1 1303 	umull	r1, r3, r1, r3
 800c44c:	09db      	lsrs	r3, r3, #7
 800c44e:	4413      	add	r3, r2
 800c450:	1c9a      	adds	r2, r3, #2
 800c452:	4b0b      	ldr	r3, [pc, #44]	; (800c480 <RTC_WeekDayNum+0xec>)
 800c454:	fba3 1302 	umull	r1, r3, r3, r2
 800c458:	1ad1      	subs	r1, r2, r3
 800c45a:	0849      	lsrs	r1, r1, #1
 800c45c:	440b      	add	r3, r1
 800c45e:	0899      	lsrs	r1, r3, #2
 800c460:	460b      	mov	r3, r1
 800c462:	00db      	lsls	r3, r3, #3
 800c464:	1a5b      	subs	r3, r3, r1
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	b2db      	uxtb	r3, r3
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	bc80      	pop	{r7}
 800c476:	4770      	bx	lr
 800c478:	38e38e39 	.word	0x38e38e39
 800c47c:	51eb851f 	.word	0x51eb851f
 800c480:	24924925 	.word	0x24924925

0800c484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d101      	bne.n	800c496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	e076      	b.n	800c584 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d108      	bne.n	800c4b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4a6:	d009      	beq.n	800c4bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	61da      	str	r2, [r3, #28]
 800c4ae:	e005      	b.n	800c4bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d106      	bne.n	800c4dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7f7 ff1c 	bl	8004314 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2202      	movs	r2, #2
 800c4e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c504:	431a      	orrs	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c50e:	431a      	orrs	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	f003 0302 	and.w	r3, r3, #2
 800c518:	431a      	orrs	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	f003 0301 	and.w	r3, r3, #1
 800c522:	431a      	orrs	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c52c:	431a      	orrs	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	69db      	ldr	r3, [r3, #28]
 800c532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c536:	431a      	orrs	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a1b      	ldr	r3, [r3, #32]
 800c53c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c540:	ea42 0103 	orr.w	r1, r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c548:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	430a      	orrs	r2, r1
 800c552:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	0c1a      	lsrs	r2, r3, #16
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f002 0204 	and.w	r2, r2, #4
 800c562:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	69da      	ldr	r2, [r3, #28]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c572:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2201      	movs	r2, #1
 800c57e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c582:	2300      	movs	r3, #0
}
 800c584:	4618      	mov	r0, r3
 800c586:	3708      	adds	r7, #8
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b088      	sub	sp, #32
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	603b      	str	r3, [r7, #0]
 800c598:	4613      	mov	r3, r2
 800c59a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d101      	bne.n	800c5ae <HAL_SPI_Transmit+0x22>
 800c5aa:	2302      	movs	r3, #2
 800c5ac:	e126      	b.n	800c7fc <HAL_SPI_Transmit+0x270>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c5b6:	f7fa f933 	bl	8006820 <HAL_GetTick>
 800c5ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c5bc:	88fb      	ldrh	r3, [r7, #6]
 800c5be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d002      	beq.n	800c5d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c5cc:	2302      	movs	r3, #2
 800c5ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c5d0:	e10b      	b.n	800c7ea <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d002      	beq.n	800c5de <HAL_SPI_Transmit+0x52>
 800c5d8:	88fb      	ldrh	r3, [r7, #6]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d102      	bne.n	800c5e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c5e2:	e102      	b.n	800c7ea <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2203      	movs	r2, #3
 800c5e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	68ba      	ldr	r2, [r7, #8]
 800c5f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	88fa      	ldrh	r2, [r7, #6]
 800c5fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	88fa      	ldrh	r2, [r7, #6]
 800c602:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2200      	movs	r2, #0
 800c608:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2200      	movs	r2, #0
 800c60e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2200      	movs	r2, #0
 800c61a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c62a:	d10f      	bne.n	800c64c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c63a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c64a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c656:	2b40      	cmp	r3, #64	; 0x40
 800c658:	d007      	beq.n	800c66a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	681a      	ldr	r2, [r3, #0]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c668:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c672:	d14b      	bne.n	800c70c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d002      	beq.n	800c682 <HAL_SPI_Transmit+0xf6>
 800c67c:	8afb      	ldrh	r3, [r7, #22]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d13e      	bne.n	800c700 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c686:	881a      	ldrh	r2, [r3, #0]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c692:	1c9a      	adds	r2, r3, #2
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	3b01      	subs	r3, #1
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c6a6:	e02b      	b.n	800c700 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	f003 0302 	and.w	r3, r3, #2
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d112      	bne.n	800c6dc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ba:	881a      	ldrh	r2, [r3, #0]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c6:	1c9a      	adds	r2, r3, #2
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	86da      	strh	r2, [r3, #54]	; 0x36
 800c6da:	e011      	b.n	800c700 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6dc:	f7fa f8a0 	bl	8006820 <HAL_GetTick>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d803      	bhi.n	800c6f4 <HAL_SPI_Transmit+0x168>
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6f2:	d102      	bne.n	800c6fa <HAL_SPI_Transmit+0x16e>
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d102      	bne.n	800c700 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800c6fa:	2303      	movs	r3, #3
 800c6fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c6fe:	e074      	b.n	800c7ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c704:	b29b      	uxth	r3, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1ce      	bne.n	800c6a8 <HAL_SPI_Transmit+0x11c>
 800c70a:	e04c      	b.n	800c7a6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d002      	beq.n	800c71a <HAL_SPI_Transmit+0x18e>
 800c714:	8afb      	ldrh	r3, [r7, #22]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d140      	bne.n	800c79c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	330c      	adds	r3, #12
 800c724:	7812      	ldrb	r2, [r2, #0]
 800c726:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c72c:	1c5a      	adds	r2, r3, #1
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c736:	b29b      	uxth	r3, r3
 800c738:	3b01      	subs	r3, #1
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c740:	e02c      	b.n	800c79c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	f003 0302 	and.w	r3, r3, #2
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d113      	bne.n	800c778 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	330c      	adds	r3, #12
 800c75a:	7812      	ldrb	r2, [r2, #0]
 800c75c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c762:	1c5a      	adds	r2, r3, #1
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	3b01      	subs	r3, #1
 800c770:	b29a      	uxth	r2, r3
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	86da      	strh	r2, [r3, #54]	; 0x36
 800c776:	e011      	b.n	800c79c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c778:	f7fa f852 	bl	8006820 <HAL_GetTick>
 800c77c:	4602      	mov	r2, r0
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	429a      	cmp	r2, r3
 800c786:	d803      	bhi.n	800c790 <HAL_SPI_Transmit+0x204>
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c78e:	d102      	bne.n	800c796 <HAL_SPI_Transmit+0x20a>
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d102      	bne.n	800c79c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800c796:	2303      	movs	r3, #3
 800c798:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c79a:	e026      	b.n	800c7ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1cd      	bne.n	800c742 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c7a6:	69ba      	ldr	r2, [r7, #24]
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f000 f8b2 	bl	800c914 <SPI_EndRxTxTransaction>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d002      	beq.n	800c7bc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2220      	movs	r2, #32
 800c7ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10a      	bne.n	800c7da <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	613b      	str	r3, [r7, #16]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	613b      	str	r3, [r7, #16]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	613b      	str	r3, [r7, #16]
 800c7d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d002      	beq.n	800c7e8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	77fb      	strb	r3, [r7, #31]
 800c7e6:	e000      	b.n	800c7ea <HAL_SPI_Transmit+0x25e>
  }

error:
 800c7e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c7fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3720      	adds	r7, #32
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b088      	sub	sp, #32
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	603b      	str	r3, [r7, #0]
 800c810:	4613      	mov	r3, r2
 800c812:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c814:	f7fa f804 	bl	8006820 <HAL_GetTick>
 800c818:	4602      	mov	r2, r0
 800c81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81c:	1a9b      	subs	r3, r3, r2
 800c81e:	683a      	ldr	r2, [r7, #0]
 800c820:	4413      	add	r3, r2
 800c822:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c824:	f7f9 fffc 	bl	8006820 <HAL_GetTick>
 800c828:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c82a:	4b39      	ldr	r3, [pc, #228]	; (800c910 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	015b      	lsls	r3, r3, #5
 800c830:	0d1b      	lsrs	r3, r3, #20
 800c832:	69fa      	ldr	r2, [r7, #28]
 800c834:	fb02 f303 	mul.w	r3, r2, r3
 800c838:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c83a:	e054      	b.n	800c8e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c842:	d050      	beq.n	800c8e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c844:	f7f9 ffec 	bl	8006820 <HAL_GetTick>
 800c848:	4602      	mov	r2, r0
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	69fa      	ldr	r2, [r7, #28]
 800c850:	429a      	cmp	r2, r3
 800c852:	d902      	bls.n	800c85a <SPI_WaitFlagStateUntilTimeout+0x56>
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d13d      	bne.n	800c8d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	685a      	ldr	r2, [r3, #4]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c868:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c872:	d111      	bne.n	800c898 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c87c:	d004      	beq.n	800c888 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c886:	d107      	bne.n	800c898 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c896:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c89c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8a0:	d10f      	bne.n	800c8c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c8b0:	601a      	str	r2, [r3, #0]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	e017      	b.n	800c906 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d101      	bne.n	800c8e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	689a      	ldr	r2, [r3, #8]
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	4013      	ands	r3, r2
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	bf0c      	ite	eq
 800c8f6:	2301      	moveq	r3, #1
 800c8f8:	2300      	movne	r3, #0
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	79fb      	ldrb	r3, [r7, #7]
 800c900:	429a      	cmp	r2, r3
 800c902:	d19b      	bne.n	800c83c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3720      	adds	r7, #32
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	20000800 	.word	0x20000800

0800c914 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	af02      	add	r7, sp, #8
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	2200      	movs	r2, #0
 800c928:	2180      	movs	r1, #128	; 0x80
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f7ff ff6a 	bl	800c804 <SPI_WaitFlagStateUntilTimeout>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d007      	beq.n	800c946 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c93a:	f043 0220 	orr.w	r2, r3, #32
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800c942:	2303      	movs	r3, #3
 800c944:	e000      	b.n	800c948 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d101      	bne.n	800c962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	e041      	b.n	800c9e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d106      	bne.n	800c97c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7f7 fd48 	bl	800440c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2202      	movs	r2, #2
 800c980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	3304      	adds	r3, #4
 800c98c:	4619      	mov	r1, r3
 800c98e:	4610      	mov	r0, r2
 800c990:	f000 fdda 	bl	800d548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2201      	movs	r2, #1
 800c998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3708      	adds	r7, #8
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
	...

0800c9f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d001      	beq.n	800ca08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	e032      	b.n	800ca6e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a18      	ldr	r2, [pc, #96]	; (800ca78 <HAL_TIM_Base_Start+0x88>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d00e      	beq.n	800ca38 <HAL_TIM_Base_Start+0x48>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca22:	d009      	beq.n	800ca38 <HAL_TIM_Base_Start+0x48>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a14      	ldr	r2, [pc, #80]	; (800ca7c <HAL_TIM_Base_Start+0x8c>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d004      	beq.n	800ca38 <HAL_TIM_Base_Start+0x48>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a13      	ldr	r2, [pc, #76]	; (800ca80 <HAL_TIM_Base_Start+0x90>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d111      	bne.n	800ca5c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	f003 0307 	and.w	r3, r3, #7
 800ca42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b06      	cmp	r3, #6
 800ca48:	d010      	beq.n	800ca6c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f042 0201 	orr.w	r2, r2, #1
 800ca58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca5a:	e007      	b.n	800ca6c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f042 0201 	orr.w	r2, r2, #1
 800ca6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ca6c:	2300      	movs	r3, #0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3714      	adds	r7, #20
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bc80      	pop	{r7}
 800ca76:	4770      	bx	lr
 800ca78:	40012c00 	.word	0x40012c00
 800ca7c:	40000400 	.word	0x40000400
 800ca80:	40000800 	.word	0x40000800

0800ca84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d101      	bne.n	800ca96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	e041      	b.n	800cb1a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d106      	bne.n	800cab0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 f839 	bl	800cb22 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2202      	movs	r2, #2
 800cab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	3304      	adds	r3, #4
 800cac0:	4619      	mov	r1, r3
 800cac2:	4610      	mov	r0, r2
 800cac4:	f000 fd40 	bl	800d548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2201      	movs	r2, #1
 800cacc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2201      	movs	r2, #1
 800cae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2201      	movs	r2, #1
 800cb14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800cb22:	b480      	push	{r7}
 800cb24:	b083      	sub	sp, #12
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800cb2a:	bf00      	nop
 800cb2c:	370c      	adds	r7, #12
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bc80      	pop	{r7}
 800cb32:	4770      	bx	lr

0800cb34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d104      	bne.n	800cb4e <HAL_TIM_IC_Start_IT+0x1a>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	e013      	b.n	800cb76 <HAL_TIM_IC_Start_IT+0x42>
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	2b04      	cmp	r3, #4
 800cb52:	d104      	bne.n	800cb5e <HAL_TIM_IC_Start_IT+0x2a>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	e00b      	b.n	800cb76 <HAL_TIM_IC_Start_IT+0x42>
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	2b08      	cmp	r3, #8
 800cb62:	d104      	bne.n	800cb6e <HAL_TIM_IC_Start_IT+0x3a>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	e003      	b.n	800cb76 <HAL_TIM_IC_Start_IT+0x42>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d104      	bne.n	800cb88 <HAL_TIM_IC_Start_IT+0x54>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	e013      	b.n	800cbb0 <HAL_TIM_IC_Start_IT+0x7c>
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	2b04      	cmp	r3, #4
 800cb8c:	d104      	bne.n	800cb98 <HAL_TIM_IC_Start_IT+0x64>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	e00b      	b.n	800cbb0 <HAL_TIM_IC_Start_IT+0x7c>
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	2b08      	cmp	r3, #8
 800cb9c:	d104      	bne.n	800cba8 <HAL_TIM_IC_Start_IT+0x74>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	e003      	b.n	800cbb0 <HAL_TIM_IC_Start_IT+0x7c>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800cbb2:	7bfb      	ldrb	r3, [r7, #15]
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d102      	bne.n	800cbbe <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800cbb8:	7bbb      	ldrb	r3, [r7, #14]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d001      	beq.n	800cbc2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e0b3      	b.n	800cd2a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d104      	bne.n	800cbd2 <HAL_TIM_IC_Start_IT+0x9e>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2202      	movs	r2, #2
 800cbcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cbd0:	e013      	b.n	800cbfa <HAL_TIM_IC_Start_IT+0xc6>
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b04      	cmp	r3, #4
 800cbd6:	d104      	bne.n	800cbe2 <HAL_TIM_IC_Start_IT+0xae>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2202      	movs	r2, #2
 800cbdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cbe0:	e00b      	b.n	800cbfa <HAL_TIM_IC_Start_IT+0xc6>
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	2b08      	cmp	r3, #8
 800cbe6:	d104      	bne.n	800cbf2 <HAL_TIM_IC_Start_IT+0xbe>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2202      	movs	r2, #2
 800cbec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cbf0:	e003      	b.n	800cbfa <HAL_TIM_IC_Start_IT+0xc6>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2202      	movs	r2, #2
 800cbf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d104      	bne.n	800cc0a <HAL_TIM_IC_Start_IT+0xd6>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2202      	movs	r2, #2
 800cc04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cc08:	e013      	b.n	800cc32 <HAL_TIM_IC_Start_IT+0xfe>
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	2b04      	cmp	r3, #4
 800cc0e:	d104      	bne.n	800cc1a <HAL_TIM_IC_Start_IT+0xe6>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2202      	movs	r2, #2
 800cc14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cc18:	e00b      	b.n	800cc32 <HAL_TIM_IC_Start_IT+0xfe>
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	2b08      	cmp	r3, #8
 800cc1e:	d104      	bne.n	800cc2a <HAL_TIM_IC_Start_IT+0xf6>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2202      	movs	r2, #2
 800cc24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc28:	e003      	b.n	800cc32 <HAL_TIM_IC_Start_IT+0xfe>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2202      	movs	r2, #2
 800cc2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	2b0c      	cmp	r3, #12
 800cc36:	d841      	bhi.n	800ccbc <HAL_TIM_IC_Start_IT+0x188>
 800cc38:	a201      	add	r2, pc, #4	; (adr r2, 800cc40 <HAL_TIM_IC_Start_IT+0x10c>)
 800cc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3e:	bf00      	nop
 800cc40:	0800cc75 	.word	0x0800cc75
 800cc44:	0800ccbd 	.word	0x0800ccbd
 800cc48:	0800ccbd 	.word	0x0800ccbd
 800cc4c:	0800ccbd 	.word	0x0800ccbd
 800cc50:	0800cc87 	.word	0x0800cc87
 800cc54:	0800ccbd 	.word	0x0800ccbd
 800cc58:	0800ccbd 	.word	0x0800ccbd
 800cc5c:	0800ccbd 	.word	0x0800ccbd
 800cc60:	0800cc99 	.word	0x0800cc99
 800cc64:	0800ccbd 	.word	0x0800ccbd
 800cc68:	0800ccbd 	.word	0x0800ccbd
 800cc6c:	0800ccbd 	.word	0x0800ccbd
 800cc70:	0800ccab 	.word	0x0800ccab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68da      	ldr	r2, [r3, #12]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f042 0202 	orr.w	r2, r2, #2
 800cc82:	60da      	str	r2, [r3, #12]
      break;
 800cc84:	e01b      	b.n	800ccbe <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	68da      	ldr	r2, [r3, #12]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f042 0204 	orr.w	r2, r2, #4
 800cc94:	60da      	str	r2, [r3, #12]
      break;
 800cc96:	e012      	b.n	800ccbe <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68da      	ldr	r2, [r3, #12]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f042 0208 	orr.w	r2, r2, #8
 800cca6:	60da      	str	r2, [r3, #12]
      break;
 800cca8:	e009      	b.n	800ccbe <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	68da      	ldr	r2, [r3, #12]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f042 0210 	orr.w	r2, r2, #16
 800ccb8:	60da      	str	r2, [r3, #12]
      break;
 800ccba:	e000      	b.n	800ccbe <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800ccbc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	6839      	ldr	r1, [r7, #0]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f000 fe43 	bl	800d952 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a18      	ldr	r2, [pc, #96]	; (800cd34 <HAL_TIM_IC_Start_IT+0x200>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d00e      	beq.n	800ccf4 <HAL_TIM_IC_Start_IT+0x1c0>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccde:	d009      	beq.n	800ccf4 <HAL_TIM_IC_Start_IT+0x1c0>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a14      	ldr	r2, [pc, #80]	; (800cd38 <HAL_TIM_IC_Start_IT+0x204>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d004      	beq.n	800ccf4 <HAL_TIM_IC_Start_IT+0x1c0>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a13      	ldr	r2, [pc, #76]	; (800cd3c <HAL_TIM_IC_Start_IT+0x208>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d111      	bne.n	800cd18 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	f003 0307 	and.w	r3, r3, #7
 800ccfe:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	2b06      	cmp	r3, #6
 800cd04:	d010      	beq.n	800cd28 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f042 0201 	orr.w	r2, r2, #1
 800cd14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd16:	e007      	b.n	800cd28 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f042 0201 	orr.w	r2, r2, #1
 800cd26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cd28:	2300      	movs	r3, #0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	40012c00 	.word	0x40012c00
 800cd38:	40000400 	.word	0x40000400
 800cd3c:	40000800 	.word	0x40000800

0800cd40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d101      	bne.n	800cd54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cd50:	2301      	movs	r3, #1
 800cd52:	e093      	b.n	800ce7c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d106      	bne.n	800cd6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f7f7 fb13 	bl	8004394 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2202      	movs	r2, #2
 800cd72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	6812      	ldr	r2, [r2, #0]
 800cd80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd84:	f023 0307 	bic.w	r3, r3, #7
 800cd88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	3304      	adds	r3, #4
 800cd92:	4619      	mov	r1, r3
 800cd94:	4610      	mov	r0, r2
 800cd96:	f000 fbd7 	bl	800d548 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	689b      	ldr	r3, [r3, #8]
 800cda0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	699b      	ldr	r3, [r3, #24]
 800cda8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6a1b      	ldr	r3, [r3, #32]
 800cdb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	697a      	ldr	r2, [r7, #20]
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdc2:	f023 0303 	bic.w	r3, r3, #3
 800cdc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	689a      	ldr	r2, [r3, #8]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	699b      	ldr	r3, [r3, #24]
 800cdd0:	021b      	lsls	r3, r3, #8
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cde0:	f023 030c 	bic.w	r3, r3, #12
 800cde4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cdec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cdf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	68da      	ldr	r2, [r3, #12]
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	69db      	ldr	r3, [r3, #28]
 800cdfa:	021b      	lsls	r3, r3, #8
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	693a      	ldr	r2, [r7, #16]
 800ce00:	4313      	orrs	r3, r2
 800ce02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	691b      	ldr	r3, [r3, #16]
 800ce08:	011a      	lsls	r2, r3, #4
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	6a1b      	ldr	r3, [r3, #32]
 800ce0e:	031b      	lsls	r3, r3, #12
 800ce10:	4313      	orrs	r3, r2
 800ce12:	693a      	ldr	r2, [r7, #16]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ce1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	685a      	ldr	r2, [r3, #4]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	695b      	ldr	r3, [r3, #20]
 800ce28:	011b      	lsls	r3, r3, #4
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	697a      	ldr	r2, [r7, #20]
 800ce38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	693a      	ldr	r2, [r7, #16]
 800ce40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2201      	movs	r2, #1
 800ce56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2201      	movs	r2, #1
 800ce66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2201      	movs	r2, #1
 800ce76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ce9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cea4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ceac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d110      	bne.n	800ced6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ceb4:	7bfb      	ldrb	r3, [r7, #15]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d102      	bne.n	800cec0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ceba:	7b7b      	ldrb	r3, [r7, #13]
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d001      	beq.n	800cec4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800cec0:	2301      	movs	r3, #1
 800cec2:	e069      	b.n	800cf98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2202      	movs	r2, #2
 800cec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2202      	movs	r2, #2
 800ced0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ced4:	e031      	b.n	800cf3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	2b04      	cmp	r3, #4
 800ceda:	d110      	bne.n	800cefe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cedc:	7bbb      	ldrb	r3, [r7, #14]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d102      	bne.n	800cee8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cee2:	7b3b      	ldrb	r3, [r7, #12]
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d001      	beq.n	800ceec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800cee8:	2301      	movs	r3, #1
 800ceea:	e055      	b.n	800cf98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2202      	movs	r2, #2
 800cef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2202      	movs	r2, #2
 800cef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cefc:	e01d      	b.n	800cf3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cefe:	7bfb      	ldrb	r3, [r7, #15]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d108      	bne.n	800cf16 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf04:	7bbb      	ldrb	r3, [r7, #14]
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d105      	bne.n	800cf16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cf0a:	7b7b      	ldrb	r3, [r7, #13]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d102      	bne.n	800cf16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cf10:	7b3b      	ldrb	r3, [r7, #12]
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d001      	beq.n	800cf1a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800cf16:	2301      	movs	r3, #1
 800cf18:	e03e      	b.n	800cf98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2202      	movs	r2, #2
 800cf26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2202      	movs	r2, #2
 800cf2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2202      	movs	r2, #2
 800cf36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d003      	beq.n	800cf48 <HAL_TIM_Encoder_Start+0xc4>
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	2b04      	cmp	r3, #4
 800cf44:	d008      	beq.n	800cf58 <HAL_TIM_Encoder_Start+0xd4>
 800cf46:	e00f      	b.n	800cf68 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	2100      	movs	r1, #0
 800cf50:	4618      	mov	r0, r3
 800cf52:	f000 fcfe 	bl	800d952 <TIM_CCxChannelCmd>
      break;
 800cf56:	e016      	b.n	800cf86 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	2104      	movs	r1, #4
 800cf60:	4618      	mov	r0, r3
 800cf62:	f000 fcf6 	bl	800d952 <TIM_CCxChannelCmd>
      break;
 800cf66:	e00e      	b.n	800cf86 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	2100      	movs	r1, #0
 800cf70:	4618      	mov	r0, r3
 800cf72:	f000 fcee 	bl	800d952 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	2104      	movs	r1, #4
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f000 fce7 	bl	800d952 <TIM_CCxChannelCmd>
      break;
 800cf84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f042 0201 	orr.w	r2, r2, #1
 800cf94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cf96:	2300      	movs	r3, #0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3710      	adds	r7, #16
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	691b      	ldr	r3, [r3, #16]
 800cfae:	f003 0302 	and.w	r3, r3, #2
 800cfb2:	2b02      	cmp	r3, #2
 800cfb4:	d122      	bne.n	800cffc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	f003 0302 	and.w	r3, r3, #2
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d11b      	bne.n	800cffc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f06f 0202 	mvn.w	r2, #2
 800cfcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	f003 0303 	and.w	r3, r3, #3
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d003      	beq.n	800cfea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f7f6 fa78 	bl	80034d8 <HAL_TIM_IC_CaptureCallback>
 800cfe8:	e005      	b.n	800cff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 fa85 	bl	800d4fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 fa8b 	bl	800d50c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	691b      	ldr	r3, [r3, #16]
 800d002:	f003 0304 	and.w	r3, r3, #4
 800d006:	2b04      	cmp	r3, #4
 800d008:	d122      	bne.n	800d050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	f003 0304 	and.w	r3, r3, #4
 800d014:	2b04      	cmp	r3, #4
 800d016:	d11b      	bne.n	800d050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f06f 0204 	mvn.w	r2, #4
 800d020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2202      	movs	r2, #2
 800d026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	699b      	ldr	r3, [r3, #24]
 800d02e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d032:	2b00      	cmp	r3, #0
 800d034:	d003      	beq.n	800d03e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7f6 fa4e 	bl	80034d8 <HAL_TIM_IC_CaptureCallback>
 800d03c:	e005      	b.n	800d04a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fa5b 	bl	800d4fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 fa61 	bl	800d50c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	691b      	ldr	r3, [r3, #16]
 800d056:	f003 0308 	and.w	r3, r3, #8
 800d05a:	2b08      	cmp	r3, #8
 800d05c:	d122      	bne.n	800d0a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	f003 0308 	and.w	r3, r3, #8
 800d068:	2b08      	cmp	r3, #8
 800d06a:	d11b      	bne.n	800d0a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f06f 0208 	mvn.w	r2, #8
 800d074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2204      	movs	r2, #4
 800d07a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	69db      	ldr	r3, [r3, #28]
 800d082:	f003 0303 	and.w	r3, r3, #3
 800d086:	2b00      	cmp	r3, #0
 800d088:	d003      	beq.n	800d092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7f6 fa24 	bl	80034d8 <HAL_TIM_IC_CaptureCallback>
 800d090:	e005      	b.n	800d09e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 fa31 	bl	800d4fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 fa37 	bl	800d50c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	f003 0310 	and.w	r3, r3, #16
 800d0ae:	2b10      	cmp	r3, #16
 800d0b0:	d122      	bne.n	800d0f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	f003 0310 	and.w	r3, r3, #16
 800d0bc:	2b10      	cmp	r3, #16
 800d0be:	d11b      	bne.n	800d0f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f06f 0210 	mvn.w	r2, #16
 800d0c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2208      	movs	r2, #8
 800d0ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	69db      	ldr	r3, [r3, #28]
 800d0d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d003      	beq.n	800d0e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f7f6 f9fa 	bl	80034d8 <HAL_TIM_IC_CaptureCallback>
 800d0e4:	e005      	b.n	800d0f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fa07 	bl	800d4fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 fa0d 	bl	800d50c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	691b      	ldr	r3, [r3, #16]
 800d0fe:	f003 0301 	and.w	r3, r3, #1
 800d102:	2b01      	cmp	r3, #1
 800d104:	d10e      	bne.n	800d124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	f003 0301 	and.w	r3, r3, #1
 800d110:	2b01      	cmp	r3, #1
 800d112:	d107      	bne.n	800d124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f06f 0201 	mvn.w	r2, #1
 800d11c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f9e2 	bl	800d4e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d12e:	2b80      	cmp	r3, #128	; 0x80
 800d130:	d10e      	bne.n	800d150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d13c:	2b80      	cmp	r3, #128	; 0x80
 800d13e:	d107      	bne.n	800d150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fc8d 	bl	800da6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d15a:	2b40      	cmp	r3, #64	; 0x40
 800d15c:	d10e      	bne.n	800d17c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d168:	2b40      	cmp	r3, #64	; 0x40
 800d16a:	d107      	bne.n	800d17c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 f9d1 	bl	800d51e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	f003 0320 	and.w	r3, r3, #32
 800d186:	2b20      	cmp	r3, #32
 800d188:	d10e      	bne.n	800d1a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	f003 0320 	and.w	r3, r3, #32
 800d194:	2b20      	cmp	r3, #32
 800d196:	d107      	bne.n	800d1a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f06f 0220 	mvn.w	r2, #32
 800d1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f000 fc58 	bl	800da58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d1a8:	bf00      	nop
 800d1aa:	3708      	adds	r7, #8
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d101      	bne.n	800d1ca <HAL_TIM_IC_ConfigChannel+0x1a>
 800d1c6:	2302      	movs	r3, #2
 800d1c8:	e082      	b.n	800d2d0 <HAL_TIM_IC_ConfigChannel+0x120>
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d11b      	bne.n	800d210 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6818      	ldr	r0, [r3, #0]
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	6819      	ldr	r1, [r3, #0]
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	685a      	ldr	r2, [r3, #4]
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	f000 fa10 	bl	800d60c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	699a      	ldr	r2, [r3, #24]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f022 020c 	bic.w	r2, r2, #12
 800d1fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6999      	ldr	r1, [r3, #24]
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	689a      	ldr	r2, [r3, #8]
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	430a      	orrs	r2, r1
 800d20c:	619a      	str	r2, [r3, #24]
 800d20e:	e05a      	b.n	800d2c6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b04      	cmp	r3, #4
 800d214:	d11c      	bne.n	800d250 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6818      	ldr	r0, [r3, #0]
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	6819      	ldr	r1, [r3, #0]
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	685a      	ldr	r2, [r3, #4]
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	f000 fa79 	bl	800d71c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	699a      	ldr	r2, [r3, #24]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d238:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	6999      	ldr	r1, [r3, #24]
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	021a      	lsls	r2, r3, #8
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	430a      	orrs	r2, r1
 800d24c:	619a      	str	r2, [r3, #24]
 800d24e:	e03a      	b.n	800d2c6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2b08      	cmp	r3, #8
 800d254:	d11b      	bne.n	800d28e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6818      	ldr	r0, [r3, #0]
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	6819      	ldr	r1, [r3, #0]
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	685a      	ldr	r2, [r3, #4]
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	f000 fac4 	bl	800d7f2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	69da      	ldr	r2, [r3, #28]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f022 020c 	bic.w	r2, r2, #12
 800d278:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	69d9      	ldr	r1, [r3, #28]
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	689a      	ldr	r2, [r3, #8]
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	430a      	orrs	r2, r1
 800d28a:	61da      	str	r2, [r3, #28]
 800d28c:	e01b      	b.n	800d2c6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6818      	ldr	r0, [r3, #0]
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	6819      	ldr	r1, [r3, #0]
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	685a      	ldr	r2, [r3, #4]
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	f000 fae3 	bl	800d868 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	69da      	ldr	r2, [r3, #28]
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d2b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	69d9      	ldr	r1, [r3, #28]
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	689b      	ldr	r3, [r3, #8]
 800d2bc:	021a      	lsls	r2, r3, #8
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	430a      	orrs	r2, r1
 800d2c4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3710      	adds	r7, #16
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d101      	bne.n	800d2f0 <HAL_TIM_ConfigClockSource+0x18>
 800d2ec:	2302      	movs	r3, #2
 800d2ee:	e0b3      	b.n	800d458 <HAL_TIM_ConfigClockSource+0x180>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2202      	movs	r2, #2
 800d2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	689b      	ldr	r3, [r3, #8]
 800d306:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d30e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d316:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d328:	d03e      	beq.n	800d3a8 <HAL_TIM_ConfigClockSource+0xd0>
 800d32a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d32e:	f200 8087 	bhi.w	800d440 <HAL_TIM_ConfigClockSource+0x168>
 800d332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d336:	f000 8085 	beq.w	800d444 <HAL_TIM_ConfigClockSource+0x16c>
 800d33a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d33e:	d87f      	bhi.n	800d440 <HAL_TIM_ConfigClockSource+0x168>
 800d340:	2b70      	cmp	r3, #112	; 0x70
 800d342:	d01a      	beq.n	800d37a <HAL_TIM_ConfigClockSource+0xa2>
 800d344:	2b70      	cmp	r3, #112	; 0x70
 800d346:	d87b      	bhi.n	800d440 <HAL_TIM_ConfigClockSource+0x168>
 800d348:	2b60      	cmp	r3, #96	; 0x60
 800d34a:	d050      	beq.n	800d3ee <HAL_TIM_ConfigClockSource+0x116>
 800d34c:	2b60      	cmp	r3, #96	; 0x60
 800d34e:	d877      	bhi.n	800d440 <HAL_TIM_ConfigClockSource+0x168>
 800d350:	2b50      	cmp	r3, #80	; 0x50
 800d352:	d03c      	beq.n	800d3ce <HAL_TIM_ConfigClockSource+0xf6>
 800d354:	2b50      	cmp	r3, #80	; 0x50
 800d356:	d873      	bhi.n	800d440 <HAL_TIM_ConfigClockSource+0x168>
 800d358:	2b40      	cmp	r3, #64	; 0x40
 800d35a:	d058      	beq.n	800d40e <HAL_TIM_ConfigClockSource+0x136>
 800d35c:	2b40      	cmp	r3, #64	; 0x40
 800d35e:	d86f      	bhi.n	800d440 <HAL_TIM_ConfigClockSource+0x168>
 800d360:	2b30      	cmp	r3, #48	; 0x30
 800d362:	d064      	beq.n	800d42e <HAL_TIM_ConfigClockSource+0x156>
 800d364:	2b30      	cmp	r3, #48	; 0x30
 800d366:	d86b      	bhi.n	800d440 <HAL_TIM_ConfigClockSource+0x168>
 800d368:	2b20      	cmp	r3, #32
 800d36a:	d060      	beq.n	800d42e <HAL_TIM_ConfigClockSource+0x156>
 800d36c:	2b20      	cmp	r3, #32
 800d36e:	d867      	bhi.n	800d440 <HAL_TIM_ConfigClockSource+0x168>
 800d370:	2b00      	cmp	r3, #0
 800d372:	d05c      	beq.n	800d42e <HAL_TIM_ConfigClockSource+0x156>
 800d374:	2b10      	cmp	r3, #16
 800d376:	d05a      	beq.n	800d42e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800d378:	e062      	b.n	800d440 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6818      	ldr	r0, [r3, #0]
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	6899      	ldr	r1, [r3, #8]
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	685a      	ldr	r2, [r3, #4]
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	f000 fac3 	bl	800d914 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	689b      	ldr	r3, [r3, #8]
 800d394:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d39c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	609a      	str	r2, [r3, #8]
      break;
 800d3a6:	e04e      	b.n	800d446 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6818      	ldr	r0, [r3, #0]
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	6899      	ldr	r1, [r3, #8]
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	685a      	ldr	r2, [r3, #4]
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	f000 faac 	bl	800d914 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	689a      	ldr	r2, [r3, #8]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d3ca:	609a      	str	r2, [r3, #8]
      break;
 800d3cc:	e03b      	b.n	800d446 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6818      	ldr	r0, [r3, #0]
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	6859      	ldr	r1, [r3, #4]
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	461a      	mov	r2, r3
 800d3dc:	f000 f970 	bl	800d6c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2150      	movs	r1, #80	; 0x50
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f000 fa7a 	bl	800d8e0 <TIM_ITRx_SetConfig>
      break;
 800d3ec:	e02b      	b.n	800d446 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6818      	ldr	r0, [r3, #0]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	6859      	ldr	r1, [r3, #4]
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	f000 f9ca 	bl	800d794 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2160      	movs	r1, #96	; 0x60
 800d406:	4618      	mov	r0, r3
 800d408:	f000 fa6a 	bl	800d8e0 <TIM_ITRx_SetConfig>
      break;
 800d40c:	e01b      	b.n	800d446 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6818      	ldr	r0, [r3, #0]
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	6859      	ldr	r1, [r3, #4]
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	461a      	mov	r2, r3
 800d41c:	f000 f950 	bl	800d6c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2140      	movs	r1, #64	; 0x40
 800d426:	4618      	mov	r0, r3
 800d428:	f000 fa5a 	bl	800d8e0 <TIM_ITRx_SetConfig>
      break;
 800d42c:	e00b      	b.n	800d446 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4619      	mov	r1, r3
 800d438:	4610      	mov	r0, r2
 800d43a:	f000 fa51 	bl	800d8e0 <TIM_ITRx_SetConfig>
        break;
 800d43e:	e002      	b.n	800d446 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d440:	bf00      	nop
 800d442:	e000      	b.n	800d446 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800d444:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2201      	movs	r2, #1
 800d44a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2200      	movs	r2, #0
 800d452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d46a:	2300      	movs	r3, #0
 800d46c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	2b0c      	cmp	r3, #12
 800d472:	d831      	bhi.n	800d4d8 <HAL_TIM_ReadCapturedValue+0x78>
 800d474:	a201      	add	r2, pc, #4	; (adr r2, 800d47c <HAL_TIM_ReadCapturedValue+0x1c>)
 800d476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d47a:	bf00      	nop
 800d47c:	0800d4b1 	.word	0x0800d4b1
 800d480:	0800d4d9 	.word	0x0800d4d9
 800d484:	0800d4d9 	.word	0x0800d4d9
 800d488:	0800d4d9 	.word	0x0800d4d9
 800d48c:	0800d4bb 	.word	0x0800d4bb
 800d490:	0800d4d9 	.word	0x0800d4d9
 800d494:	0800d4d9 	.word	0x0800d4d9
 800d498:	0800d4d9 	.word	0x0800d4d9
 800d49c:	0800d4c5 	.word	0x0800d4c5
 800d4a0:	0800d4d9 	.word	0x0800d4d9
 800d4a4:	0800d4d9 	.word	0x0800d4d9
 800d4a8:	0800d4d9 	.word	0x0800d4d9
 800d4ac:	0800d4cf 	.word	0x0800d4cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4b6:	60fb      	str	r3, [r7, #12]

      break;
 800d4b8:	e00f      	b.n	800d4da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c0:	60fb      	str	r3, [r7, #12]

      break;
 800d4c2:	e00a      	b.n	800d4da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ca:	60fb      	str	r3, [r7, #12]

      break;
 800d4cc:	e005      	b.n	800d4da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d4:	60fb      	str	r3, [r7, #12]

      break;
 800d4d6:	e000      	b.n	800d4da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800d4d8:	bf00      	nop
  }

  return tmpreg;
 800d4da:	68fb      	ldr	r3, [r7, #12]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3714      	adds	r7, #20
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bc80      	pop	{r7}
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop

0800d4e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d4f0:	bf00      	nop
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bc80      	pop	{r7}
 800d4f8:	4770      	bx	lr

0800d4fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d4fa:	b480      	push	{r7}
 800d4fc:	b083      	sub	sp, #12
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d502:	bf00      	nop
 800d504:	370c      	adds	r7, #12
 800d506:	46bd      	mov	sp, r7
 800d508:	bc80      	pop	{r7}
 800d50a:	4770      	bx	lr

0800d50c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	bc80      	pop	{r7}
 800d51c:	4770      	bx	lr

0800d51e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d51e:	b480      	push	{r7}
 800d520:	b083      	sub	sp, #12
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d526:	bf00      	nop
 800d528:	370c      	adds	r7, #12
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bc80      	pop	{r7}
 800d52e:	4770      	bx	lr

0800d530 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	7f1b      	ldrb	r3, [r3, #28]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	bc80      	pop	{r7}
 800d544:	4770      	bx	lr
	...

0800d548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d548:	b480      	push	{r7}
 800d54a:	b085      	sub	sp, #20
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	4a29      	ldr	r2, [pc, #164]	; (800d600 <TIM_Base_SetConfig+0xb8>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d00b      	beq.n	800d578 <TIM_Base_SetConfig+0x30>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d566:	d007      	beq.n	800d578 <TIM_Base_SetConfig+0x30>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	4a26      	ldr	r2, [pc, #152]	; (800d604 <TIM_Base_SetConfig+0xbc>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d003      	beq.n	800d578 <TIM_Base_SetConfig+0x30>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4a25      	ldr	r2, [pc, #148]	; (800d608 <TIM_Base_SetConfig+0xc0>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d108      	bne.n	800d58a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d57e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	4313      	orrs	r3, r2
 800d588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	4a1c      	ldr	r2, [pc, #112]	; (800d600 <TIM_Base_SetConfig+0xb8>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d00b      	beq.n	800d5aa <TIM_Base_SetConfig+0x62>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d598:	d007      	beq.n	800d5aa <TIM_Base_SetConfig+0x62>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	4a19      	ldr	r2, [pc, #100]	; (800d604 <TIM_Base_SetConfig+0xbc>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d003      	beq.n	800d5aa <TIM_Base_SetConfig+0x62>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	4a18      	ldr	r2, [pc, #96]	; (800d608 <TIM_Base_SetConfig+0xc0>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d108      	bne.n	800d5bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	68fa      	ldr	r2, [r7, #12]
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	695b      	ldr	r3, [r3, #20]
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	68fa      	ldr	r2, [r7, #12]
 800d5ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	689a      	ldr	r2, [r3, #8]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	4a07      	ldr	r2, [pc, #28]	; (800d600 <TIM_Base_SetConfig+0xb8>)
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d103      	bne.n	800d5f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	691a      	ldr	r2, [r3, #16]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	615a      	str	r2, [r3, #20]
}
 800d5f6:	bf00      	nop
 800d5f8:	3714      	adds	r7, #20
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bc80      	pop	{r7}
 800d5fe:	4770      	bx	lr
 800d600:	40012c00 	.word	0x40012c00
 800d604:	40000400 	.word	0x40000400
 800d608:	40000800 	.word	0x40000800

0800d60c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b087      	sub	sp, #28
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	607a      	str	r2, [r7, #4]
 800d618:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6a1b      	ldr	r3, [r3, #32]
 800d61e:	f023 0201 	bic.w	r2, r3, #1
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	699b      	ldr	r3, [r3, #24]
 800d62a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6a1b      	ldr	r3, [r3, #32]
 800d630:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	4a1f      	ldr	r2, [pc, #124]	; (800d6b4 <TIM_TI1_SetConfig+0xa8>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d00b      	beq.n	800d652 <TIM_TI1_SetConfig+0x46>
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d640:	d007      	beq.n	800d652 <TIM_TI1_SetConfig+0x46>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	4a1c      	ldr	r2, [pc, #112]	; (800d6b8 <TIM_TI1_SetConfig+0xac>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d003      	beq.n	800d652 <TIM_TI1_SetConfig+0x46>
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	4a1b      	ldr	r2, [pc, #108]	; (800d6bc <TIM_TI1_SetConfig+0xb0>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d101      	bne.n	800d656 <TIM_TI1_SetConfig+0x4a>
 800d652:	2301      	movs	r3, #1
 800d654:	e000      	b.n	800d658 <TIM_TI1_SetConfig+0x4c>
 800d656:	2300      	movs	r3, #0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d008      	beq.n	800d66e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	f023 0303 	bic.w	r3, r3, #3
 800d662:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d664:	697a      	ldr	r2, [r7, #20]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4313      	orrs	r3, r2
 800d66a:	617b      	str	r3, [r7, #20]
 800d66c:	e003      	b.n	800d676 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	f043 0301 	orr.w	r3, r3, #1
 800d674:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d67c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	011b      	lsls	r3, r3, #4
 800d682:	b2db      	uxtb	r3, r3
 800d684:	697a      	ldr	r2, [r7, #20]
 800d686:	4313      	orrs	r3, r2
 800d688:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	f023 030a 	bic.w	r3, r3, #10
 800d690:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	f003 030a 	and.w	r3, r3, #10
 800d698:	693a      	ldr	r2, [r7, #16]
 800d69a:	4313      	orrs	r3, r2
 800d69c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	697a      	ldr	r2, [r7, #20]
 800d6a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	693a      	ldr	r2, [r7, #16]
 800d6a8:	621a      	str	r2, [r3, #32]
}
 800d6aa:	bf00      	nop
 800d6ac:	371c      	adds	r7, #28
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bc80      	pop	{r7}
 800d6b2:	4770      	bx	lr
 800d6b4:	40012c00 	.word	0x40012c00
 800d6b8:	40000400 	.word	0x40000400
 800d6bc:	40000800 	.word	0x40000800

0800d6c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b087      	sub	sp, #28
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	6a1b      	ldr	r3, [r3, #32]
 800d6d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6a1b      	ldr	r3, [r3, #32]
 800d6d6:	f023 0201 	bic.w	r2, r3, #1
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	699b      	ldr	r3, [r3, #24]
 800d6e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d6ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	011b      	lsls	r3, r3, #4
 800d6f0:	693a      	ldr	r2, [r7, #16]
 800d6f2:	4313      	orrs	r3, r2
 800d6f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	f023 030a 	bic.w	r3, r3, #10
 800d6fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	4313      	orrs	r3, r2
 800d704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	693a      	ldr	r2, [r7, #16]
 800d70a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	697a      	ldr	r2, [r7, #20]
 800d710:	621a      	str	r2, [r3, #32]
}
 800d712:	bf00      	nop
 800d714:	371c      	adds	r7, #28
 800d716:	46bd      	mov	sp, r7
 800d718:	bc80      	pop	{r7}
 800d71a:	4770      	bx	lr

0800d71c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b087      	sub	sp, #28
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
 800d728:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6a1b      	ldr	r3, [r3, #32]
 800d72e:	f023 0210 	bic.w	r2, r3, #16
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	699b      	ldr	r3, [r3, #24]
 800d73a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6a1b      	ldr	r3, [r3, #32]
 800d740:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	021b      	lsls	r3, r3, #8
 800d74e:	697a      	ldr	r2, [r7, #20]
 800d750:	4313      	orrs	r3, r2
 800d752:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d75a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	031b      	lsls	r3, r3, #12
 800d760:	b29b      	uxth	r3, r3
 800d762:	697a      	ldr	r2, [r7, #20]
 800d764:	4313      	orrs	r3, r2
 800d766:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d76e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	011b      	lsls	r3, r3, #4
 800d774:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d778:	693a      	ldr	r2, [r7, #16]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	697a      	ldr	r2, [r7, #20]
 800d782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	693a      	ldr	r2, [r7, #16]
 800d788:	621a      	str	r2, [r3, #32]
}
 800d78a:	bf00      	nop
 800d78c:	371c      	adds	r7, #28
 800d78e:	46bd      	mov	sp, r7
 800d790:	bc80      	pop	{r7}
 800d792:	4770      	bx	lr

0800d794 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d794:	b480      	push	{r7}
 800d796:	b087      	sub	sp, #28
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6a1b      	ldr	r3, [r3, #32]
 800d7a4:	f023 0210 	bic.w	r2, r3, #16
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	699b      	ldr	r3, [r3, #24]
 800d7b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	6a1b      	ldr	r3, [r3, #32]
 800d7b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d7be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	031b      	lsls	r3, r3, #12
 800d7c4:	697a      	ldr	r2, [r7, #20]
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d7d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	011b      	lsls	r3, r3, #4
 800d7d6:	693a      	ldr	r2, [r7, #16]
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	693a      	ldr	r2, [r7, #16]
 800d7e6:	621a      	str	r2, [r3, #32]
}
 800d7e8:	bf00      	nop
 800d7ea:	371c      	adds	r7, #28
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bc80      	pop	{r7}
 800d7f0:	4770      	bx	lr

0800d7f2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d7f2:	b480      	push	{r7}
 800d7f4:	b087      	sub	sp, #28
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	60f8      	str	r0, [r7, #12]
 800d7fa:	60b9      	str	r1, [r7, #8]
 800d7fc:	607a      	str	r2, [r7, #4]
 800d7fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6a1b      	ldr	r3, [r3, #32]
 800d804:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	69db      	ldr	r3, [r3, #28]
 800d810:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6a1b      	ldr	r3, [r3, #32]
 800d816:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	f023 0303 	bic.w	r3, r3, #3
 800d81e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d820:	697a      	ldr	r2, [r7, #20]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	4313      	orrs	r3, r2
 800d826:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d82e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	011b      	lsls	r3, r3, #4
 800d834:	b2db      	uxtb	r3, r3
 800d836:	697a      	ldr	r2, [r7, #20]
 800d838:	4313      	orrs	r3, r2
 800d83a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d842:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	021b      	lsls	r3, r3, #8
 800d848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d84c:	693a      	ldr	r2, [r7, #16]
 800d84e:	4313      	orrs	r3, r2
 800d850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	697a      	ldr	r2, [r7, #20]
 800d856:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	693a      	ldr	r2, [r7, #16]
 800d85c:	621a      	str	r2, [r3, #32]
}
 800d85e:	bf00      	nop
 800d860:	371c      	adds	r7, #28
 800d862:	46bd      	mov	sp, r7
 800d864:	bc80      	pop	{r7}
 800d866:	4770      	bx	lr

0800d868 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d868:	b480      	push	{r7}
 800d86a:	b087      	sub	sp, #28
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	60b9      	str	r1, [r7, #8]
 800d872:	607a      	str	r2, [r7, #4]
 800d874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6a1b      	ldr	r3, [r3, #32]
 800d87a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	69db      	ldr	r3, [r3, #28]
 800d886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6a1b      	ldr	r3, [r3, #32]
 800d88c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d894:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	021b      	lsls	r3, r3, #8
 800d89a:	697a      	ldr	r2, [r7, #20]
 800d89c:	4313      	orrs	r3, r2
 800d89e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d8a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	031b      	lsls	r3, r3, #12
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	697a      	ldr	r2, [r7, #20]
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d8ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	031b      	lsls	r3, r3, #12
 800d8c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d8c4:	693a      	ldr	r2, [r7, #16]
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	697a      	ldr	r2, [r7, #20]
 800d8ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	693a      	ldr	r2, [r7, #16]
 800d8d4:	621a      	str	r2, [r3, #32]
}
 800d8d6:	bf00      	nop
 800d8d8:	371c      	adds	r7, #28
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bc80      	pop	{r7}
 800d8de:	4770      	bx	lr

0800d8e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d8f8:	683a      	ldr	r2, [r7, #0]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	f043 0307 	orr.w	r3, r3, #7
 800d902:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	68fa      	ldr	r2, [r7, #12]
 800d908:	609a      	str	r2, [r3, #8]
}
 800d90a:	bf00      	nop
 800d90c:	3714      	adds	r7, #20
 800d90e:	46bd      	mov	sp, r7
 800d910:	bc80      	pop	{r7}
 800d912:	4770      	bx	lr

0800d914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d914:	b480      	push	{r7}
 800d916:	b087      	sub	sp, #28
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
 800d920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d92e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	021a      	lsls	r2, r3, #8
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	431a      	orrs	r2, r3
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	4313      	orrs	r3, r2
 800d93c:	697a      	ldr	r2, [r7, #20]
 800d93e:	4313      	orrs	r3, r2
 800d940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	697a      	ldr	r2, [r7, #20]
 800d946:	609a      	str	r2, [r3, #8]
}
 800d948:	bf00      	nop
 800d94a:	371c      	adds	r7, #28
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bc80      	pop	{r7}
 800d950:	4770      	bx	lr

0800d952 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d952:	b480      	push	{r7}
 800d954:	b087      	sub	sp, #28
 800d956:	af00      	add	r7, sp, #0
 800d958:	60f8      	str	r0, [r7, #12]
 800d95a:	60b9      	str	r1, [r7, #8]
 800d95c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	f003 031f 	and.w	r3, r3, #31
 800d964:	2201      	movs	r2, #1
 800d966:	fa02 f303 	lsl.w	r3, r2, r3
 800d96a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6a1a      	ldr	r2, [r3, #32]
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	43db      	mvns	r3, r3
 800d974:	401a      	ands	r2, r3
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6a1a      	ldr	r2, [r3, #32]
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	f003 031f 	and.w	r3, r3, #31
 800d984:	6879      	ldr	r1, [r7, #4]
 800d986:	fa01 f303 	lsl.w	r3, r1, r3
 800d98a:	431a      	orrs	r2, r3
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	621a      	str	r2, [r3, #32]
}
 800d990:	bf00      	nop
 800d992:	371c      	adds	r7, #28
 800d994:	46bd      	mov	sp, r7
 800d996:	bc80      	pop	{r7}
 800d998:	4770      	bx	lr
	...

0800d99c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d101      	bne.n	800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d9b0:	2302      	movs	r3, #2
 800d9b2:	e046      	b.n	800da42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2202      	movs	r2, #2
 800d9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	689b      	ldr	r3, [r3, #8]
 800d9d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a16      	ldr	r2, [pc, #88]	; (800da4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d00e      	beq.n	800da16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da00:	d009      	beq.n	800da16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4a12      	ldr	r2, [pc, #72]	; (800da50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d004      	beq.n	800da16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a10      	ldr	r2, [pc, #64]	; (800da54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d10c      	bne.n	800da30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	68ba      	ldr	r2, [r7, #8]
 800da24:	4313      	orrs	r3, r2
 800da26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68ba      	ldr	r2, [r7, #8]
 800da2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da40:	2300      	movs	r3, #0
}
 800da42:	4618      	mov	r0, r3
 800da44:	3714      	adds	r7, #20
 800da46:	46bd      	mov	sp, r7
 800da48:	bc80      	pop	{r7}
 800da4a:	4770      	bx	lr
 800da4c:	40012c00 	.word	0x40012c00
 800da50:	40000400 	.word	0x40000400
 800da54:	40000800 	.word	0x40000800

0800da58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da60:	bf00      	nop
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	bc80      	pop	{r7}
 800da68:	4770      	bx	lr

0800da6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da6a:	b480      	push	{r7}
 800da6c:	b083      	sub	sp, #12
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da72:	bf00      	nop
 800da74:	370c      	adds	r7, #12
 800da76:	46bd      	mov	sp, r7
 800da78:	bc80      	pop	{r7}
 800da7a:	4770      	bx	lr

0800da7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d101      	bne.n	800da8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da8a:	2301      	movs	r3, #1
 800da8c:	e03f      	b.n	800db0e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da94:	b2db      	uxtb	r3, r3
 800da96:	2b00      	cmp	r3, #0
 800da98:	d106      	bne.n	800daa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f7f6 fcf8 	bl	8004498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2224      	movs	r2, #36	; 0x24
 800daac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	68da      	ldr	r2, [r3, #12]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dabe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 f829 	bl	800db18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	691a      	ldr	r2, [r3, #16]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	695a      	ldr	r2, [r3, #20]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	68da      	ldr	r2, [r3, #12]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800daf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2220      	movs	r2, #32
 800db00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2220      	movs	r2, #32
 800db08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800db0c:	2300      	movs	r3, #0
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3708      	adds	r7, #8
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
	...

0800db18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	691b      	ldr	r3, [r3, #16]
 800db26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	68da      	ldr	r2, [r3, #12]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	430a      	orrs	r2, r1
 800db34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	689a      	ldr	r2, [r3, #8]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	691b      	ldr	r3, [r3, #16]
 800db3e:	431a      	orrs	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	695b      	ldr	r3, [r3, #20]
 800db44:	4313      	orrs	r3, r2
 800db46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800db52:	f023 030c 	bic.w	r3, r3, #12
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	6812      	ldr	r2, [r2, #0]
 800db5a:	68b9      	ldr	r1, [r7, #8]
 800db5c:	430b      	orrs	r3, r1
 800db5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	695b      	ldr	r3, [r3, #20]
 800db66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	699a      	ldr	r2, [r3, #24]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	430a      	orrs	r2, r1
 800db74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a2c      	ldr	r2, [pc, #176]	; (800dc2c <UART_SetConfig+0x114>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d103      	bne.n	800db88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800db80:	f7fd fd7a 	bl	800b678 <HAL_RCC_GetPCLK2Freq>
 800db84:	60f8      	str	r0, [r7, #12]
 800db86:	e002      	b.n	800db8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800db88:	f7fd fd62 	bl	800b650 <HAL_RCC_GetPCLK1Freq>
 800db8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	4613      	mov	r3, r2
 800db92:	009b      	lsls	r3, r3, #2
 800db94:	4413      	add	r3, r2
 800db96:	009a      	lsls	r2, r3, #2
 800db98:	441a      	add	r2, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	009b      	lsls	r3, r3, #2
 800dba0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dba4:	4a22      	ldr	r2, [pc, #136]	; (800dc30 <UART_SetConfig+0x118>)
 800dba6:	fba2 2303 	umull	r2, r3, r2, r3
 800dbaa:	095b      	lsrs	r3, r3, #5
 800dbac:	0119      	lsls	r1, r3, #4
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	4413      	add	r3, r2
 800dbb6:	009a      	lsls	r2, r3, #2
 800dbb8:	441a      	add	r2, r3
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	fbb2 f2f3 	udiv	r2, r2, r3
 800dbc4:	4b1a      	ldr	r3, [pc, #104]	; (800dc30 <UART_SetConfig+0x118>)
 800dbc6:	fba3 0302 	umull	r0, r3, r3, r2
 800dbca:	095b      	lsrs	r3, r3, #5
 800dbcc:	2064      	movs	r0, #100	; 0x64
 800dbce:	fb00 f303 	mul.w	r3, r0, r3
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	011b      	lsls	r3, r3, #4
 800dbd6:	3332      	adds	r3, #50	; 0x32
 800dbd8:	4a15      	ldr	r2, [pc, #84]	; (800dc30 <UART_SetConfig+0x118>)
 800dbda:	fba2 2303 	umull	r2, r3, r2, r3
 800dbde:	095b      	lsrs	r3, r3, #5
 800dbe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbe4:	4419      	add	r1, r3
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	4613      	mov	r3, r2
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	4413      	add	r3, r2
 800dbee:	009a      	lsls	r2, r3, #2
 800dbf0:	441a      	add	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	fbb2 f2f3 	udiv	r2, r2, r3
 800dbfc:	4b0c      	ldr	r3, [pc, #48]	; (800dc30 <UART_SetConfig+0x118>)
 800dbfe:	fba3 0302 	umull	r0, r3, r3, r2
 800dc02:	095b      	lsrs	r3, r3, #5
 800dc04:	2064      	movs	r0, #100	; 0x64
 800dc06:	fb00 f303 	mul.w	r3, r0, r3
 800dc0a:	1ad3      	subs	r3, r2, r3
 800dc0c:	011b      	lsls	r3, r3, #4
 800dc0e:	3332      	adds	r3, #50	; 0x32
 800dc10:	4a07      	ldr	r2, [pc, #28]	; (800dc30 <UART_SetConfig+0x118>)
 800dc12:	fba2 2303 	umull	r2, r3, r2, r3
 800dc16:	095b      	lsrs	r3, r3, #5
 800dc18:	f003 020f 	and.w	r2, r3, #15
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	440a      	add	r2, r1
 800dc22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800dc24:	bf00      	nop
 800dc26:	3710      	adds	r7, #16
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	40013800 	.word	0x40013800
 800dc30:	51eb851f 	.word	0x51eb851f

0800dc34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800dc34:	b084      	sub	sp, #16
 800dc36:	b480      	push	{r7}
 800dc38:	b083      	sub	sp, #12
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
 800dc3e:	f107 0014 	add.w	r0, r7, #20
 800dc42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800dc46:	2300      	movs	r3, #0
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bc80      	pop	{r7}
 800dc50:	b004      	add	sp, #16
 800dc52:	4770      	bx	lr

0800dc54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dc64:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800dc68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	b29a      	uxth	r2, r3
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800dc74:	2300      	movs	r3, #0
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3714      	adds	r7, #20
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bc80      	pop	{r7}
 800dc7e:	4770      	bx	lr

0800dc80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dc88:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800dc8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800dc94:	b29a      	uxth	r2, r3
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	43db      	mvns	r3, r3
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	4013      	ands	r3, r2
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3714      	adds	r7, #20
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bc80      	pop	{r7}
 800dcb2:	4770      	bx	lr

0800dcb4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b083      	sub	sp, #12
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800dcc0:	2300      	movs	r3, #0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	370c      	adds	r7, #12
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bc80      	pop	{r7}
 800dcca:	4770      	bx	lr

0800dccc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800dccc:	b084      	sub	sp, #16
 800dcce:	b480      	push	{r7}
 800dcd0:	b083      	sub	sp, #12
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	f107 0014 	add.w	r0, r7, #20
 800dcda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2201      	movs	r2, #1
 800dce2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800dcfe:	2300      	movs	r3, #0
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bc80      	pop	{r7}
 800dd08:	b004      	add	sp, #16
 800dd0a:	4770      	bx	lr

0800dd0c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b09b      	sub	sp, #108	; 0x6c
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800dd16:	2300      	movs	r3, #0
 800dd18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	4413      	add	r3, r2
 800dd26:	881b      	ldrh	r3, [r3, #0]
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800dd2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	78db      	ldrb	r3, [r3, #3]
 800dd3a:	2b03      	cmp	r3, #3
 800dd3c:	d81f      	bhi.n	800dd7e <USB_ActivateEndpoint+0x72>
 800dd3e:	a201      	add	r2, pc, #4	; (adr r2, 800dd44 <USB_ActivateEndpoint+0x38>)
 800dd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd44:	0800dd55 	.word	0x0800dd55
 800dd48:	0800dd71 	.word	0x0800dd71
 800dd4c:	0800dd87 	.word	0x0800dd87
 800dd50:	0800dd63 	.word	0x0800dd63
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800dd54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800dd58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dd5c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800dd60:	e012      	b.n	800dd88 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800dd62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800dd66:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800dd6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800dd6e:	e00b      	b.n	800dd88 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800dd70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800dd74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dd78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800dd7c:	e004      	b.n	800dd88 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800dd84:	e000      	b.n	800dd88 <USB_ActivateEndpoint+0x7c>
      break;
 800dd86:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	441a      	add	r2, r3
 800dd92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800dd96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dda2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	4413      	add	r3, r2
 800ddb4:	881b      	ldrh	r3, [r3, #0]
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddc0:	b29a      	uxth	r2, r3
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800ddce:	687a      	ldr	r2, [r7, #4]
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	441a      	add	r2, r3
 800ddd8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800dddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dde0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dde4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	7b1b      	ldrb	r3, [r3, #12]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	f040 8149 	bne.w	800e08c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	785b      	ldrb	r3, [r3, #1]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	f000 8084 	beq.w	800df0c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	617b      	str	r3, [r7, #20]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de0e:	b29b      	uxth	r3, r3
 800de10:	461a      	mov	r2, r3
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	4413      	add	r3, r2
 800de16:	617b      	str	r3, [r7, #20]
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	011a      	lsls	r2, r3, #4
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	4413      	add	r3, r2
 800de22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de26:	613b      	str	r3, [r7, #16]
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	88db      	ldrh	r3, [r3, #6]
 800de2c:	085b      	lsrs	r3, r3, #1
 800de2e:	b29b      	uxth	r3, r3
 800de30:	005b      	lsls	r3, r3, #1
 800de32:	b29a      	uxth	r2, r3
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	4413      	add	r3, r2
 800de42:	881b      	ldrh	r3, [r3, #0]
 800de44:	81fb      	strh	r3, [r7, #14]
 800de46:	89fb      	ldrh	r3, [r7, #14]
 800de48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d01b      	beq.n	800de88 <USB_ActivateEndpoint+0x17c>
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	4413      	add	r3, r2
 800de5a:	881b      	ldrh	r3, [r3, #0]
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de66:	81bb      	strh	r3, [r7, #12]
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	441a      	add	r2, r3
 800de72:	89bb      	ldrh	r3, [r7, #12]
 800de74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800de84:	b29b      	uxth	r3, r3
 800de86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	78db      	ldrb	r3, [r3, #3]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d020      	beq.n	800ded2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4413      	add	r3, r2
 800de9a:	881b      	ldrh	r3, [r3, #0]
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dea6:	813b      	strh	r3, [r7, #8]
 800dea8:	893b      	ldrh	r3, [r7, #8]
 800deaa:	f083 0320 	eor.w	r3, r3, #32
 800deae:	813b      	strh	r3, [r7, #8]
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	441a      	add	r2, r3
 800deba:	893b      	ldrh	r3, [r7, #8]
 800debc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800decc:	b29b      	uxth	r3, r3
 800dece:	8013      	strh	r3, [r2, #0]
 800ded0:	e27f      	b.n	800e3d2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ded2:	687a      	ldr	r2, [r7, #4]
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	4413      	add	r3, r2
 800dedc:	881b      	ldrh	r3, [r3, #0]
 800dede:	b29b      	uxth	r3, r3
 800dee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dee8:	817b      	strh	r3, [r7, #10]
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	441a      	add	r2, r3
 800def4:	897b      	ldrh	r3, [r7, #10]
 800def6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800defa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800defe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df06:	b29b      	uxth	r3, r3
 800df08:	8013      	strh	r3, [r2, #0]
 800df0a:	e262      	b.n	800e3d2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df16:	b29b      	uxth	r3, r3
 800df18:	461a      	mov	r2, r3
 800df1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1c:	4413      	add	r3, r2
 800df1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	011a      	lsls	r2, r3, #4
 800df26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df28:	4413      	add	r3, r2
 800df2a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800df2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	88db      	ldrh	r3, [r3, #6]
 800df34:	085b      	lsrs	r3, r3, #1
 800df36:	b29b      	uxth	r3, r3
 800df38:	005b      	lsls	r3, r3, #1
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	627b      	str	r3, [r7, #36]	; 0x24
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	461a      	mov	r2, r3
 800df4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df50:	4413      	add	r3, r2
 800df52:	627b      	str	r3, [r7, #36]	; 0x24
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	011a      	lsls	r2, r3, #4
 800df5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5c:	4413      	add	r3, r2
 800df5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800df62:	623b      	str	r3, [r7, #32]
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	691b      	ldr	r3, [r3, #16]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d112      	bne.n	800df92 <USB_ActivateEndpoint+0x286>
 800df6c:	6a3b      	ldr	r3, [r7, #32]
 800df6e:	881b      	ldrh	r3, [r3, #0]
 800df70:	b29b      	uxth	r3, r3
 800df72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800df76:	b29a      	uxth	r2, r3
 800df78:	6a3b      	ldr	r3, [r7, #32]
 800df7a:	801a      	strh	r2, [r3, #0]
 800df7c:	6a3b      	ldr	r3, [r7, #32]
 800df7e:	881b      	ldrh	r3, [r3, #0]
 800df80:	b29b      	uxth	r3, r3
 800df82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df8a:	b29a      	uxth	r2, r3
 800df8c:	6a3b      	ldr	r3, [r7, #32]
 800df8e:	801a      	strh	r2, [r3, #0]
 800df90:	e02f      	b.n	800dff2 <USB_ActivateEndpoint+0x2e6>
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	691b      	ldr	r3, [r3, #16]
 800df96:	2b3e      	cmp	r3, #62	; 0x3e
 800df98:	d813      	bhi.n	800dfc2 <USB_ActivateEndpoint+0x2b6>
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	691b      	ldr	r3, [r3, #16]
 800df9e:	085b      	lsrs	r3, r3, #1
 800dfa0:	663b      	str	r3, [r7, #96]	; 0x60
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	691b      	ldr	r3, [r3, #16]
 800dfa6:	f003 0301 	and.w	r3, r3, #1
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d002      	beq.n	800dfb4 <USB_ActivateEndpoint+0x2a8>
 800dfae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	663b      	str	r3, [r7, #96]	; 0x60
 800dfb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	029b      	lsls	r3, r3, #10
 800dfba:	b29a      	uxth	r2, r3
 800dfbc:	6a3b      	ldr	r3, [r7, #32]
 800dfbe:	801a      	strh	r2, [r3, #0]
 800dfc0:	e017      	b.n	800dff2 <USB_ActivateEndpoint+0x2e6>
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	691b      	ldr	r3, [r3, #16]
 800dfc6:	095b      	lsrs	r3, r3, #5
 800dfc8:	663b      	str	r3, [r7, #96]	; 0x60
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	f003 031f 	and.w	r3, r3, #31
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d102      	bne.n	800dfdc <USB_ActivateEndpoint+0x2d0>
 800dfd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	663b      	str	r3, [r7, #96]	; 0x60
 800dfdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	029b      	lsls	r3, r3, #10
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	6a3b      	ldr	r3, [r7, #32]
 800dff0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	4413      	add	r3, r2
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	83fb      	strh	r3, [r7, #30]
 800e000:	8bfb      	ldrh	r3, [r7, #30]
 800e002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e006:	2b00      	cmp	r3, #0
 800e008:	d01b      	beq.n	800e042 <USB_ActivateEndpoint+0x336>
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	4413      	add	r3, r2
 800e014:	881b      	ldrh	r3, [r3, #0]
 800e016:	b29b      	uxth	r3, r3
 800e018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e01c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e020:	83bb      	strh	r3, [r7, #28]
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	441a      	add	r2, r3
 800e02c:	8bbb      	ldrh	r3, [r7, #28]
 800e02e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e036:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e03a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e03e:	b29b      	uxth	r3, r3
 800e040:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	4413      	add	r3, r2
 800e04c:	881b      	ldrh	r3, [r3, #0]
 800e04e:	b29b      	uxth	r3, r3
 800e050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e058:	837b      	strh	r3, [r7, #26]
 800e05a:	8b7b      	ldrh	r3, [r7, #26]
 800e05c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e060:	837b      	strh	r3, [r7, #26]
 800e062:	8b7b      	ldrh	r3, [r7, #26]
 800e064:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e068:	837b      	strh	r3, [r7, #26]
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	009b      	lsls	r3, r3, #2
 800e072:	441a      	add	r2, r3
 800e074:	8b7b      	ldrh	r3, [r7, #26]
 800e076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e07a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e07e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e086:	b29b      	uxth	r3, r3
 800e088:	8013      	strh	r3, [r2, #0]
 800e08a:	e1a2      	b.n	800e3d2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	4413      	add	r3, r2
 800e096:	881b      	ldrh	r3, [r3, #0]
 800e098:	b29b      	uxth	r3, r3
 800e09a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0a2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	441a      	add	r2, r3
 800e0b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e0b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e0c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0d8:	4413      	add	r3, r2
 800e0da:	65bb      	str	r3, [r7, #88]	; 0x58
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	011a      	lsls	r2, r3, #4
 800e0e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0e4:	4413      	add	r3, r2
 800e0e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0ea:	657b      	str	r3, [r7, #84]	; 0x54
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	891b      	ldrh	r3, [r3, #8]
 800e0f0:	085b      	lsrs	r3, r3, #1
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	005b      	lsls	r3, r3, #1
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0fa:	801a      	strh	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	653b      	str	r3, [r7, #80]	; 0x50
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e106:	b29b      	uxth	r3, r3
 800e108:	461a      	mov	r2, r3
 800e10a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e10c:	4413      	add	r3, r2
 800e10e:	653b      	str	r3, [r7, #80]	; 0x50
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	011a      	lsls	r2, r3, #4
 800e116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e118:	4413      	add	r3, r2
 800e11a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800e11e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	895b      	ldrh	r3, [r3, #10]
 800e124:	085b      	lsrs	r3, r3, #1
 800e126:	b29b      	uxth	r3, r3
 800e128:	005b      	lsls	r3, r3, #1
 800e12a:	b29a      	uxth	r2, r3
 800e12c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e12e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	785b      	ldrb	r3, [r3, #1]
 800e134:	2b00      	cmp	r3, #0
 800e136:	f040 8091 	bne.w	800e25c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	4413      	add	r3, r2
 800e144:	881b      	ldrh	r3, [r3, #0]
 800e146:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e148:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e14a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d01b      	beq.n	800e18a <USB_ActivateEndpoint+0x47e>
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	4413      	add	r3, r2
 800e15c:	881b      	ldrh	r3, [r3, #0]
 800e15e:	b29b      	uxth	r3, r3
 800e160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e168:	877b      	strh	r3, [r7, #58]	; 0x3a
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	441a      	add	r2, r3
 800e174:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e17a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e17e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e186:	b29b      	uxth	r3, r3
 800e188:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e18a:	687a      	ldr	r2, [r7, #4]
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	009b      	lsls	r3, r3, #2
 800e192:	4413      	add	r3, r2
 800e194:	881b      	ldrh	r3, [r3, #0]
 800e196:	873b      	strh	r3, [r7, #56]	; 0x38
 800e198:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d01b      	beq.n	800e1da <USB_ActivateEndpoint+0x4ce>
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	4413      	add	r3, r2
 800e1ac:	881b      	ldrh	r3, [r3, #0]
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	441a      	add	r2, r3
 800e1c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e1c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	4413      	add	r3, r2
 800e1e4:	881b      	ldrh	r3, [r3, #0]
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e1ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 800e1f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e1f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e1f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 800e1fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e1fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e200:	86bb      	strh	r3, [r7, #52]	; 0x34
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	441a      	add	r2, r3
 800e20c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e20e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e21a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e21e:	b29b      	uxth	r3, r3
 800e220:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4413      	add	r3, r2
 800e22c:	881b      	ldrh	r3, [r3, #0]
 800e22e:	b29b      	uxth	r3, r3
 800e230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e238:	867b      	strh	r3, [r7, #50]	; 0x32
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	441a      	add	r2, r3
 800e244:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e24a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e24e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e256:	b29b      	uxth	r3, r3
 800e258:	8013      	strh	r3, [r2, #0]
 800e25a:	e0ba      	b.n	800e3d2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	4413      	add	r3, r2
 800e266:	881b      	ldrh	r3, [r3, #0]
 800e268:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800e26c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e274:	2b00      	cmp	r3, #0
 800e276:	d01d      	beq.n	800e2b4 <USB_ActivateEndpoint+0x5a8>
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	4413      	add	r3, r2
 800e282:	881b      	ldrh	r3, [r3, #0]
 800e284:	b29b      	uxth	r3, r3
 800e286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e28a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e28e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	441a      	add	r2, r3
 800e29c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800e2a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e2a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	4413      	add	r3, r2
 800e2be:	881b      	ldrh	r3, [r3, #0]
 800e2c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800e2c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d01d      	beq.n	800e30c <USB_ActivateEndpoint+0x600>
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	4413      	add	r3, r2
 800e2da:	881b      	ldrh	r3, [r3, #0]
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e2ea:	687a      	ldr	r2, [r7, #4]
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	441a      	add	r2, r3
 800e2f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e2f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e304:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e308:	b29b      	uxth	r3, r3
 800e30a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	78db      	ldrb	r3, [r3, #3]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d024      	beq.n	800e35e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	4413      	add	r3, r2
 800e31e:	881b      	ldrh	r3, [r3, #0]
 800e320:	b29b      	uxth	r3, r3
 800e322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e32a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e32e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e332:	f083 0320 	eor.w	r3, r3, #32
 800e336:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e33a:	687a      	ldr	r2, [r7, #4]
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	441a      	add	r2, r3
 800e344:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e34c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e358:	b29b      	uxth	r3, r3
 800e35a:	8013      	strh	r3, [r2, #0]
 800e35c:	e01d      	b.n	800e39a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	4413      	add	r3, r2
 800e368:	881b      	ldrh	r3, [r3, #0]
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e374:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	441a      	add	r2, r3
 800e382:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e38a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e38e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e396:	b29b      	uxth	r3, r3
 800e398:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	4413      	add	r3, r2
 800e3a4:	881b      	ldrh	r3, [r3, #0]
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e3ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	441a      	add	r2, r3
 800e3bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e3be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e3c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e3c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800e3d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	376c      	adds	r7, #108	; 0x6c
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bc80      	pop	{r7}
 800e3de:	4770      	bx	lr

0800e3e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b08d      	sub	sp, #52	; 0x34
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	7b1b      	ldrb	r3, [r3, #12]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f040 808e 	bne.w	800e510 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	785b      	ldrb	r3, [r3, #1]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d044      	beq.n	800e486 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	4413      	add	r3, r2
 800e406:	881b      	ldrh	r3, [r3, #0]
 800e408:	81bb      	strh	r3, [r7, #12]
 800e40a:	89bb      	ldrh	r3, [r7, #12]
 800e40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e410:	2b00      	cmp	r3, #0
 800e412:	d01b      	beq.n	800e44c <USB_DeactivateEndpoint+0x6c>
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	4413      	add	r3, r2
 800e41e:	881b      	ldrh	r3, [r3, #0]
 800e420:	b29b      	uxth	r3, r3
 800e422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e42a:	817b      	strh	r3, [r7, #10]
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	441a      	add	r2, r3
 800e436:	897b      	ldrh	r3, [r7, #10]
 800e438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e43c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e444:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e448:	b29b      	uxth	r3, r3
 800e44a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e44c:	687a      	ldr	r2, [r7, #4]
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	009b      	lsls	r3, r3, #2
 800e454:	4413      	add	r3, r2
 800e456:	881b      	ldrh	r3, [r3, #0]
 800e458:	b29b      	uxth	r3, r3
 800e45a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e45e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e462:	813b      	strh	r3, [r7, #8]
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	441a      	add	r2, r3
 800e46e:	893b      	ldrh	r3, [r7, #8]
 800e470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e47c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e480:	b29b      	uxth	r3, r3
 800e482:	8013      	strh	r3, [r2, #0]
 800e484:	e192      	b.n	800e7ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	009b      	lsls	r3, r3, #2
 800e48e:	4413      	add	r3, r2
 800e490:	881b      	ldrh	r3, [r3, #0]
 800e492:	827b      	strh	r3, [r7, #18]
 800e494:	8a7b      	ldrh	r3, [r7, #18]
 800e496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d01b      	beq.n	800e4d6 <USB_DeactivateEndpoint+0xf6>
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	4413      	add	r3, r2
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e4b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4b4:	823b      	strh	r3, [r7, #16]
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	441a      	add	r2, r3
 800e4c0:	8a3b      	ldrh	r3, [r7, #16]
 800e4c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e4c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e4ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e4ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4d2:	b29b      	uxth	r3, r3
 800e4d4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	009b      	lsls	r3, r3, #2
 800e4de:	4413      	add	r3, r2
 800e4e0:	881b      	ldrh	r3, [r3, #0]
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e4e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4ec:	81fb      	strh	r3, [r7, #14]
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	441a      	add	r2, r3
 800e4f8:	89fb      	ldrh	r3, [r7, #14]
 800e4fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e4fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	8013      	strh	r3, [r2, #0]
 800e50e:	e14d      	b.n	800e7ac <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	785b      	ldrb	r3, [r3, #1]
 800e514:	2b00      	cmp	r3, #0
 800e516:	f040 80a5 	bne.w	800e664 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	4413      	add	r3, r2
 800e524:	881b      	ldrh	r3, [r3, #0]
 800e526:	843b      	strh	r3, [r7, #32]
 800e528:	8c3b      	ldrh	r3, [r7, #32]
 800e52a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d01b      	beq.n	800e56a <USB_DeactivateEndpoint+0x18a>
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	4413      	add	r3, r2
 800e53c:	881b      	ldrh	r3, [r3, #0]
 800e53e:	b29b      	uxth	r3, r3
 800e540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e548:	83fb      	strh	r3, [r7, #30]
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	441a      	add	r2, r3
 800e554:	8bfb      	ldrh	r3, [r7, #30]
 800e556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e55a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e55e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e566:	b29b      	uxth	r3, r3
 800e568:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	4413      	add	r3, r2
 800e574:	881b      	ldrh	r3, [r3, #0]
 800e576:	83bb      	strh	r3, [r7, #28]
 800e578:	8bbb      	ldrh	r3, [r7, #28]
 800e57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d01b      	beq.n	800e5ba <USB_DeactivateEndpoint+0x1da>
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	4413      	add	r3, r2
 800e58c:	881b      	ldrh	r3, [r3, #0]
 800e58e:	b29b      	uxth	r3, r3
 800e590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e598:	837b      	strh	r3, [r7, #26]
 800e59a:	687a      	ldr	r2, [r7, #4]
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	441a      	add	r2, r3
 800e5a4:	8b7b      	ldrh	r3, [r7, #26]
 800e5a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e5aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e5ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e5b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	881b      	ldrh	r3, [r3, #0]
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5d0:	833b      	strh	r3, [r7, #24]
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	009b      	lsls	r3, r3, #2
 800e5da:	441a      	add	r2, r3
 800e5dc:	8b3b      	ldrh	r3, [r7, #24]
 800e5de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e5e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e5e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e5ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	009b      	lsls	r3, r3, #2
 800e5fa:	4413      	add	r3, r2
 800e5fc:	881b      	ldrh	r3, [r3, #0]
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e608:	82fb      	strh	r3, [r7, #22]
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	441a      	add	r2, r3
 800e614:	8afb      	ldrh	r3, [r7, #22]
 800e616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e61a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e61e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e626:	b29b      	uxth	r3, r3
 800e628:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	4413      	add	r3, r2
 800e634:	881b      	ldrh	r3, [r3, #0]
 800e636:	b29b      	uxth	r3, r3
 800e638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e63c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e640:	82bb      	strh	r3, [r7, #20]
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	441a      	add	r2, r3
 800e64c:	8abb      	ldrh	r3, [r7, #20]
 800e64e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e65a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e65e:	b29b      	uxth	r3, r3
 800e660:	8013      	strh	r3, [r2, #0]
 800e662:	e0a3      	b.n	800e7ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	4413      	add	r3, r2
 800e66e:	881b      	ldrh	r3, [r3, #0]
 800e670:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e672:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d01b      	beq.n	800e6b4 <USB_DeactivateEndpoint+0x2d4>
 800e67c:	687a      	ldr	r2, [r7, #4]
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	4413      	add	r3, r2
 800e686:	881b      	ldrh	r3, [r3, #0]
 800e688:	b29b      	uxth	r3, r3
 800e68a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e68e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e692:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	441a      	add	r2, r3
 800e69e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e6a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e6a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e6a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e6ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	4413      	add	r3, r2
 800e6be:	881b      	ldrh	r3, [r3, #0]
 800e6c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e6c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d01b      	beq.n	800e704 <USB_DeactivateEndpoint+0x324>
 800e6cc:	687a      	ldr	r2, [r7, #4]
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	009b      	lsls	r3, r3, #2
 800e6d4:	4413      	add	r3, r2
 800e6d6:	881b      	ldrh	r3, [r3, #0]
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e6de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6e2:	853b      	strh	r3, [r7, #40]	; 0x28
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	441a      	add	r2, r3
 800e6ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e6f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e6f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e6f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e6fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e700:	b29b      	uxth	r3, r3
 800e702:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	4413      	add	r3, r2
 800e70e:	881b      	ldrh	r3, [r3, #0]
 800e710:	b29b      	uxth	r3, r3
 800e712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e71a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	441a      	add	r2, r3
 800e726:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e72c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e738:	b29b      	uxth	r3, r3
 800e73a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	4413      	add	r3, r2
 800e746:	881b      	ldrh	r3, [r3, #0]
 800e748:	b29b      	uxth	r3, r3
 800e74a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e74e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e752:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	441a      	add	r2, r3
 800e75e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e770:	b29b      	uxth	r3, r3
 800e772:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	4413      	add	r3, r2
 800e77e:	881b      	ldrh	r3, [r3, #0]
 800e780:	b29b      	uxth	r3, r3
 800e782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e78a:	847b      	strh	r3, [r7, #34]	; 0x22
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	009b      	lsls	r3, r3, #2
 800e794:	441a      	add	r2, r3
 800e796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e79c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e7ac:	2300      	movs	r3, #0
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3734      	adds	r7, #52	; 0x34
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bc80      	pop	{r7}
 800e7b6:	4770      	bx	lr

0800e7b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b0cc      	sub	sp, #304	; 0x130
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e7c6:	6018      	str	r0, [r3, #0]
 800e7c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e7d0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e7d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	785b      	ldrb	r3, [r3, #1]
 800e7de:	2b01      	cmp	r3, #1
 800e7e0:	f041 817d 	bne.w	800fade <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e7e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	699a      	ldr	r2, [r3, #24]
 800e7f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e7f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	691b      	ldr	r3, [r3, #16]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d908      	bls.n	800e812 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800e800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	691b      	ldr	r3, [r3, #16]
 800e80c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800e810:	e007      	b.n	800e822 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800e812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	699b      	ldr	r3, [r3, #24]
 800e81e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	7b1b      	ldrb	r3, [r3, #12]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d152      	bne.n	800e8d8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	6959      	ldr	r1, [r3, #20]
 800e83e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	88da      	ldrh	r2, [r3, #6]
 800e84a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e84e:	b29b      	uxth	r3, r3
 800e850:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800e854:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800e858:	6800      	ldr	r0, [r0, #0]
 800e85a:	f001 ff23 	bl	80106a4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e85e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e862:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e866:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e86a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e86e:	6812      	ldr	r2, [r2, #0]
 800e870:	601a      	str	r2, [r3, #0]
 800e872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e880:	b29b      	uxth	r3, r3
 800e882:	4619      	mov	r1, r3
 800e884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e888:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e88c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e890:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800e894:	6812      	ldr	r2, [r2, #0]
 800e896:	440a      	add	r2, r1
 800e898:	601a      	str	r2, [r3, #0]
 800e89a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e89e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	011a      	lsls	r2, r3, #4
 800e8a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800e8b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e8c0:	601a      	str	r2, [r3, #0]
 800e8c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e8c6:	b29a      	uxth	r2, r3
 800e8c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	801a      	strh	r2, [r3, #0]
 800e8d4:	f001 b8b5 	b.w	800fa42 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e8d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	78db      	ldrb	r3, [r3, #3]
 800e8e4:	2b02      	cmp	r3, #2
 800e8e6:	f040 84c6 	bne.w	800f276 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e8ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	6a1a      	ldr	r2, [r3, #32]
 800e8f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	691b      	ldr	r3, [r3, #16]
 800e902:	429a      	cmp	r2, r3
 800e904:	f240 8443 	bls.w	800f18e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800e908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e90c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	009b      	lsls	r3, r3, #2
 800e920:	4413      	add	r3, r2
 800e922:	881b      	ldrh	r3, [r3, #0]
 800e924:	b29b      	uxth	r3, r3
 800e926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e92a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e92e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800e932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e936:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e940:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	441a      	add	r2, r3
 800e94c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e958:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e960:	b29b      	uxth	r3, r3
 800e962:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	6a1a      	ldr	r2, [r3, #32]
 800e970:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e974:	1ad2      	subs	r2, r2, r3
 800e976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e97a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e986:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	4413      	add	r3, r2
 800e99c:	881b      	ldrh	r3, [r3, #0]
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f000 823e 	beq.w	800ee26 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e9aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e9ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e9b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e9b6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e9ba:	6812      	ldr	r2, [r2, #0]
 800e9bc:	601a      	str	r2, [r3, #0]
 800e9be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e9c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	785b      	ldrb	r3, [r3, #1]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	f040 809a 	bne.w	800eb04 <USB_EPStartXfer+0x34c>
 800e9d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e9d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e9dc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e9e0:	6812      	ldr	r2, [r2, #0]
 800e9e2:	601a      	str	r2, [r3, #0]
 800e9e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e9e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e9fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ea02:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800ea06:	6812      	ldr	r2, [r2, #0]
 800ea08:	440a      	add	r2, r1
 800ea0a:	601a      	str	r2, [r3, #0]
 800ea0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	011a      	lsls	r2, r3, #4
 800ea1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	4413      	add	r3, r2
 800ea26:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800ea2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ea32:	601a      	str	r2, [r3, #0]
 800ea34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d122      	bne.n	800ea82 <USB_EPStartXfer+0x2ca>
 800ea3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	881b      	ldrh	r3, [r3, #0]
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ea4e:	b29a      	uxth	r2, r3
 800ea50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	801a      	strh	r2, [r3, #0]
 800ea5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	881b      	ldrh	r3, [r3, #0]
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea72:	b29a      	uxth	r2, r3
 800ea74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	801a      	strh	r2, [r3, #0]
 800ea80:	e079      	b.n	800eb76 <USB_EPStartXfer+0x3be>
 800ea82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ea86:	2b3e      	cmp	r3, #62	; 0x3e
 800ea88:	d81b      	bhi.n	800eac2 <USB_EPStartXfer+0x30a>
 800ea8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ea8e:	085b      	lsrs	r3, r3, #1
 800ea90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800ea94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ea98:	f003 0301 	and.w	r3, r3, #1
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d004      	beq.n	800eaaa <USB_EPStartXfer+0x2f2>
 800eaa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800eaaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	029b      	lsls	r3, r3, #10
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eab8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	801a      	strh	r2, [r3, #0]
 800eac0:	e059      	b.n	800eb76 <USB_EPStartXfer+0x3be>
 800eac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eac6:	095b      	lsrs	r3, r3, #5
 800eac8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800eacc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ead0:	f003 031f 	and.w	r3, r3, #31
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d104      	bne.n	800eae2 <USB_EPStartXfer+0x32a>
 800ead8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eadc:	3b01      	subs	r3, #1
 800eade:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800eae2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	029b      	lsls	r3, r3, #10
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eaf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eafa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	801a      	strh	r2, [r3, #0]
 800eb02:	e038      	b.n	800eb76 <USB_EPStartXfer+0x3be>
 800eb04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	785b      	ldrb	r3, [r3, #1]
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d130      	bne.n	800eb76 <USB_EPStartXfer+0x3be>
 800eb14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	4619      	mov	r1, r3
 800eb26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb2a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800eb2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800eb32:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800eb36:	6812      	ldr	r2, [r2, #0]
 800eb38:	440a      	add	r2, r1
 800eb3a:	601a      	str	r2, [r3, #0]
 800eb3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	011a      	lsls	r2, r3, #4
 800eb4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb4e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4413      	add	r3, r2
 800eb56:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800eb5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb62:	601a      	str	r2, [r3, #0]
 800eb64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb68:	b29a      	uxth	r2, r3
 800eb6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800eb76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	895b      	ldrh	r3, [r3, #10]
 800eb82:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eb8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	6959      	ldr	r1, [r3, #20]
 800eb92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800eb9c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800eba0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800eba4:	6800      	ldr	r0, [r0, #0]
 800eba6:	f001 fd7d 	bl	80106a4 <USB_WritePMA>
            ep->xfer_buff += len;
 800ebaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ebae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	695a      	ldr	r2, [r3, #20]
 800ebb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ebba:	441a      	add	r2, r3
 800ebbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ebc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ebc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ebcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	6a1a      	ldr	r2, [r3, #32]
 800ebd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ebd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	691b      	ldr	r3, [r3, #16]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d90f      	bls.n	800ec04 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800ebe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ebe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	6a1a      	ldr	r2, [r3, #32]
 800ebf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ebf4:	1ad2      	subs	r2, r2, r3
 800ebf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ebfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	621a      	str	r2, [r3, #32]
 800ec02:	e00e      	b.n	800ec22 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800ec04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	6a1b      	ldr	r3, [r3, #32]
 800ec10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800ec14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ec22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	785b      	ldrb	r3, [r3, #1]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	f040 809a 	bne.w	800ed68 <USB_EPStartXfer+0x5b0>
 800ec34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec38:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800ec3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ec40:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800ec44:	6812      	ldr	r2, [r2, #0]
 800ec46:	601a      	str	r2, [r3, #0]
 800ec48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	4619      	mov	r1, r3
 800ec5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec5e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800ec62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ec66:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800ec6a:	6812      	ldr	r2, [r2, #0]
 800ec6c:	440a      	add	r2, r1
 800ec6e:	601a      	str	r2, [r3, #0]
 800ec70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	011a      	lsls	r2, r3, #4
 800ec7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4413      	add	r3, r2
 800ec8a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800ec8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ec96:	601a      	str	r2, [r3, #0]
 800ec98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d122      	bne.n	800ece6 <USB_EPStartXfer+0x52e>
 800eca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eca4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	881b      	ldrh	r3, [r3, #0]
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ecb2:	b29a      	uxth	r2, r3
 800ecb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ecb8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	801a      	strh	r2, [r3, #0]
 800ecc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ecc4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	881b      	ldrh	r3, [r3, #0]
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ecd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ecdc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	801a      	strh	r2, [r3, #0]
 800ece4:	e083      	b.n	800edee <USB_EPStartXfer+0x636>
 800ece6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ecea:	2b3e      	cmp	r3, #62	; 0x3e
 800ecec:	d81b      	bhi.n	800ed26 <USB_EPStartXfer+0x56e>
 800ecee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ecf2:	085b      	lsrs	r3, r3, #1
 800ecf4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ecf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ecfc:	f003 0301 	and.w	r3, r3, #1
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d004      	beq.n	800ed0e <USB_EPStartXfer+0x556>
 800ed04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ed08:	3301      	adds	r3, #1
 800ed0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ed0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	029b      	lsls	r3, r3, #10
 800ed16:	b29a      	uxth	r2, r3
 800ed18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ed1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	801a      	strh	r2, [r3, #0]
 800ed24:	e063      	b.n	800edee <USB_EPStartXfer+0x636>
 800ed26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ed2a:	095b      	lsrs	r3, r3, #5
 800ed2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ed30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ed34:	f003 031f 	and.w	r3, r3, #31
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d104      	bne.n	800ed46 <USB_EPStartXfer+0x58e>
 800ed3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ed40:	3b01      	subs	r3, #1
 800ed42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ed46:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	029b      	lsls	r3, r3, #10
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ed5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	801a      	strh	r2, [r3, #0]
 800ed66:	e042      	b.n	800edee <USB_EPStartXfer+0x636>
 800ed68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ed6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	785b      	ldrb	r3, [r3, #1]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d13a      	bne.n	800edee <USB_EPStartXfer+0x636>
 800ed78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ed7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ed80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ed84:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800ed88:	6812      	ldr	r2, [r2, #0]
 800ed8a:	601a      	str	r2, [r3, #0]
 800ed8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ed90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eda2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800eda6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800edaa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800edae:	6812      	ldr	r2, [r2, #0]
 800edb0:	440a      	add	r2, r1
 800edb2:	601a      	str	r2, [r3, #0]
 800edb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800edb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	011a      	lsls	r2, r3, #4
 800edc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800edc6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4413      	add	r3, r2
 800edce:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800edd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800edd6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800edda:	601a      	str	r2, [r3, #0]
 800eddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ede0:	b29a      	uxth	r2, r3
 800ede2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ede6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800edee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800edf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	891b      	ldrh	r3, [r3, #8]
 800edfa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800edfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	6959      	ldr	r1, [r3, #20]
 800ee0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ee14:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800ee18:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800ee1c:	6800      	ldr	r0, [r0, #0]
 800ee1e:	f001 fc41 	bl	80106a4 <USB_WritePMA>
 800ee22:	f000 be0e 	b.w	800fa42 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ee26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	785b      	ldrb	r3, [r3, #1]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d16d      	bne.n	800ef12 <USB_EPStartXfer+0x75a>
 800ee36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	461a      	mov	r2, r3
 800ee54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee56:	4413      	add	r3, r2
 800ee58:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	011a      	lsls	r2, r3, #4
 800ee68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee6a:	4413      	add	r3, r2
 800ee6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ee70:	647b      	str	r3, [r7, #68]	; 0x44
 800ee72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d112      	bne.n	800eea0 <USB_EPStartXfer+0x6e8>
 800ee7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee7c:	881b      	ldrh	r3, [r3, #0]
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ee84:	b29a      	uxth	r2, r3
 800ee86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee88:	801a      	strh	r2, [r3, #0]
 800ee8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee8c:	881b      	ldrh	r3, [r3, #0]
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ee94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ee98:	b29a      	uxth	r2, r3
 800ee9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee9c:	801a      	strh	r2, [r3, #0]
 800ee9e:	e063      	b.n	800ef68 <USB_EPStartXfer+0x7b0>
 800eea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eea4:	2b3e      	cmp	r3, #62	; 0x3e
 800eea6:	d817      	bhi.n	800eed8 <USB_EPStartXfer+0x720>
 800eea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eeac:	085b      	lsrs	r3, r3, #1
 800eeae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800eeb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eeb6:	f003 0301 	and.w	r3, r3, #1
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d004      	beq.n	800eec8 <USB_EPStartXfer+0x710>
 800eebe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800eec2:	3301      	adds	r3, #1
 800eec4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800eec8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800eecc:	b29b      	uxth	r3, r3
 800eece:	029b      	lsls	r3, r3, #10
 800eed0:	b29a      	uxth	r2, r3
 800eed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eed4:	801a      	strh	r2, [r3, #0]
 800eed6:	e047      	b.n	800ef68 <USB_EPStartXfer+0x7b0>
 800eed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eedc:	095b      	lsrs	r3, r3, #5
 800eede:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800eee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eee6:	f003 031f 	and.w	r3, r3, #31
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d104      	bne.n	800eef8 <USB_EPStartXfer+0x740>
 800eeee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800eef2:	3b01      	subs	r3, #1
 800eef4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800eef8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	029b      	lsls	r3, r3, #10
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef0e:	801a      	strh	r2, [r3, #0]
 800ef10:	e02a      	b.n	800ef68 <USB_EPStartXfer+0x7b0>
 800ef12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	785b      	ldrb	r3, [r3, #1]
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d122      	bne.n	800ef68 <USB_EPStartXfer+0x7b0>
 800ef22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	653b      	str	r3, [r7, #80]	; 0x50
 800ef2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	461a      	mov	r2, r3
 800ef40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef42:	4413      	add	r3, r2
 800ef44:	653b      	str	r3, [r7, #80]	; 0x50
 800ef46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	011a      	lsls	r2, r3, #4
 800ef54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef56:	4413      	add	r3, r2
 800ef58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ef5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef62:	b29a      	uxth	r2, r3
 800ef64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ef68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	891b      	ldrh	r3, [r3, #8]
 800ef74:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ef78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ef7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	6959      	ldr	r1, [r3, #20]
 800ef84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ef8e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800ef92:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800ef96:	6800      	ldr	r0, [r0, #0]
 800ef98:	f001 fb84 	bl	80106a4 <USB_WritePMA>
            ep->xfer_buff += len;
 800ef9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	695a      	ldr	r2, [r3, #20]
 800efa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800efac:	441a      	add	r2, r3
 800efae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800efba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	6a1a      	ldr	r2, [r3, #32]
 800efc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	691b      	ldr	r3, [r3, #16]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d90f      	bls.n	800eff6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800efd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	6a1a      	ldr	r2, [r3, #32]
 800efe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800efe6:	1ad2      	subs	r2, r2, r3
 800efe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	621a      	str	r2, [r3, #32]
 800eff4:	e00e      	b.n	800f014 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800eff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800effa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	6a1b      	ldr	r3, [r3, #32]
 800f002:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800f006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f00a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2200      	movs	r2, #0
 800f012:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f018:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	643b      	str	r3, [r7, #64]	; 0x40
 800f020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f024:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	785b      	ldrb	r3, [r3, #1]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d16d      	bne.n	800f10c <USB_EPStartXfer+0x954>
 800f030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f034:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f03c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f040:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	461a      	mov	r2, r3
 800f04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f050:	4413      	add	r3, r2
 800f052:	63bb      	str	r3, [r7, #56]	; 0x38
 800f054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	011a      	lsls	r2, r3, #4
 800f062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f064:	4413      	add	r3, r2
 800f066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f06a:	637b      	str	r3, [r7, #52]	; 0x34
 800f06c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f070:	2b00      	cmp	r3, #0
 800f072:	d112      	bne.n	800f09a <USB_EPStartXfer+0x8e2>
 800f074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f076:	881b      	ldrh	r3, [r3, #0]
 800f078:	b29b      	uxth	r3, r3
 800f07a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f07e:	b29a      	uxth	r2, r3
 800f080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f082:	801a      	strh	r2, [r3, #0]
 800f084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f086:	881b      	ldrh	r3, [r3, #0]
 800f088:	b29b      	uxth	r3, r3
 800f08a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f08e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f092:	b29a      	uxth	r2, r3
 800f094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f096:	801a      	strh	r2, [r3, #0]
 800f098:	e05d      	b.n	800f156 <USB_EPStartXfer+0x99e>
 800f09a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f09e:	2b3e      	cmp	r3, #62	; 0x3e
 800f0a0:	d817      	bhi.n	800f0d2 <USB_EPStartXfer+0x91a>
 800f0a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f0a6:	085b      	lsrs	r3, r3, #1
 800f0a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800f0ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f0b0:	f003 0301 	and.w	r3, r3, #1
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d004      	beq.n	800f0c2 <USB_EPStartXfer+0x90a>
 800f0b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f0bc:	3301      	adds	r3, #1
 800f0be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800f0c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	029b      	lsls	r3, r3, #10
 800f0ca:	b29a      	uxth	r2, r3
 800f0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ce:	801a      	strh	r2, [r3, #0]
 800f0d0:	e041      	b.n	800f156 <USB_EPStartXfer+0x99e>
 800f0d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f0d6:	095b      	lsrs	r3, r3, #5
 800f0d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800f0dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f0e0:	f003 031f 	and.w	r3, r3, #31
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d104      	bne.n	800f0f2 <USB_EPStartXfer+0x93a>
 800f0e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f0ec:	3b01      	subs	r3, #1
 800f0ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800f0f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	029b      	lsls	r3, r3, #10
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f104:	b29a      	uxth	r2, r3
 800f106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f108:	801a      	strh	r2, [r3, #0]
 800f10a:	e024      	b.n	800f156 <USB_EPStartXfer+0x99e>
 800f10c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	785b      	ldrb	r3, [r3, #1]
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d11c      	bne.n	800f156 <USB_EPStartXfer+0x99e>
 800f11c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f120:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	461a      	mov	r2, r3
 800f12e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f130:	4413      	add	r3, r2
 800f132:	643b      	str	r3, [r7, #64]	; 0x40
 800f134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	011a      	lsls	r2, r3, #4
 800f142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f144:	4413      	add	r3, r2
 800f146:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f14c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f150:	b29a      	uxth	r2, r3
 800f152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f154:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f15a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	895b      	ldrh	r3, [r3, #10]
 800f162:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f16a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	6959      	ldr	r1, [r3, #20]
 800f172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f176:	b29b      	uxth	r3, r3
 800f178:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800f17c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800f180:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800f184:	6800      	ldr	r0, [r0, #0]
 800f186:	f001 fa8d 	bl	80106a4 <USB_WritePMA>
 800f18a:	f000 bc5a 	b.w	800fa42 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800f18e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	6a1b      	ldr	r3, [r3, #32]
 800f19a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800f19e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	009b      	lsls	r3, r3, #2
 800f1b6:	4413      	add	r3, r2
 800f1b8:	881b      	ldrh	r3, [r3, #0]
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f1c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1c4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f1c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	441a      	add	r2, r3
 800f1e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f1e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f1fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f1fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f20a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f214:	b29b      	uxth	r3, r3
 800f216:	461a      	mov	r2, r3
 800f218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f21a:	4413      	add	r3, r2
 800f21c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f21e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	011a      	lsls	r2, r3, #4
 800f22c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f22e:	4413      	add	r3, r2
 800f230:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f234:	65bb      	str	r3, [r7, #88]	; 0x58
 800f236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f23a:	b29a      	uxth	r2, r3
 800f23c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f23e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	891b      	ldrh	r3, [r3, #8]
 800f24c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	6959      	ldr	r1, [r3, #20]
 800f25c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f260:	b29b      	uxth	r3, r3
 800f262:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800f266:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800f26a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800f26e:	6800      	ldr	r0, [r0, #0]
 800f270:	f001 fa18 	bl	80106a4 <USB_WritePMA>
 800f274:	e3e5      	b.n	800fa42 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800f276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f27a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f27e:	681a      	ldr	r2, [r3, #0]
 800f280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	009b      	lsls	r3, r3, #2
 800f28e:	4413      	add	r3, r2
 800f290:	881b      	ldrh	r3, [r3, #0]
 800f292:	b29b      	uxth	r3, r3
 800f294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f29c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800f2a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	009b      	lsls	r3, r3, #2
 800f2b8:	441a      	add	r2, r3
 800f2ba:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800f2be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2c6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f2ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2ce:	b29b      	uxth	r3, r3
 800f2d0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800f2d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	6a1a      	ldr	r2, [r3, #32]
 800f2de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f2e2:	1ad2      	subs	r2, r2, r3
 800f2e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f2f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f2fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	4413      	add	r3, r2
 800f30a:	881b      	ldrh	r3, [r3, #0]
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f312:	2b00      	cmp	r3, #0
 800f314:	f000 81bc 	beq.w	800f690 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f31c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f32a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	785b      	ldrb	r3, [r3, #1]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d16d      	bne.n	800f412 <USB_EPStartXfer+0xc5a>
 800f336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f33a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	67bb      	str	r3, [r7, #120]	; 0x78
 800f342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f346:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f350:	b29b      	uxth	r3, r3
 800f352:	461a      	mov	r2, r3
 800f354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f356:	4413      	add	r3, r2
 800f358:	67bb      	str	r3, [r7, #120]	; 0x78
 800f35a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f35e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	011a      	lsls	r2, r3, #4
 800f368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f36a:	4413      	add	r3, r2
 800f36c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f370:	677b      	str	r3, [r7, #116]	; 0x74
 800f372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f376:	2b00      	cmp	r3, #0
 800f378:	d112      	bne.n	800f3a0 <USB_EPStartXfer+0xbe8>
 800f37a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f37c:	881b      	ldrh	r3, [r3, #0]
 800f37e:	b29b      	uxth	r3, r3
 800f380:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f384:	b29a      	uxth	r2, r3
 800f386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f388:	801a      	strh	r2, [r3, #0]
 800f38a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f38c:	881b      	ldrh	r3, [r3, #0]
 800f38e:	b29b      	uxth	r3, r3
 800f390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f398:	b29a      	uxth	r2, r3
 800f39a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f39c:	801a      	strh	r2, [r3, #0]
 800f39e:	e060      	b.n	800f462 <USB_EPStartXfer+0xcaa>
 800f3a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f3a4:	2b3e      	cmp	r3, #62	; 0x3e
 800f3a6:	d817      	bhi.n	800f3d8 <USB_EPStartXfer+0xc20>
 800f3a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f3ac:	085b      	lsrs	r3, r3, #1
 800f3ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f3b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f3b6:	f003 0301 	and.w	r3, r3, #1
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d004      	beq.n	800f3c8 <USB_EPStartXfer+0xc10>
 800f3be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f3c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	029b      	lsls	r3, r3, #10
 800f3d0:	b29a      	uxth	r2, r3
 800f3d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3d4:	801a      	strh	r2, [r3, #0]
 800f3d6:	e044      	b.n	800f462 <USB_EPStartXfer+0xcaa>
 800f3d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f3dc:	095b      	lsrs	r3, r3, #5
 800f3de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f3e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f3e6:	f003 031f 	and.w	r3, r3, #31
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d104      	bne.n	800f3f8 <USB_EPStartXfer+0xc40>
 800f3ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f3f2:	3b01      	subs	r3, #1
 800f3f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800f3f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	029b      	lsls	r3, r3, #10
 800f400:	b29b      	uxth	r3, r3
 800f402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f40a:	b29a      	uxth	r2, r3
 800f40c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f40e:	801a      	strh	r2, [r3, #0]
 800f410:	e027      	b.n	800f462 <USB_EPStartXfer+0xcaa>
 800f412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	785b      	ldrb	r3, [r3, #1]
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d11f      	bne.n	800f462 <USB_EPStartXfer+0xcaa>
 800f422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f426:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f430:	b29b      	uxth	r3, r3
 800f432:	461a      	mov	r2, r3
 800f434:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f438:	4413      	add	r3, r2
 800f43a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f43e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	011a      	lsls	r2, r3, #4
 800f44c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f450:	4413      	add	r3, r2
 800f452:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f456:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f45c:	b29a      	uxth	r2, r3
 800f45e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f460:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800f462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	895b      	ldrh	r3, [r3, #10]
 800f46e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	6959      	ldr	r1, [r3, #20]
 800f47e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f482:	b29b      	uxth	r3, r3
 800f484:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800f488:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800f48c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800f490:	6800      	ldr	r0, [r0, #0]
 800f492:	f001 f907 	bl	80106a4 <USB_WritePMA>
          ep->xfer_buff += len;
 800f496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f49a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	695a      	ldr	r2, [r3, #20]
 800f4a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f4a6:	441a      	add	r2, r3
 800f4a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f4ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800f4b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f4b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	6a1a      	ldr	r2, [r3, #32]
 800f4c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f4c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	691b      	ldr	r3, [r3, #16]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d90f      	bls.n	800f4f0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800f4d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f4d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	6a1a      	ldr	r2, [r3, #32]
 800f4dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f4e0:	1ad2      	subs	r2, r2, r3
 800f4e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f4e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	621a      	str	r2, [r3, #32]
 800f4ee:	e00e      	b.n	800f50e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800f4f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f4f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	6a1b      	ldr	r3, [r3, #32]
 800f4fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800f500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2200      	movs	r2, #0
 800f50c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800f50e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f512:	2b00      	cmp	r3, #0
 800f514:	f000 8295 	beq.w	800fa42 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f51c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	785b      	ldrb	r3, [r3, #1]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d16d      	bne.n	800f604 <USB_EPStartXfer+0xe4c>
 800f528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f52c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	66bb      	str	r3, [r7, #104]	; 0x68
 800f534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f538:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f542:	b29b      	uxth	r3, r3
 800f544:	461a      	mov	r2, r3
 800f546:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f548:	4413      	add	r3, r2
 800f54a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f54c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	011a      	lsls	r2, r3, #4
 800f55a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f55c:	4413      	add	r3, r2
 800f55e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f562:	667b      	str	r3, [r7, #100]	; 0x64
 800f564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d112      	bne.n	800f592 <USB_EPStartXfer+0xdda>
 800f56c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f56e:	881b      	ldrh	r3, [r3, #0]
 800f570:	b29b      	uxth	r3, r3
 800f572:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f576:	b29a      	uxth	r2, r3
 800f578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f57a:	801a      	strh	r2, [r3, #0]
 800f57c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	b29b      	uxth	r3, r3
 800f582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f58a:	b29a      	uxth	r2, r3
 800f58c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f58e:	801a      	strh	r2, [r3, #0]
 800f590:	e063      	b.n	800f65a <USB_EPStartXfer+0xea2>
 800f592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f596:	2b3e      	cmp	r3, #62	; 0x3e
 800f598:	d817      	bhi.n	800f5ca <USB_EPStartXfer+0xe12>
 800f59a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f59e:	085b      	lsrs	r3, r3, #1
 800f5a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f5a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f5a8:	f003 0301 	and.w	r3, r3, #1
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d004      	beq.n	800f5ba <USB_EPStartXfer+0xe02>
 800f5b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	029b      	lsls	r3, r3, #10
 800f5c2:	b29a      	uxth	r2, r3
 800f5c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f5c6:	801a      	strh	r2, [r3, #0]
 800f5c8:	e047      	b.n	800f65a <USB_EPStartXfer+0xea2>
 800f5ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f5ce:	095b      	lsrs	r3, r3, #5
 800f5d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f5d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f5d8:	f003 031f 	and.w	r3, r3, #31
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d104      	bne.n	800f5ea <USB_EPStartXfer+0xe32>
 800f5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5e4:	3b01      	subs	r3, #1
 800f5e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800f5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	029b      	lsls	r3, r3, #10
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f5f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f600:	801a      	strh	r2, [r3, #0]
 800f602:	e02a      	b.n	800f65a <USB_EPStartXfer+0xea2>
 800f604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	785b      	ldrb	r3, [r3, #1]
 800f610:	2b01      	cmp	r3, #1
 800f612:	d122      	bne.n	800f65a <USB_EPStartXfer+0xea2>
 800f614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	673b      	str	r3, [r7, #112]	; 0x70
 800f620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f624:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f62e:	b29b      	uxth	r3, r3
 800f630:	461a      	mov	r2, r3
 800f632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f634:	4413      	add	r3, r2
 800f636:	673b      	str	r3, [r7, #112]	; 0x70
 800f638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f63c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	011a      	lsls	r2, r3, #4
 800f646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f648:	4413      	add	r3, r2
 800f64a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f64e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f654:	b29a      	uxth	r2, r3
 800f656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f658:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f65a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f65e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	891b      	ldrh	r3, [r3, #8]
 800f666:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f66a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f66e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	6959      	ldr	r1, [r3, #20]
 800f676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800f680:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800f684:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800f688:	6800      	ldr	r0, [r0, #0]
 800f68a:	f001 f80b 	bl	80106a4 <USB_WritePMA>
 800f68e:	e1d8      	b.n	800fa42 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	785b      	ldrb	r3, [r3, #1]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d178      	bne.n	800f792 <USB_EPStartXfer+0xfda>
 800f6a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f6a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f6ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f6b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f6bc:	b29b      	uxth	r3, r3
 800f6be:	461a      	mov	r2, r3
 800f6c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6c4:	4413      	add	r3, r2
 800f6c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f6ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f6ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	011a      	lsls	r2, r3, #4
 800f6d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6dc:	4413      	add	r3, r2
 800f6de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f6e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f6e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d116      	bne.n	800f71c <USB_EPStartXfer+0xf64>
 800f6ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f6f2:	881b      	ldrh	r3, [r3, #0]
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f700:	801a      	strh	r2, [r3, #0]
 800f702:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	b29b      	uxth	r3, r3
 800f70a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f70e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f712:	b29a      	uxth	r2, r3
 800f714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f718:	801a      	strh	r2, [r3, #0]
 800f71a:	e06b      	b.n	800f7f4 <USB_EPStartXfer+0x103c>
 800f71c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f720:	2b3e      	cmp	r3, #62	; 0x3e
 800f722:	d818      	bhi.n	800f756 <USB_EPStartXfer+0xf9e>
 800f724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f728:	085b      	lsrs	r3, r3, #1
 800f72a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800f72e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f732:	f003 0301 	and.w	r3, r3, #1
 800f736:	2b00      	cmp	r3, #0
 800f738:	d004      	beq.n	800f744 <USB_EPStartXfer+0xf8c>
 800f73a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f73e:	3301      	adds	r3, #1
 800f740:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800f744:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f748:	b29b      	uxth	r3, r3
 800f74a:	029b      	lsls	r3, r3, #10
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f752:	801a      	strh	r2, [r3, #0]
 800f754:	e04e      	b.n	800f7f4 <USB_EPStartXfer+0x103c>
 800f756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f75a:	095b      	lsrs	r3, r3, #5
 800f75c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800f760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f764:	f003 031f 	and.w	r3, r3, #31
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d104      	bne.n	800f776 <USB_EPStartXfer+0xfbe>
 800f76c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f770:	3b01      	subs	r3, #1
 800f772:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800f776:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	029b      	lsls	r3, r3, #10
 800f77e:	b29b      	uxth	r3, r3
 800f780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f788:	b29a      	uxth	r2, r3
 800f78a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f78e:	801a      	strh	r2, [r3, #0]
 800f790:	e030      	b.n	800f7f4 <USB_EPStartXfer+0x103c>
 800f792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	785b      	ldrb	r3, [r3, #1]
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d128      	bne.n	800f7f4 <USB_EPStartXfer+0x103c>
 800f7a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f7a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f7b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f7b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f7be:	b29b      	uxth	r3, r3
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f7c6:	4413      	add	r3, r2
 800f7c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f7cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f7d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	011a      	lsls	r2, r3, #4
 800f7da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f7de:	4413      	add	r3, r2
 800f7e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f7e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f7e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f7f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f7f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f7f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	891b      	ldrh	r3, [r3, #8]
 800f800:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	6959      	ldr	r1, [r3, #20]
 800f810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f814:	b29b      	uxth	r3, r3
 800f816:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800f81a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800f81e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800f822:	6800      	ldr	r0, [r0, #0]
 800f824:	f000 ff3e 	bl	80106a4 <USB_WritePMA>
          ep->xfer_buff += len;
 800f828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f82c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	695a      	ldr	r2, [r3, #20]
 800f834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f838:	441a      	add	r2, r3
 800f83a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f83e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800f846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f84a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	6a1a      	ldr	r2, [r3, #32]
 800f852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	691b      	ldr	r3, [r3, #16]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d90f      	bls.n	800f882 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800f862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	6a1a      	ldr	r2, [r3, #32]
 800f86e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f872:	1ad2      	subs	r2, r2, r3
 800f874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f878:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	621a      	str	r2, [r3, #32]
 800f880:	e00e      	b.n	800f8a0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800f882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	6a1b      	ldr	r3, [r3, #32]
 800f88e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800f892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	2200      	movs	r2, #0
 800f89e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800f8a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	f000 80cc 	beq.w	800fa42 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f8aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f8ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f8b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f8bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	785b      	ldrb	r3, [r3, #1]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d178      	bne.n	800f9ba <USB_EPStartXfer+0x1202>
 800f8c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f8cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f8d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f8da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8ec:	4413      	add	r3, r2
 800f8ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f8f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f8f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	011a      	lsls	r2, r3, #4
 800f900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f904:	4413      	add	r3, r2
 800f906:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f90a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f90e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f912:	2b00      	cmp	r3, #0
 800f914:	d116      	bne.n	800f944 <USB_EPStartXfer+0x118c>
 800f916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f91a:	881b      	ldrh	r3, [r3, #0]
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f922:	b29a      	uxth	r2, r3
 800f924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f928:	801a      	strh	r2, [r3, #0]
 800f92a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f92e:	881b      	ldrh	r3, [r3, #0]
 800f930:	b29b      	uxth	r3, r3
 800f932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f940:	801a      	strh	r2, [r3, #0]
 800f942:	e064      	b.n	800fa0e <USB_EPStartXfer+0x1256>
 800f944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f948:	2b3e      	cmp	r3, #62	; 0x3e
 800f94a:	d818      	bhi.n	800f97e <USB_EPStartXfer+0x11c6>
 800f94c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f950:	085b      	lsrs	r3, r3, #1
 800f952:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f95a:	f003 0301 	and.w	r3, r3, #1
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d004      	beq.n	800f96c <USB_EPStartXfer+0x11b4>
 800f962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f966:	3301      	adds	r3, #1
 800f968:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f96c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f970:	b29b      	uxth	r3, r3
 800f972:	029b      	lsls	r3, r3, #10
 800f974:	b29a      	uxth	r2, r3
 800f976:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f97a:	801a      	strh	r2, [r3, #0]
 800f97c:	e047      	b.n	800fa0e <USB_EPStartXfer+0x1256>
 800f97e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f982:	095b      	lsrs	r3, r3, #5
 800f984:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f98c:	f003 031f 	and.w	r3, r3, #31
 800f990:	2b00      	cmp	r3, #0
 800f992:	d104      	bne.n	800f99e <USB_EPStartXfer+0x11e6>
 800f994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f998:	3b01      	subs	r3, #1
 800f99a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f99e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	029b      	lsls	r3, r3, #10
 800f9a6:	b29b      	uxth	r3, r3
 800f9a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f9ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f9b0:	b29a      	uxth	r2, r3
 800f9b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f9b6:	801a      	strh	r2, [r3, #0]
 800f9b8:	e029      	b.n	800fa0e <USB_EPStartXfer+0x1256>
 800f9ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f9be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	785b      	ldrb	r3, [r3, #1]
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d121      	bne.n	800fa0e <USB_EPStartXfer+0x1256>
 800f9ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f9ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	461a      	mov	r2, r3
 800f9dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9e0:	4413      	add	r3, r2
 800f9e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f9e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f9ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	011a      	lsls	r2, r3, #4
 800f9f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9f8:	4413      	add	r3, r2
 800f9fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f9fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fa02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fa0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	895b      	ldrh	r3, [r3, #10]
 800fa1a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fa1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	6959      	ldr	r1, [r3, #20]
 800fa2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fa2e:	b29b      	uxth	r3, r3
 800fa30:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800fa34:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800fa38:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800fa3c:	6800      	ldr	r0, [r0, #0]
 800fa3e:	f000 fe31 	bl	80106a4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800fa42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	4413      	add	r3, r2
 800fa5c:	881b      	ldrh	r3, [r3, #0]
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fa64:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800fa68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa70:	8013      	strh	r3, [r2, #0]
 800fa72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa76:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800fa7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fa7e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800fa82:	8812      	ldrh	r2, [r2, #0]
 800fa84:	f082 0210 	eor.w	r2, r2, #16
 800fa88:	801a      	strh	r2, [r3, #0]
 800fa8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fa8e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800fa92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800fa96:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800fa9a:	8812      	ldrh	r2, [r2, #0]
 800fa9c:	f082 0220 	eor.w	r2, r2, #32
 800faa0:	801a      	strh	r2, [r3, #0]
 800faa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800faa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	441a      	add	r2, r3
 800fabc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fac0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800fac4:	881b      	ldrh	r3, [r3, #0]
 800fac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800faca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800face:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	8013      	strh	r3, [r2, #0]
 800fada:	f000 bc9f 	b.w	801041c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800fade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	7b1b      	ldrb	r3, [r3, #12]
 800faea:	2b00      	cmp	r3, #0
 800faec:	f040 80ae 	bne.w	800fc4c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800faf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800faf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	699a      	ldr	r2, [r3, #24]
 800fafc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	691b      	ldr	r3, [r3, #16]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d917      	bls.n	800fb3c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800fb0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	691b      	ldr	r3, [r3, #16]
 800fb18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800fb1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	699a      	ldr	r2, [r3, #24]
 800fb28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fb2c:	1ad2      	subs	r2, r2, r3
 800fb2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	619a      	str	r2, [r3, #24]
 800fb3a:	e00e      	b.n	800fb5a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800fb3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	699b      	ldr	r3, [r3, #24]
 800fb48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800fb4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2200      	movs	r2, #0
 800fb58:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800fb5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fb68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb76:	b29b      	uxth	r3, r3
 800fb78:	461a      	mov	r2, r3
 800fb7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fb7e:	4413      	add	r3, r2
 800fb80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fb84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fb88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	011a      	lsls	r2, r3, #4
 800fb92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fb96:	4413      	add	r3, r2
 800fb98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fb9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d116      	bne.n	800fbd6 <USB_EPStartXfer+0x141e>
 800fba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fbac:	881b      	ldrh	r3, [r3, #0]
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fbb4:	b29a      	uxth	r2, r3
 800fbb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fbba:	801a      	strh	r2, [r3, #0]
 800fbbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fbc0:	881b      	ldrh	r3, [r3, #0]
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbcc:	b29a      	uxth	r2, r3
 800fbce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fbd2:	801a      	strh	r2, [r3, #0]
 800fbd4:	e3e8      	b.n	80103a8 <USB_EPStartXfer+0x1bf0>
 800fbd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fbda:	2b3e      	cmp	r3, #62	; 0x3e
 800fbdc:	d818      	bhi.n	800fc10 <USB_EPStartXfer+0x1458>
 800fbde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fbe2:	085b      	lsrs	r3, r3, #1
 800fbe4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800fbe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fbec:	f003 0301 	and.w	r3, r3, #1
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d004      	beq.n	800fbfe <USB_EPStartXfer+0x1446>
 800fbf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800fbfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	029b      	lsls	r3, r3, #10
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc0c:	801a      	strh	r2, [r3, #0]
 800fc0e:	e3cb      	b.n	80103a8 <USB_EPStartXfer+0x1bf0>
 800fc10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fc14:	095b      	lsrs	r3, r3, #5
 800fc16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800fc1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fc1e:	f003 031f 	and.w	r3, r3, #31
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d104      	bne.n	800fc30 <USB_EPStartXfer+0x1478>
 800fc26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fc2a:	3b01      	subs	r3, #1
 800fc2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800fc30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	029b      	lsls	r3, r3, #10
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fc3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc48:	801a      	strh	r2, [r3, #0]
 800fc4a:	e3ad      	b.n	80103a8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800fc4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	78db      	ldrb	r3, [r3, #3]
 800fc58:	2b02      	cmp	r3, #2
 800fc5a:	f040 8200 	bne.w	801005e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800fc5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	785b      	ldrb	r3, [r3, #1]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f040 8091 	bne.w	800fd92 <USB_EPStartXfer+0x15da>
 800fc70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fc7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	461a      	mov	r2, r3
 800fc90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fc94:	4413      	add	r3, r2
 800fc96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fc9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fc9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	011a      	lsls	r2, r3, #4
 800fca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fcac:	4413      	add	r3, r2
 800fcae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fcb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fcb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fcba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	691b      	ldr	r3, [r3, #16]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d116      	bne.n	800fcf4 <USB_EPStartXfer+0x153c>
 800fcc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fcca:	881b      	ldrh	r3, [r3, #0]
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fcd2:	b29a      	uxth	r2, r3
 800fcd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fcd8:	801a      	strh	r2, [r3, #0]
 800fcda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fcde:	881b      	ldrh	r3, [r3, #0]
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fcf0:	801a      	strh	r2, [r3, #0]
 800fcf2:	e083      	b.n	800fdfc <USB_EPStartXfer+0x1644>
 800fcf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fcf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	691b      	ldr	r3, [r3, #16]
 800fd00:	2b3e      	cmp	r3, #62	; 0x3e
 800fd02:	d820      	bhi.n	800fd46 <USB_EPStartXfer+0x158e>
 800fd04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	691b      	ldr	r3, [r3, #16]
 800fd10:	085b      	lsrs	r3, r3, #1
 800fd12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800fd16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	691b      	ldr	r3, [r3, #16]
 800fd22:	f003 0301 	and.w	r3, r3, #1
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d004      	beq.n	800fd34 <USB_EPStartXfer+0x157c>
 800fd2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd2e:	3301      	adds	r3, #1
 800fd30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800fd34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd38:	b29b      	uxth	r3, r3
 800fd3a:	029b      	lsls	r3, r3, #10
 800fd3c:	b29a      	uxth	r2, r3
 800fd3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fd42:	801a      	strh	r2, [r3, #0]
 800fd44:	e05a      	b.n	800fdfc <USB_EPStartXfer+0x1644>
 800fd46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	691b      	ldr	r3, [r3, #16]
 800fd52:	095b      	lsrs	r3, r3, #5
 800fd54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800fd58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	691b      	ldr	r3, [r3, #16]
 800fd64:	f003 031f 	and.w	r3, r3, #31
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d104      	bne.n	800fd76 <USB_EPStartXfer+0x15be>
 800fd6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd70:	3b01      	subs	r3, #1
 800fd72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800fd76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd7a:	b29b      	uxth	r3, r3
 800fd7c:	029b      	lsls	r3, r3, #10
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fd8e:	801a      	strh	r2, [r3, #0]
 800fd90:	e034      	b.n	800fdfc <USB_EPStartXfer+0x1644>
 800fd92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fd96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	785b      	ldrb	r3, [r3, #1]
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	d12c      	bne.n	800fdfc <USB_EPStartXfer+0x1644>
 800fda2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fda6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fdb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fdb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fdc6:	4413      	add	r3, r2
 800fdc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fdcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fdd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	011a      	lsls	r2, r3, #4
 800fdda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fdde:	4413      	add	r3, r2
 800fde0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fde4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fde8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fdec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	691b      	ldr	r3, [r3, #16]
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800fdfa:	801a      	strh	r2, [r3, #0]
 800fdfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fe0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	785b      	ldrb	r3, [r3, #1]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	f040 8091 	bne.w	800ff3e <USB_EPStartXfer+0x1786>
 800fe1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fe2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe38:	b29b      	uxth	r3, r3
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fe40:	4413      	add	r3, r2
 800fe42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fe46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	011a      	lsls	r2, r3, #4
 800fe54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fe58:	4413      	add	r3, r2
 800fe5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fe5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fe62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fe66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	691b      	ldr	r3, [r3, #16]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d116      	bne.n	800fea0 <USB_EPStartXfer+0x16e8>
 800fe72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fe76:	881b      	ldrh	r3, [r3, #0]
 800fe78:	b29b      	uxth	r3, r3
 800fe7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800fe7e:	b29a      	uxth	r2, r3
 800fe80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fe84:	801a      	strh	r2, [r3, #0]
 800fe86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fe8a:	881b      	ldrh	r3, [r3, #0]
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe96:	b29a      	uxth	r2, r3
 800fe98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fe9c:	801a      	strh	r2, [r3, #0]
 800fe9e:	e07c      	b.n	800ff9a <USB_EPStartXfer+0x17e2>
 800fea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	691b      	ldr	r3, [r3, #16]
 800feac:	2b3e      	cmp	r3, #62	; 0x3e
 800feae:	d820      	bhi.n	800fef2 <USB_EPStartXfer+0x173a>
 800feb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800feb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	691b      	ldr	r3, [r3, #16]
 800febc:	085b      	lsrs	r3, r3, #1
 800febe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	691b      	ldr	r3, [r3, #16]
 800fece:	f003 0301 	and.w	r3, r3, #1
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d004      	beq.n	800fee0 <USB_EPStartXfer+0x1728>
 800fed6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800feda:	3301      	adds	r3, #1
 800fedc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fee0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	029b      	lsls	r3, r3, #10
 800fee8:	b29a      	uxth	r2, r3
 800feea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800feee:	801a      	strh	r2, [r3, #0]
 800fef0:	e053      	b.n	800ff9a <USB_EPStartXfer+0x17e2>
 800fef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800fef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	691b      	ldr	r3, [r3, #16]
 800fefe:	095b      	lsrs	r3, r3, #5
 800ff00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ff04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ff08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	691b      	ldr	r3, [r3, #16]
 800ff10:	f003 031f 	and.w	r3, r3, #31
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d104      	bne.n	800ff22 <USB_EPStartXfer+0x176a>
 800ff18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ff1c:	3b01      	subs	r3, #1
 800ff1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ff22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	029b      	lsls	r3, r3, #10
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff34:	b29a      	uxth	r2, r3
 800ff36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ff3a:	801a      	strh	r2, [r3, #0]
 800ff3c:	e02d      	b.n	800ff9a <USB_EPStartXfer+0x17e2>
 800ff3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ff42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	785b      	ldrb	r3, [r3, #1]
 800ff4a:	2b01      	cmp	r3, #1
 800ff4c:	d125      	bne.n	800ff9a <USB_EPStartXfer+0x17e2>
 800ff4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ff52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff5c:	b29b      	uxth	r3, r3
 800ff5e:	461a      	mov	r2, r3
 800ff60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ff64:	4413      	add	r3, r2
 800ff66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ff6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ff6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	011a      	lsls	r2, r3, #4
 800ff78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ff7c:	4413      	add	r3, r2
 800ff7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ff82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ff86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ff8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	691b      	ldr	r3, [r3, #16]
 800ff92:	b29a      	uxth	r2, r3
 800ff94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ff98:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ff9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ff9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	69db      	ldr	r3, [r3, #28]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f000 81fe 	beq.w	80103a8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ffac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ffb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ffba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	009b      	lsls	r3, r3, #2
 800ffc4:	4413      	add	r3, r2
 800ffc6:	881b      	ldrh	r3, [r3, #0]
 800ffc8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ffcc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800ffd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d005      	beq.n	800ffe4 <USB_EPStartXfer+0x182c>
 800ffd8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800ffdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d10d      	bne.n	8010000 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ffe4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800ffe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	f040 81db 	bne.w	80103a8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800fff2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800fff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	f040 81d4 	bne.w	80103a8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8010000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010004:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801000e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	4413      	add	r3, r2
 801001a:	881b      	ldrh	r3, [r3, #0]
 801001c:	b29b      	uxth	r3, r3
 801001e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010026:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 801002a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801002e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	781b      	ldrb	r3, [r3, #0]
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	441a      	add	r2, r3
 8010044:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8010048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801004c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010054:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010058:	b29b      	uxth	r3, r3
 801005a:	8013      	strh	r3, [r2, #0]
 801005c:	e1a4      	b.n	80103a8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801005e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	78db      	ldrb	r3, [r3, #3]
 801006a:	2b01      	cmp	r3, #1
 801006c:	f040 819a 	bne.w	80103a4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8010070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	699a      	ldr	r2, [r3, #24]
 801007c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	691b      	ldr	r3, [r3, #16]
 8010088:	429a      	cmp	r2, r3
 801008a:	d917      	bls.n	80100bc <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 801008c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	691b      	ldr	r3, [r3, #16]
 8010098:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 801009c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80100a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	699a      	ldr	r2, [r3, #24]
 80100a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80100ac:	1ad2      	subs	r2, r2, r3
 80100ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80100b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	619a      	str	r2, [r3, #24]
 80100ba:	e00e      	b.n	80100da <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80100bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80100c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	699b      	ldr	r3, [r3, #24]
 80100c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80100cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80100d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	2200      	movs	r2, #0
 80100d8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80100da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80100de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	785b      	ldrb	r3, [r3, #1]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d178      	bne.n	80101dc <USB_EPStartXfer+0x1a24>
 80100ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80100ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80100f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80100fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010106:	b29b      	uxth	r3, r3
 8010108:	461a      	mov	r2, r3
 801010a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801010e:	4413      	add	r3, r2
 8010110:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	011a      	lsls	r2, r3, #4
 8010122:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010126:	4413      	add	r3, r2
 8010128:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801012c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010134:	2b00      	cmp	r3, #0
 8010136:	d116      	bne.n	8010166 <USB_EPStartXfer+0x19ae>
 8010138:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801013c:	881b      	ldrh	r3, [r3, #0]
 801013e:	b29b      	uxth	r3, r3
 8010140:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010144:	b29a      	uxth	r2, r3
 8010146:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801014a:	801a      	strh	r2, [r3, #0]
 801014c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010150:	881b      	ldrh	r3, [r3, #0]
 8010152:	b29b      	uxth	r3, r3
 8010154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801015c:	b29a      	uxth	r2, r3
 801015e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010162:	801a      	strh	r2, [r3, #0]
 8010164:	e06b      	b.n	801023e <USB_EPStartXfer+0x1a86>
 8010166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801016a:	2b3e      	cmp	r3, #62	; 0x3e
 801016c:	d818      	bhi.n	80101a0 <USB_EPStartXfer+0x19e8>
 801016e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010172:	085b      	lsrs	r3, r3, #1
 8010174:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801017c:	f003 0301 	and.w	r3, r3, #1
 8010180:	2b00      	cmp	r3, #0
 8010182:	d004      	beq.n	801018e <USB_EPStartXfer+0x19d6>
 8010184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010188:	3301      	adds	r3, #1
 801018a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801018e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010192:	b29b      	uxth	r3, r3
 8010194:	029b      	lsls	r3, r3, #10
 8010196:	b29a      	uxth	r2, r3
 8010198:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801019c:	801a      	strh	r2, [r3, #0]
 801019e:	e04e      	b.n	801023e <USB_EPStartXfer+0x1a86>
 80101a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80101a4:	095b      	lsrs	r3, r3, #5
 80101a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80101aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80101ae:	f003 031f 	and.w	r3, r3, #31
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d104      	bne.n	80101c0 <USB_EPStartXfer+0x1a08>
 80101b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80101ba:	3b01      	subs	r3, #1
 80101bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80101c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	029b      	lsls	r3, r3, #10
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80101ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80101d2:	b29a      	uxth	r2, r3
 80101d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80101d8:	801a      	strh	r2, [r3, #0]
 80101da:	e030      	b.n	801023e <USB_EPStartXfer+0x1a86>
 80101dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80101e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	785b      	ldrb	r3, [r3, #1]
 80101e8:	2b01      	cmp	r3, #1
 80101ea:	d128      	bne.n	801023e <USB_EPStartXfer+0x1a86>
 80101ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80101f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80101fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80101fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010208:	b29b      	uxth	r3, r3
 801020a:	461a      	mov	r2, r3
 801020c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010210:	4413      	add	r3, r2
 8010212:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801021a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	781b      	ldrb	r3, [r3, #0]
 8010222:	011a      	lsls	r2, r3, #4
 8010224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010228:	4413      	add	r3, r2
 801022a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801022e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010236:	b29a      	uxth	r2, r3
 8010238:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801023c:	801a      	strh	r2, [r3, #0]
 801023e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010242:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801024c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	785b      	ldrb	r3, [r3, #1]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d178      	bne.n	801034e <USB_EPStartXfer+0x1b96>
 801025c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010260:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801026a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801026e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010278:	b29b      	uxth	r3, r3
 801027a:	461a      	mov	r2, r3
 801027c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010280:	4413      	add	r3, r2
 8010282:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801028a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	011a      	lsls	r2, r3, #4
 8010294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010298:	4413      	add	r3, r2
 801029a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801029e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80102a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d116      	bne.n	80102d8 <USB_EPStartXfer+0x1b20>
 80102aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80102ae:	881b      	ldrh	r3, [r3, #0]
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80102bc:	801a      	strh	r2, [r3, #0]
 80102be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80102c2:	881b      	ldrh	r3, [r3, #0]
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80102ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80102ce:	b29a      	uxth	r2, r3
 80102d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80102d4:	801a      	strh	r2, [r3, #0]
 80102d6:	e067      	b.n	80103a8 <USB_EPStartXfer+0x1bf0>
 80102d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80102dc:	2b3e      	cmp	r3, #62	; 0x3e
 80102de:	d818      	bhi.n	8010312 <USB_EPStartXfer+0x1b5a>
 80102e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80102e4:	085b      	lsrs	r3, r3, #1
 80102e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80102ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80102ee:	f003 0301 	and.w	r3, r3, #1
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d004      	beq.n	8010300 <USB_EPStartXfer+0x1b48>
 80102f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80102fa:	3301      	adds	r3, #1
 80102fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010300:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010304:	b29b      	uxth	r3, r3
 8010306:	029b      	lsls	r3, r3, #10
 8010308:	b29a      	uxth	r2, r3
 801030a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801030e:	801a      	strh	r2, [r3, #0]
 8010310:	e04a      	b.n	80103a8 <USB_EPStartXfer+0x1bf0>
 8010312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010316:	095b      	lsrs	r3, r3, #5
 8010318:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801031c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010320:	f003 031f 	and.w	r3, r3, #31
 8010324:	2b00      	cmp	r3, #0
 8010326:	d104      	bne.n	8010332 <USB_EPStartXfer+0x1b7a>
 8010328:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801032c:	3b01      	subs	r3, #1
 801032e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010336:	b29b      	uxth	r3, r3
 8010338:	029b      	lsls	r3, r3, #10
 801033a:	b29b      	uxth	r3, r3
 801033c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010344:	b29a      	uxth	r2, r3
 8010346:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801034a:	801a      	strh	r2, [r3, #0]
 801034c:	e02c      	b.n	80103a8 <USB_EPStartXfer+0x1bf0>
 801034e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	785b      	ldrb	r3, [r3, #1]
 801035a:	2b01      	cmp	r3, #1
 801035c:	d124      	bne.n	80103a8 <USB_EPStartXfer+0x1bf0>
 801035e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801036c:	b29b      	uxth	r3, r3
 801036e:	461a      	mov	r2, r3
 8010370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010374:	4413      	add	r3, r2
 8010376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801037a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801037e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	781b      	ldrb	r3, [r3, #0]
 8010386:	011a      	lsls	r2, r3, #4
 8010388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801038c:	4413      	add	r3, r2
 801038e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010392:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801039a:	b29a      	uxth	r2, r3
 801039c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103a0:	801a      	strh	r2, [r3, #0]
 80103a2:	e001      	b.n	80103a8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80103a4:	2301      	movs	r3, #1
 80103a6:	e03a      	b.n	801041e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80103a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80103ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80103b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	4413      	add	r3, r2
 80103c2:	881b      	ldrh	r3, [r3, #0]
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80103ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80103d2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80103d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80103da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80103de:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80103e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80103e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80103ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80103ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80103f2:	681a      	ldr	r2, [r3, #0]
 80103f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80103f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	009b      	lsls	r3, r3, #2
 8010402:	441a      	add	r2, r3
 8010404:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801040c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010418:	b29b      	uxth	r3, r3
 801041a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801041c:	2300      	movs	r3, #0
}
 801041e:	4618      	mov	r0, r3
 8010420:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010428:	b480      	push	{r7}
 801042a:	b085      	sub	sp, #20
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	785b      	ldrb	r3, [r3, #1]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d020      	beq.n	801047c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	009b      	lsls	r3, r3, #2
 8010442:	4413      	add	r3, r2
 8010444:	881b      	ldrh	r3, [r3, #0]
 8010446:	b29b      	uxth	r3, r3
 8010448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801044c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010450:	81bb      	strh	r3, [r7, #12]
 8010452:	89bb      	ldrh	r3, [r7, #12]
 8010454:	f083 0310 	eor.w	r3, r3, #16
 8010458:	81bb      	strh	r3, [r7, #12]
 801045a:	687a      	ldr	r2, [r7, #4]
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	009b      	lsls	r3, r3, #2
 8010462:	441a      	add	r2, r3
 8010464:	89bb      	ldrh	r3, [r7, #12]
 8010466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801046a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801046e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010476:	b29b      	uxth	r3, r3
 8010478:	8013      	strh	r3, [r2, #0]
 801047a:	e01f      	b.n	80104bc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801047c:	687a      	ldr	r2, [r7, #4]
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	009b      	lsls	r3, r3, #2
 8010484:	4413      	add	r3, r2
 8010486:	881b      	ldrh	r3, [r3, #0]
 8010488:	b29b      	uxth	r3, r3
 801048a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801048e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010492:	81fb      	strh	r3, [r7, #14]
 8010494:	89fb      	ldrh	r3, [r7, #14]
 8010496:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801049a:	81fb      	strh	r3, [r7, #14]
 801049c:	687a      	ldr	r2, [r7, #4]
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	009b      	lsls	r3, r3, #2
 80104a4:	441a      	add	r2, r3
 80104a6:	89fb      	ldrh	r3, [r7, #14]
 80104a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80104bc:	2300      	movs	r3, #0
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3714      	adds	r7, #20
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bc80      	pop	{r7}
 80104c6:	4770      	bx	lr

080104c8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80104c8:	b480      	push	{r7}
 80104ca:	b087      	sub	sp, #28
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	7b1b      	ldrb	r3, [r3, #12]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	f040 809d 	bne.w	8010616 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	785b      	ldrb	r3, [r3, #1]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d04c      	beq.n	801057e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80104e4:	687a      	ldr	r2, [r7, #4]
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	4413      	add	r3, r2
 80104ee:	881b      	ldrh	r3, [r3, #0]
 80104f0:	823b      	strh	r3, [r7, #16]
 80104f2:	8a3b      	ldrh	r3, [r7, #16]
 80104f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d01b      	beq.n	8010534 <USB_EPClearStall+0x6c>
 80104fc:	687a      	ldr	r2, [r7, #4]
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	4413      	add	r3, r2
 8010506:	881b      	ldrh	r3, [r3, #0]
 8010508:	b29b      	uxth	r3, r3
 801050a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801050e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010512:	81fb      	strh	r3, [r7, #14]
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	009b      	lsls	r3, r3, #2
 801051c:	441a      	add	r2, r3
 801051e:	89fb      	ldrh	r3, [r7, #14]
 8010520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801052c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010530:	b29b      	uxth	r3, r3
 8010532:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	78db      	ldrb	r3, [r3, #3]
 8010538:	2b01      	cmp	r3, #1
 801053a:	d06c      	beq.n	8010616 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801053c:	687a      	ldr	r2, [r7, #4]
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	009b      	lsls	r3, r3, #2
 8010544:	4413      	add	r3, r2
 8010546:	881b      	ldrh	r3, [r3, #0]
 8010548:	b29b      	uxth	r3, r3
 801054a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801054e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010552:	81bb      	strh	r3, [r7, #12]
 8010554:	89bb      	ldrh	r3, [r7, #12]
 8010556:	f083 0320 	eor.w	r3, r3, #32
 801055a:	81bb      	strh	r3, [r7, #12]
 801055c:	687a      	ldr	r2, [r7, #4]
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	441a      	add	r2, r3
 8010566:	89bb      	ldrh	r3, [r7, #12]
 8010568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801056c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010578:	b29b      	uxth	r3, r3
 801057a:	8013      	strh	r3, [r2, #0]
 801057c:	e04b      	b.n	8010616 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	009b      	lsls	r3, r3, #2
 8010586:	4413      	add	r3, r2
 8010588:	881b      	ldrh	r3, [r3, #0]
 801058a:	82fb      	strh	r3, [r7, #22]
 801058c:	8afb      	ldrh	r3, [r7, #22]
 801058e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010592:	2b00      	cmp	r3, #0
 8010594:	d01b      	beq.n	80105ce <USB_EPClearStall+0x106>
 8010596:	687a      	ldr	r2, [r7, #4]
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	009b      	lsls	r3, r3, #2
 801059e:	4413      	add	r3, r2
 80105a0:	881b      	ldrh	r3, [r3, #0]
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105ac:	82bb      	strh	r3, [r7, #20]
 80105ae:	687a      	ldr	r2, [r7, #4]
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	009b      	lsls	r3, r3, #2
 80105b6:	441a      	add	r2, r3
 80105b8:	8abb      	ldrh	r3, [r7, #20]
 80105ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80105c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80105ce:	687a      	ldr	r2, [r7, #4]
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	009b      	lsls	r3, r3, #2
 80105d6:	4413      	add	r3, r2
 80105d8:	881b      	ldrh	r3, [r3, #0]
 80105da:	b29b      	uxth	r3, r3
 80105dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80105e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105e4:	827b      	strh	r3, [r7, #18]
 80105e6:	8a7b      	ldrh	r3, [r7, #18]
 80105e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80105ec:	827b      	strh	r3, [r7, #18]
 80105ee:	8a7b      	ldrh	r3, [r7, #18]
 80105f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80105f4:	827b      	strh	r3, [r7, #18]
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	441a      	add	r2, r3
 8010600:	8a7b      	ldrh	r3, [r7, #18]
 8010602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801060a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801060e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010612:	b29b      	uxth	r3, r3
 8010614:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010616:	2300      	movs	r3, #0
}
 8010618:	4618      	mov	r0, r3
 801061a:	371c      	adds	r7, #28
 801061c:	46bd      	mov	sp, r7
 801061e:	bc80      	pop	{r7}
 8010620:	4770      	bx	lr

08010622 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010622:	b480      	push	{r7}
 8010624:	b083      	sub	sp, #12
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
 801062a:	460b      	mov	r3, r1
 801062c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801062e:	78fb      	ldrb	r3, [r7, #3]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d103      	bne.n	801063c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2280      	movs	r2, #128	; 0x80
 8010638:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 801063c:	2300      	movs	r3, #0
}
 801063e:	4618      	mov	r0, r3
 8010640:	370c      	adds	r7, #12
 8010642:	46bd      	mov	sp, r7
 8010644:	bc80      	pop	{r7}
 8010646:	4770      	bx	lr

08010648 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8010650:	2300      	movs	r3, #0
}
 8010652:	4618      	mov	r0, r3
 8010654:	370c      	adds	r7, #12
 8010656:	46bd      	mov	sp, r7
 8010658:	bc80      	pop	{r7}
 801065a:	4770      	bx	lr

0801065c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8010664:	2300      	movs	r3, #0
}
 8010666:	4618      	mov	r0, r3
 8010668:	370c      	adds	r7, #12
 801066a:	46bd      	mov	sp, r7
 801066c:	bc80      	pop	{r7}
 801066e:	4770      	bx	lr

08010670 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8010670:	b480      	push	{r7}
 8010672:	b085      	sub	sp, #20
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801067e:	b29b      	uxth	r3, r3
 8010680:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010682:	68fb      	ldr	r3, [r7, #12]
}
 8010684:	4618      	mov	r0, r3
 8010686:	3714      	adds	r7, #20
 8010688:	46bd      	mov	sp, r7
 801068a:	bc80      	pop	{r7}
 801068c:	4770      	bx	lr

0801068e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 801068e:	b480      	push	{r7}
 8010690:	b083      	sub	sp, #12
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]
 8010696:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8010698:	2300      	movs	r3, #0
}
 801069a:	4618      	mov	r0, r3
 801069c:	370c      	adds	r7, #12
 801069e:	46bd      	mov	sp, r7
 80106a0:	bc80      	pop	{r7}
 80106a2:	4770      	bx	lr

080106a4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b08d      	sub	sp, #52	; 0x34
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	60b9      	str	r1, [r7, #8]
 80106ae:	4611      	mov	r1, r2
 80106b0:	461a      	mov	r2, r3
 80106b2:	460b      	mov	r3, r1
 80106b4:	80fb      	strh	r3, [r7, #6]
 80106b6:	4613      	mov	r3, r2
 80106b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80106ba:	88bb      	ldrh	r3, [r7, #4]
 80106bc:	3301      	adds	r3, #1
 80106be:	085b      	lsrs	r3, r3, #1
 80106c0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80106ca:	88fb      	ldrh	r3, [r7, #6]
 80106cc:	005a      	lsls	r2, r3, #1
 80106ce:	69fb      	ldr	r3, [r7, #28]
 80106d0:	4413      	add	r3, r2
 80106d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80106d6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80106d8:	6a3b      	ldr	r3, [r7, #32]
 80106da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106dc:	e01e      	b.n	801071c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80106de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80106e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e6:	3301      	adds	r3, #1
 80106e8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80106ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	b29b      	uxth	r3, r3
 80106f0:	021b      	lsls	r3, r3, #8
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	461a      	mov	r2, r3
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	4313      	orrs	r3, r2
 80106fa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	b29a      	uxth	r2, r3
 8010700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010702:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8010704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010706:	3302      	adds	r3, #2
 8010708:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 801070a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801070c:	3302      	adds	r3, #2
 801070e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8010710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010712:	3301      	adds	r3, #1
 8010714:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8010716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010718:	3b01      	subs	r3, #1
 801071a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801071c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071e:	2b00      	cmp	r3, #0
 8010720:	d1dd      	bne.n	80106de <USB_WritePMA+0x3a>
  }
}
 8010722:	bf00      	nop
 8010724:	bf00      	nop
 8010726:	3734      	adds	r7, #52	; 0x34
 8010728:	46bd      	mov	sp, r7
 801072a:	bc80      	pop	{r7}
 801072c:	4770      	bx	lr

0801072e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801072e:	b480      	push	{r7}
 8010730:	b08b      	sub	sp, #44	; 0x2c
 8010732:	af00      	add	r7, sp, #0
 8010734:	60f8      	str	r0, [r7, #12]
 8010736:	60b9      	str	r1, [r7, #8]
 8010738:	4611      	mov	r1, r2
 801073a:	461a      	mov	r2, r3
 801073c:	460b      	mov	r3, r1
 801073e:	80fb      	strh	r3, [r7, #6]
 8010740:	4613      	mov	r3, r2
 8010742:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8010744:	88bb      	ldrh	r3, [r7, #4]
 8010746:	085b      	lsrs	r3, r3, #1
 8010748:	b29b      	uxth	r3, r3
 801074a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010754:	88fb      	ldrh	r3, [r7, #6]
 8010756:	005a      	lsls	r2, r3, #1
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	4413      	add	r3, r2
 801075c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010760:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8010762:	69bb      	ldr	r3, [r7, #24]
 8010764:	627b      	str	r3, [r7, #36]	; 0x24
 8010766:	e01b      	b.n	80107a0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8010768:	6a3b      	ldr	r3, [r7, #32]
 801076a:	881b      	ldrh	r3, [r3, #0]
 801076c:	b29b      	uxth	r3, r3
 801076e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010770:	6a3b      	ldr	r3, [r7, #32]
 8010772:	3302      	adds	r3, #2
 8010774:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	b2da      	uxtb	r2, r3
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	3301      	adds	r3, #1
 8010782:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	0a1b      	lsrs	r3, r3, #8
 8010788:	b2da      	uxtb	r2, r3
 801078a:	69fb      	ldr	r3, [r7, #28]
 801078c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	3301      	adds	r3, #1
 8010792:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8010794:	6a3b      	ldr	r3, [r7, #32]
 8010796:	3302      	adds	r3, #2
 8010798:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 801079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079c:	3b01      	subs	r3, #1
 801079e:	627b      	str	r3, [r7, #36]	; 0x24
 80107a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d1e0      	bne.n	8010768 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80107a6:	88bb      	ldrh	r3, [r7, #4]
 80107a8:	f003 0301 	and.w	r3, r3, #1
 80107ac:	b29b      	uxth	r3, r3
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d007      	beq.n	80107c2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80107b2:	6a3b      	ldr	r3, [r7, #32]
 80107b4:	881b      	ldrh	r3, [r3, #0]
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	b2da      	uxtb	r2, r3
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	701a      	strb	r2, [r3, #0]
  }
}
 80107c2:	bf00      	nop
 80107c4:	372c      	adds	r7, #44	; 0x2c
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bc80      	pop	{r7}
 80107ca:	4770      	bx	lr

080107cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	460b      	mov	r3, r1
 80107d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80107d8:	2300      	movs	r3, #0
 80107da:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	7c1b      	ldrb	r3, [r3, #16]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d115      	bne.n	8010810 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80107e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107e8:	2202      	movs	r2, #2
 80107ea:	2181      	movs	r1, #129	; 0x81
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f001 fe30 	bl	8012452 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2201      	movs	r2, #1
 80107f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80107f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107fc:	2202      	movs	r2, #2
 80107fe:	2101      	movs	r1, #1
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f001 fe26 	bl	8012452 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2201      	movs	r2, #1
 801080a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 801080e:	e012      	b.n	8010836 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010810:	2340      	movs	r3, #64	; 0x40
 8010812:	2202      	movs	r2, #2
 8010814:	2181      	movs	r1, #129	; 0x81
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f001 fe1b 	bl	8012452 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2201      	movs	r2, #1
 8010820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010822:	2340      	movs	r3, #64	; 0x40
 8010824:	2202      	movs	r2, #2
 8010826:	2101      	movs	r1, #1
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f001 fe12 	bl	8012452 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2201      	movs	r2, #1
 8010832:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010836:	2308      	movs	r3, #8
 8010838:	2203      	movs	r2, #3
 801083a:	2182      	movs	r1, #130	; 0x82
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f001 fe08 	bl	8012452 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2201      	movs	r2, #1
 8010846:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010848:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801084c:	f001 ff28 	bl	80126a0 <USBD_static_malloc>
 8010850:	4602      	mov	r2, r0
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801085e:	2b00      	cmp	r3, #0
 8010860:	d102      	bne.n	8010868 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8010862:	2301      	movs	r3, #1
 8010864:	73fb      	strb	r3, [r7, #15]
 8010866:	e026      	b.n	80108b6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801086e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	2200      	movs	r2, #0
 801087e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	2200      	movs	r2, #0
 8010886:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	7c1b      	ldrb	r3, [r3, #16]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d109      	bne.n	80108a6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010898:	f44f 7300 	mov.w	r3, #512	; 0x200
 801089c:	2101      	movs	r1, #1
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f001 fec8 	bl	8012634 <USBD_LL_PrepareReceive>
 80108a4:	e007      	b.n	80108b6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80108ac:	2340      	movs	r3, #64	; 0x40
 80108ae:	2101      	movs	r1, #1
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f001 febf 	bl	8012634 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80108b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3710      	adds	r7, #16
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	460b      	mov	r3, r1
 80108ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80108cc:	2300      	movs	r3, #0
 80108ce:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80108d0:	2181      	movs	r1, #129	; 0x81
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f001 fde3 	bl	801249e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2200      	movs	r2, #0
 80108dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80108de:	2101      	movs	r1, #1
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f001 fddc 	bl	801249e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2200      	movs	r2, #0
 80108ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80108ee:	2182      	movs	r1, #130	; 0x82
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f001 fdd4 	bl	801249e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010902:	2b00      	cmp	r3, #0
 8010904:	d00e      	beq.n	8010924 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010916:	4618      	mov	r0, r3
 8010918:	f001 fece 	bl	80126b8 <USBD_static_free>
    pdev->pClassData = NULL;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2200      	movs	r2, #0
 8010920:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8010924:	7bfb      	ldrb	r3, [r7, #15]
}
 8010926:	4618      	mov	r0, r3
 8010928:	3710      	adds	r7, #16
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801092e:	b580      	push	{r7, lr}
 8010930:	b086      	sub	sp, #24
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
 8010936:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801093e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010940:	2300      	movs	r3, #0
 8010942:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010944:	2300      	movs	r3, #0
 8010946:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8010948:	2300      	movs	r3, #0
 801094a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010954:	2b00      	cmp	r3, #0
 8010956:	d039      	beq.n	80109cc <USBD_CDC_Setup+0x9e>
 8010958:	2b20      	cmp	r3, #32
 801095a:	d17f      	bne.n	8010a5c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	88db      	ldrh	r3, [r3, #6]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d029      	beq.n	80109b8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	b25b      	sxtb	r3, r3
 801096a:	2b00      	cmp	r3, #0
 801096c:	da11      	bge.n	8010992 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010974:	689b      	ldr	r3, [r3, #8]
 8010976:	683a      	ldr	r2, [r7, #0]
 8010978:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801097a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801097c:	683a      	ldr	r2, [r7, #0]
 801097e:	88d2      	ldrh	r2, [r2, #6]
 8010980:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8010982:	6939      	ldr	r1, [r7, #16]
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	88db      	ldrh	r3, [r3, #6]
 8010988:	461a      	mov	r2, r3
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f001 f9d9 	bl	8011d42 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8010990:	e06b      	b.n	8010a6a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	785a      	ldrb	r2, [r3, #1]
 8010996:	693b      	ldr	r3, [r7, #16]
 8010998:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	88db      	ldrh	r3, [r3, #6]
 80109a0:	b2da      	uxtb	r2, r3
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80109a8:	6939      	ldr	r1, [r7, #16]
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	88db      	ldrh	r3, [r3, #6]
 80109ae:	461a      	mov	r2, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f001 f9f4 	bl	8011d9e <USBD_CtlPrepareRx>
      break;
 80109b6:	e058      	b.n	8010a6a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109be:	689b      	ldr	r3, [r3, #8]
 80109c0:	683a      	ldr	r2, [r7, #0]
 80109c2:	7850      	ldrb	r0, [r2, #1]
 80109c4:	2200      	movs	r2, #0
 80109c6:	6839      	ldr	r1, [r7, #0]
 80109c8:	4798      	blx	r3
      break;
 80109ca:	e04e      	b.n	8010a6a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	785b      	ldrb	r3, [r3, #1]
 80109d0:	2b0b      	cmp	r3, #11
 80109d2:	d02e      	beq.n	8010a32 <USBD_CDC_Setup+0x104>
 80109d4:	2b0b      	cmp	r3, #11
 80109d6:	dc38      	bgt.n	8010a4a <USBD_CDC_Setup+0x11c>
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d002      	beq.n	80109e2 <USBD_CDC_Setup+0xb4>
 80109dc:	2b0a      	cmp	r3, #10
 80109de:	d014      	beq.n	8010a0a <USBD_CDC_Setup+0xdc>
 80109e0:	e033      	b.n	8010a4a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109e8:	2b03      	cmp	r3, #3
 80109ea:	d107      	bne.n	80109fc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80109ec:	f107 030c 	add.w	r3, r7, #12
 80109f0:	2202      	movs	r2, #2
 80109f2:	4619      	mov	r1, r3
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f001 f9a4 	bl	8011d42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80109fa:	e02e      	b.n	8010a5a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80109fc:	6839      	ldr	r1, [r7, #0]
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f001 f935 	bl	8011c6e <USBD_CtlError>
            ret = USBD_FAIL;
 8010a04:	2302      	movs	r3, #2
 8010a06:	75fb      	strb	r3, [r7, #23]
          break;
 8010a08:	e027      	b.n	8010a5a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a10:	2b03      	cmp	r3, #3
 8010a12:	d107      	bne.n	8010a24 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8010a14:	f107 030f 	add.w	r3, r7, #15
 8010a18:	2201      	movs	r2, #1
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f001 f990 	bl	8011d42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010a22:	e01a      	b.n	8010a5a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8010a24:	6839      	ldr	r1, [r7, #0]
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f001 f921 	bl	8011c6e <USBD_CtlError>
            ret = USBD_FAIL;
 8010a2c:	2302      	movs	r3, #2
 8010a2e:	75fb      	strb	r3, [r7, #23]
          break;
 8010a30:	e013      	b.n	8010a5a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a38:	2b03      	cmp	r3, #3
 8010a3a:	d00d      	beq.n	8010a58 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8010a3c:	6839      	ldr	r1, [r7, #0]
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f001 f915 	bl	8011c6e <USBD_CtlError>
            ret = USBD_FAIL;
 8010a44:	2302      	movs	r3, #2
 8010a46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010a48:	e006      	b.n	8010a58 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8010a4a:	6839      	ldr	r1, [r7, #0]
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f001 f90e 	bl	8011c6e <USBD_CtlError>
          ret = USBD_FAIL;
 8010a52:	2302      	movs	r3, #2
 8010a54:	75fb      	strb	r3, [r7, #23]
          break;
 8010a56:	e000      	b.n	8010a5a <USBD_CDC_Setup+0x12c>
          break;
 8010a58:	bf00      	nop
      }
      break;
 8010a5a:	e006      	b.n	8010a6a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010a5c:	6839      	ldr	r1, [r7, #0]
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f001 f905 	bl	8011c6e <USBD_CtlError>
      ret = USBD_FAIL;
 8010a64:	2302      	movs	r3, #2
 8010a66:	75fb      	strb	r3, [r7, #23]
      break;
 8010a68:	bf00      	nop
  }

  return ret;
 8010a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3718      	adds	r7, #24
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}

08010a74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b084      	sub	sp, #16
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	460b      	mov	r3, r1
 8010a7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a86:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a8e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d03a      	beq.n	8010b10 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010a9a:	78fa      	ldrb	r2, [r7, #3]
 8010a9c:	6879      	ldr	r1, [r7, #4]
 8010a9e:	4613      	mov	r3, r2
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	4413      	add	r3, r2
 8010aa4:	009b      	lsls	r3, r3, #2
 8010aa6:	440b      	add	r3, r1
 8010aa8:	331c      	adds	r3, #28
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d029      	beq.n	8010b04 <USBD_CDC_DataIn+0x90>
 8010ab0:	78fa      	ldrb	r2, [r7, #3]
 8010ab2:	6879      	ldr	r1, [r7, #4]
 8010ab4:	4613      	mov	r3, r2
 8010ab6:	009b      	lsls	r3, r3, #2
 8010ab8:	4413      	add	r3, r2
 8010aba:	009b      	lsls	r3, r3, #2
 8010abc:	440b      	add	r3, r1
 8010abe:	331c      	adds	r3, #28
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	78f9      	ldrb	r1, [r7, #3]
 8010ac4:	68b8      	ldr	r0, [r7, #8]
 8010ac6:	460b      	mov	r3, r1
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	440b      	add	r3, r1
 8010acc:	00db      	lsls	r3, r3, #3
 8010ace:	4403      	add	r3, r0
 8010ad0:	3338      	adds	r3, #56	; 0x38
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	fbb2 f1f3 	udiv	r1, r2, r3
 8010ad8:	fb01 f303 	mul.w	r3, r1, r3
 8010adc:	1ad3      	subs	r3, r2, r3
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d110      	bne.n	8010b04 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8010ae2:	78fa      	ldrb	r2, [r7, #3]
 8010ae4:	6879      	ldr	r1, [r7, #4]
 8010ae6:	4613      	mov	r3, r2
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	4413      	add	r3, r2
 8010aec:	009b      	lsls	r3, r3, #2
 8010aee:	440b      	add	r3, r1
 8010af0:	331c      	adds	r3, #28
 8010af2:	2200      	movs	r2, #0
 8010af4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010af6:	78f9      	ldrb	r1, [r7, #3]
 8010af8:	2300      	movs	r3, #0
 8010afa:	2200      	movs	r2, #0
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f001 fd76 	bl	80125ee <USBD_LL_Transmit>
 8010b02:	e003      	b.n	8010b0c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	2200      	movs	r2, #0
 8010b08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	e000      	b.n	8010b12 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8010b10:	2302      	movs	r3, #2
  }
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b084      	sub	sp, #16
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
 8010b22:	460b      	mov	r3, r1
 8010b24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b2c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010b2e:	78fb      	ldrb	r3, [r7, #3]
 8010b30:	4619      	mov	r1, r3
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f001 fda1 	bl	801267a <USBD_LL_GetRxDataSize>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d00d      	beq.n	8010b66 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b50:	68db      	ldr	r3, [r3, #12]
 8010b52:	68fa      	ldr	r2, [r7, #12]
 8010b54:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010b58:	68fa      	ldr	r2, [r7, #12]
 8010b5a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010b5e:	4611      	mov	r1, r2
 8010b60:	4798      	blx	r3

    return USBD_OK;
 8010b62:	2300      	movs	r3, #0
 8010b64:	e000      	b.n	8010b68 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8010b66:	2302      	movs	r3, #2
  }
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3710      	adds	r7, #16
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b7e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d015      	beq.n	8010bb6 <USBD_CDC_EP0_RxReady+0x46>
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010b90:	2bff      	cmp	r3, #255	; 0xff
 8010b92:	d010      	beq.n	8010bb6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b9a:	689b      	ldr	r3, [r3, #8]
 8010b9c:	68fa      	ldr	r2, [r7, #12]
 8010b9e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8010ba2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010ba4:	68fa      	ldr	r2, [r7, #12]
 8010ba6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010baa:	b292      	uxth	r2, r2
 8010bac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	22ff      	movs	r2, #255	; 0xff
 8010bb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8010bb6:	2300      	movs	r3, #0
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3710      	adds	r7, #16
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b083      	sub	sp, #12
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2243      	movs	r2, #67	; 0x43
 8010bcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8010bce:	4b03      	ldr	r3, [pc, #12]	; (8010bdc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	370c      	adds	r7, #12
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bc80      	pop	{r7}
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	20000894 	.word	0x20000894

08010be0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b083      	sub	sp, #12
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2243      	movs	r2, #67	; 0x43
 8010bec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8010bee:	4b03      	ldr	r3, [pc, #12]	; (8010bfc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	370c      	adds	r7, #12
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bc80      	pop	{r7}
 8010bf8:	4770      	bx	lr
 8010bfa:	bf00      	nop
 8010bfc:	20000850 	.word	0x20000850

08010c00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b083      	sub	sp, #12
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2243      	movs	r2, #67	; 0x43
 8010c0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8010c0e:	4b03      	ldr	r3, [pc, #12]	; (8010c1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	370c      	adds	r7, #12
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bc80      	pop	{r7}
 8010c18:	4770      	bx	lr
 8010c1a:	bf00      	nop
 8010c1c:	200008d8 	.word	0x200008d8

08010c20 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	220a      	movs	r2, #10
 8010c2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8010c2e:	4b03      	ldr	r3, [pc, #12]	; (8010c3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	370c      	adds	r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bc80      	pop	{r7}
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop
 8010c3c:	2000080c 	.word	0x2000080c

08010c40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b085      	sub	sp, #20
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8010c4a:	2302      	movs	r3, #2
 8010c4c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d005      	beq.n	8010c60 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	683a      	ldr	r2, [r7, #0]
 8010c58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	3714      	adds	r7, #20
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bc80      	pop	{r7}
 8010c6a:	4770      	bx	lr

08010c6c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8010c6c:	b480      	push	{r7}
 8010c6e:	b087      	sub	sp, #28
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	60f8      	str	r0, [r7, #12]
 8010c74:	60b9      	str	r1, [r7, #8]
 8010c76:	4613      	mov	r3, r2
 8010c78:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c80:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	68ba      	ldr	r2, [r7, #8]
 8010c86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010c8a:	88fa      	ldrh	r2, [r7, #6]
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8010c92:	2300      	movs	r3, #0
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	371c      	adds	r7, #28
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bc80      	pop	{r7}
 8010c9c:	4770      	bx	lr

08010c9e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8010c9e:	b480      	push	{r7}
 8010ca0:	b085      	sub	sp, #20
 8010ca2:	af00      	add	r7, sp, #0
 8010ca4:	6078      	str	r0, [r7, #4]
 8010ca6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	683a      	ldr	r2, [r7, #0]
 8010cb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8010cb8:	2300      	movs	r3, #0
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3714      	adds	r7, #20
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bc80      	pop	{r7}
 8010cc2:	4770      	bx	lr

08010cc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cd2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d017      	beq.n	8010d0e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	7c1b      	ldrb	r3, [r3, #16]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d109      	bne.n	8010cfa <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cf0:	2101      	movs	r1, #1
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f001 fc9e 	bl	8012634 <USBD_LL_PrepareReceive>
 8010cf8:	e007      	b.n	8010d0a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d00:	2340      	movs	r3, #64	; 0x40
 8010d02:	2101      	movs	r1, #1
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f001 fc95 	bl	8012634 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	e000      	b.n	8010d10 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8010d0e:	2302      	movs	r3, #2
  }
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3710      	adds	r7, #16
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b084      	sub	sp, #16
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	60f8      	str	r0, [r7, #12]
 8010d20:	60b9      	str	r1, [r7, #8]
 8010d22:	4613      	mov	r3, r2
 8010d24:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d101      	bne.n	8010d30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010d2c:	2302      	movs	r3, #2
 8010d2e:	e01a      	b.n	8010d66 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d003      	beq.n	8010d42 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d003      	beq.n	8010d50 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	68ba      	ldr	r2, [r7, #8]
 8010d4c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	2201      	movs	r2, #1
 8010d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	79fa      	ldrb	r2, [r7, #7]
 8010d5c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f001 fb02 	bl	8012368 <USBD_LL_Init>

  return USBD_OK;
 8010d64:	2300      	movs	r3, #0
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3710      	adds	r7, #16
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}

08010d6e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010d6e:	b480      	push	{r7}
 8010d70:	b085      	sub	sp, #20
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	6078      	str	r0, [r7, #4]
 8010d76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d006      	beq.n	8010d90 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	683a      	ldr	r2, [r7, #0]
 8010d86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	73fb      	strb	r3, [r7, #15]
 8010d8e:	e001      	b.n	8010d94 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8010d90:	2302      	movs	r3, #2
 8010d92:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3714      	adds	r7, #20
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bc80      	pop	{r7}
 8010d9e:	4770      	bx	lr

08010da0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f001 fb37 	bl	801241c <USBD_LL_Start>

  return USBD_OK;
 8010dae:	2300      	movs	r3, #0
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3708      	adds	r7, #8
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}

08010db8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010dc0:	2300      	movs	r3, #0
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	370c      	adds	r7, #12
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bc80      	pop	{r7}
 8010dca:	4770      	bx	lr

08010dcc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010dd8:	2302      	movs	r3, #2
 8010dda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d00c      	beq.n	8010e00 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	78fa      	ldrb	r2, [r7, #3]
 8010df0:	4611      	mov	r1, r2
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	4798      	blx	r3
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d101      	bne.n	8010e00 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3710      	adds	r7, #16
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b082      	sub	sp, #8
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
 8010e12:	460b      	mov	r3, r1
 8010e14:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	78fa      	ldrb	r2, [r7, #3]
 8010e20:	4611      	mov	r1, r2
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	4798      	blx	r3

  return USBD_OK;
 8010e26:	2300      	movs	r3, #0
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3708      	adds	r7, #8
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010e40:	6839      	ldr	r1, [r7, #0]
 8010e42:	4618      	mov	r0, r3
 8010e44:	f000 fed7 	bl	8011bf6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8010e56:	461a      	mov	r2, r3
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8010e64:	f003 031f 	and.w	r3, r3, #31
 8010e68:	2b02      	cmp	r3, #2
 8010e6a:	d016      	beq.n	8010e9a <USBD_LL_SetupStage+0x6a>
 8010e6c:	2b02      	cmp	r3, #2
 8010e6e:	d81c      	bhi.n	8010eaa <USBD_LL_SetupStage+0x7a>
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d002      	beq.n	8010e7a <USBD_LL_SetupStage+0x4a>
 8010e74:	2b01      	cmp	r3, #1
 8010e76:	d008      	beq.n	8010e8a <USBD_LL_SetupStage+0x5a>
 8010e78:	e017      	b.n	8010eaa <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010e80:	4619      	mov	r1, r3
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f000 f9ca 	bl	801121c <USBD_StdDevReq>
      break;
 8010e88:	e01a      	b.n	8010ec0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010e90:	4619      	mov	r1, r3
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f000 fa2c 	bl	80112f0 <USBD_StdItfReq>
      break;
 8010e98:	e012      	b.n	8010ec0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f000 fa6c 	bl	8011380 <USBD_StdEPReq>
      break;
 8010ea8:	e00a      	b.n	8010ec0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8010eb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f001 fb0f 	bl	80124dc <USBD_LL_StallEP>
      break;
 8010ebe:	bf00      	nop
  }

  return USBD_OK;
 8010ec0:	2300      	movs	r3, #0
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b086      	sub	sp, #24
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	60f8      	str	r0, [r7, #12]
 8010ed2:	460b      	mov	r3, r1
 8010ed4:	607a      	str	r2, [r7, #4]
 8010ed6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8010ed8:	7afb      	ldrb	r3, [r7, #11]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d14b      	bne.n	8010f76 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010ee4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010eec:	2b03      	cmp	r3, #3
 8010eee:	d134      	bne.n	8010f5a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	68da      	ldr	r2, [r3, #12]
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	691b      	ldr	r3, [r3, #16]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d919      	bls.n	8010f30 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	68da      	ldr	r2, [r3, #12]
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	691b      	ldr	r3, [r3, #16]
 8010f04:	1ad2      	subs	r2, r2, r3
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	68da      	ldr	r2, [r3, #12]
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d203      	bcs.n	8010f1e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	e002      	b.n	8010f24 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8010f22:	b29b      	uxth	r3, r3
 8010f24:	461a      	mov	r2, r3
 8010f26:	6879      	ldr	r1, [r7, #4]
 8010f28:	68f8      	ldr	r0, [r7, #12]
 8010f2a:	f000 ff56 	bl	8011dda <USBD_CtlContinueRx>
 8010f2e:	e038      	b.n	8010fa2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f36:	691b      	ldr	r3, [r3, #16]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d00a      	beq.n	8010f52 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010f42:	2b03      	cmp	r3, #3
 8010f44:	d105      	bne.n	8010f52 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f4c:	691b      	ldr	r3, [r3, #16]
 8010f4e:	68f8      	ldr	r0, [r7, #12]
 8010f50:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8010f52:	68f8      	ldr	r0, [r7, #12]
 8010f54:	f000 ff53 	bl	8011dfe <USBD_CtlSendStatus>
 8010f58:	e023      	b.n	8010fa2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010f60:	2b05      	cmp	r3, #5
 8010f62:	d11e      	bne.n	8010fa2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2200      	movs	r2, #0
 8010f68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8010f6c:	2100      	movs	r1, #0
 8010f6e:	68f8      	ldr	r0, [r7, #12]
 8010f70:	f001 fab4 	bl	80124dc <USBD_LL_StallEP>
 8010f74:	e015      	b.n	8010fa2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f7c:	699b      	ldr	r3, [r3, #24]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d00d      	beq.n	8010f9e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8010f88:	2b03      	cmp	r3, #3
 8010f8a:	d108      	bne.n	8010f9e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010f92:	699b      	ldr	r3, [r3, #24]
 8010f94:	7afa      	ldrb	r2, [r7, #11]
 8010f96:	4611      	mov	r1, r2
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	4798      	blx	r3
 8010f9c:	e001      	b.n	8010fa2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010f9e:	2302      	movs	r3, #2
 8010fa0:	e000      	b.n	8010fa4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8010fa2:	2300      	movs	r3, #0
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3718      	adds	r7, #24
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b086      	sub	sp, #24
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	460b      	mov	r3, r1
 8010fb6:	607a      	str	r2, [r7, #4]
 8010fb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8010fba:	7afb      	ldrb	r3, [r7, #11]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d17f      	bne.n	80110c0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	3314      	adds	r3, #20
 8010fc4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010fcc:	2b02      	cmp	r3, #2
 8010fce:	d15c      	bne.n	801108a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	68da      	ldr	r2, [r3, #12]
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	691b      	ldr	r3, [r3, #16]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d915      	bls.n	8011008 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	68da      	ldr	r2, [r3, #12]
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	691b      	ldr	r3, [r3, #16]
 8010fe4:	1ad2      	subs	r2, r2, r3
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	68db      	ldr	r3, [r3, #12]
 8010fee:	b29b      	uxth	r3, r3
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	6879      	ldr	r1, [r7, #4]
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f000 fec0 	bl	8011d7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	2100      	movs	r1, #0
 8011000:	68f8      	ldr	r0, [r7, #12]
 8011002:	f001 fb17 	bl	8012634 <USBD_LL_PrepareReceive>
 8011006:	e04e      	b.n	80110a6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	689b      	ldr	r3, [r3, #8]
 801100c:	697a      	ldr	r2, [r7, #20]
 801100e:	6912      	ldr	r2, [r2, #16]
 8011010:	fbb3 f1f2 	udiv	r1, r3, r2
 8011014:	fb01 f202 	mul.w	r2, r1, r2
 8011018:	1a9b      	subs	r3, r3, r2
 801101a:	2b00      	cmp	r3, #0
 801101c:	d11c      	bne.n	8011058 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	689a      	ldr	r2, [r3, #8]
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011026:	429a      	cmp	r2, r3
 8011028:	d316      	bcc.n	8011058 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	689a      	ldr	r2, [r3, #8]
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011034:	429a      	cmp	r2, r3
 8011036:	d20f      	bcs.n	8011058 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011038:	2200      	movs	r2, #0
 801103a:	2100      	movs	r1, #0
 801103c:	68f8      	ldr	r0, [r7, #12]
 801103e:	f000 fe9c 	bl	8011d7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2200      	movs	r2, #0
 8011046:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801104a:	2300      	movs	r3, #0
 801104c:	2200      	movs	r2, #0
 801104e:	2100      	movs	r1, #0
 8011050:	68f8      	ldr	r0, [r7, #12]
 8011052:	f001 faef 	bl	8012634 <USBD_LL_PrepareReceive>
 8011056:	e026      	b.n	80110a6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801105e:	68db      	ldr	r3, [r3, #12]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d00a      	beq.n	801107a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801106a:	2b03      	cmp	r3, #3
 801106c:	d105      	bne.n	801107a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011074:	68db      	ldr	r3, [r3, #12]
 8011076:	68f8      	ldr	r0, [r7, #12]
 8011078:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801107a:	2180      	movs	r1, #128	; 0x80
 801107c:	68f8      	ldr	r0, [r7, #12]
 801107e:	f001 fa2d 	bl	80124dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8011082:	68f8      	ldr	r0, [r7, #12]
 8011084:	f000 fece 	bl	8011e24 <USBD_CtlReceiveStatus>
 8011088:	e00d      	b.n	80110a6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011090:	2b04      	cmp	r3, #4
 8011092:	d004      	beq.n	801109e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801109a:	2b00      	cmp	r3, #0
 801109c:	d103      	bne.n	80110a6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801109e:	2180      	movs	r1, #128	; 0x80
 80110a0:	68f8      	ldr	r0, [r7, #12]
 80110a2:	f001 fa1b 	bl	80124dc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d11d      	bne.n	80110ec <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80110b0:	68f8      	ldr	r0, [r7, #12]
 80110b2:	f7ff fe81 	bl	8010db8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	2200      	movs	r2, #0
 80110ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80110be:	e015      	b.n	80110ec <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110c6:	695b      	ldr	r3, [r3, #20]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d00d      	beq.n	80110e8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80110d2:	2b03      	cmp	r3, #3
 80110d4:	d108      	bne.n	80110e8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110dc:	695b      	ldr	r3, [r3, #20]
 80110de:	7afa      	ldrb	r2, [r7, #11]
 80110e0:	4611      	mov	r1, r2
 80110e2:	68f8      	ldr	r0, [r7, #12]
 80110e4:	4798      	blx	r3
 80110e6:	e001      	b.n	80110ec <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80110e8:	2302      	movs	r3, #2
 80110ea:	e000      	b.n	80110ee <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80110ec:	2300      	movs	r3, #0
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3718      	adds	r7, #24
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}

080110f6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80110f6:	b580      	push	{r7, lr}
 80110f8:	b082      	sub	sp, #8
 80110fa:	af00      	add	r7, sp, #0
 80110fc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80110fe:	2340      	movs	r3, #64	; 0x40
 8011100:	2200      	movs	r2, #0
 8011102:	2100      	movs	r1, #0
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f001 f9a4 	bl	8012452 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2201      	movs	r2, #1
 801110e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2240      	movs	r2, #64	; 0x40
 8011116:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801111a:	2340      	movs	r3, #64	; 0x40
 801111c:	2200      	movs	r2, #0
 801111e:	2180      	movs	r1, #128	; 0x80
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f001 f996 	bl	8012452 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2201      	movs	r2, #1
 801112a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2240      	movs	r2, #64	; 0x40
 8011130:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2201      	movs	r2, #1
 8011136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	2200      	movs	r2, #0
 801113e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2200      	movs	r2, #0
 8011146:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2200      	movs	r2, #0
 801114c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011156:	2b00      	cmp	r3, #0
 8011158:	d009      	beq.n	801116e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	6852      	ldr	r2, [r2, #4]
 8011166:	b2d2      	uxtb	r2, r2
 8011168:	4611      	mov	r1, r2
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	4798      	blx	r3
  }

  return USBD_OK;
 801116e:	2300      	movs	r3, #0
}
 8011170:	4618      	mov	r0, r3
 8011172:	3708      	adds	r7, #8
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}

08011178 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011178:	b480      	push	{r7}
 801117a:	b083      	sub	sp, #12
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	460b      	mov	r3, r1
 8011182:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	78fa      	ldrb	r2, [r7, #3]
 8011188:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801118a:	2300      	movs	r3, #0
}
 801118c:	4618      	mov	r0, r3
 801118e:	370c      	adds	r7, #12
 8011190:	46bd      	mov	sp, r7
 8011192:	bc80      	pop	{r7}
 8011194:	4770      	bx	lr

08011196 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011196:	b480      	push	{r7}
 8011198:	b083      	sub	sp, #12
 801119a:	af00      	add	r7, sp, #0
 801119c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2204      	movs	r2, #4
 80111ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80111b2:	2300      	movs	r3, #0
}
 80111b4:	4618      	mov	r0, r3
 80111b6:	370c      	adds	r7, #12
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bc80      	pop	{r7}
 80111bc:	4770      	bx	lr

080111be <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80111be:	b480      	push	{r7}
 80111c0:	b083      	sub	sp, #12
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111cc:	2b04      	cmp	r3, #4
 80111ce:	d105      	bne.n	80111dc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80111dc:	2300      	movs	r3, #0
}
 80111de:	4618      	mov	r0, r3
 80111e0:	370c      	adds	r7, #12
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bc80      	pop	{r7}
 80111e6:	4770      	bx	lr

080111e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b082      	sub	sp, #8
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111f6:	2b03      	cmp	r3, #3
 80111f8:	d10b      	bne.n	8011212 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011200:	69db      	ldr	r3, [r3, #28]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d005      	beq.n	8011212 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801120c:	69db      	ldr	r3, [r3, #28]
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011212:	2300      	movs	r3, #0
}
 8011214:	4618      	mov	r0, r3
 8011216:	3708      	adds	r7, #8
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b084      	sub	sp, #16
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011226:	2300      	movs	r3, #0
 8011228:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011232:	2b40      	cmp	r3, #64	; 0x40
 8011234:	d005      	beq.n	8011242 <USBD_StdDevReq+0x26>
 8011236:	2b40      	cmp	r3, #64	; 0x40
 8011238:	d84f      	bhi.n	80112da <USBD_StdDevReq+0xbe>
 801123a:	2b00      	cmp	r3, #0
 801123c:	d009      	beq.n	8011252 <USBD_StdDevReq+0x36>
 801123e:	2b20      	cmp	r3, #32
 8011240:	d14b      	bne.n	80112da <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011248:	689b      	ldr	r3, [r3, #8]
 801124a:	6839      	ldr	r1, [r7, #0]
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	4798      	blx	r3
      break;
 8011250:	e048      	b.n	80112e4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	785b      	ldrb	r3, [r3, #1]
 8011256:	2b09      	cmp	r3, #9
 8011258:	d839      	bhi.n	80112ce <USBD_StdDevReq+0xb2>
 801125a:	a201      	add	r2, pc, #4	; (adr r2, 8011260 <USBD_StdDevReq+0x44>)
 801125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011260:	080112b1 	.word	0x080112b1
 8011264:	080112c5 	.word	0x080112c5
 8011268:	080112cf 	.word	0x080112cf
 801126c:	080112bb 	.word	0x080112bb
 8011270:	080112cf 	.word	0x080112cf
 8011274:	08011293 	.word	0x08011293
 8011278:	08011289 	.word	0x08011289
 801127c:	080112cf 	.word	0x080112cf
 8011280:	080112a7 	.word	0x080112a7
 8011284:	0801129d 	.word	0x0801129d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011288:	6839      	ldr	r1, [r7, #0]
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f000 f9dc 	bl	8011648 <USBD_GetDescriptor>
          break;
 8011290:	e022      	b.n	80112d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011292:	6839      	ldr	r1, [r7, #0]
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f000 fb3f 	bl	8011918 <USBD_SetAddress>
          break;
 801129a:	e01d      	b.n	80112d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801129c:	6839      	ldr	r1, [r7, #0]
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f000 fb7e 	bl	80119a0 <USBD_SetConfig>
          break;
 80112a4:	e018      	b.n	80112d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80112a6:	6839      	ldr	r1, [r7, #0]
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f000 fc07 	bl	8011abc <USBD_GetConfig>
          break;
 80112ae:	e013      	b.n	80112d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80112b0:	6839      	ldr	r1, [r7, #0]
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f000 fc37 	bl	8011b26 <USBD_GetStatus>
          break;
 80112b8:	e00e      	b.n	80112d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80112ba:	6839      	ldr	r1, [r7, #0]
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f000 fc65 	bl	8011b8c <USBD_SetFeature>
          break;
 80112c2:	e009      	b.n	80112d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80112c4:	6839      	ldr	r1, [r7, #0]
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f000 fc74 	bl	8011bb4 <USBD_ClrFeature>
          break;
 80112cc:	e004      	b.n	80112d8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80112ce:	6839      	ldr	r1, [r7, #0]
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f000 fccc 	bl	8011c6e <USBD_CtlError>
          break;
 80112d6:	bf00      	nop
      }
      break;
 80112d8:	e004      	b.n	80112e4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80112da:	6839      	ldr	r1, [r7, #0]
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f000 fcc6 	bl	8011c6e <USBD_CtlError>
      break;
 80112e2:	bf00      	nop
  }

  return ret;
 80112e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3710      	adds	r7, #16
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
 80112ee:	bf00      	nop

080112f0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b084      	sub	sp, #16
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80112fa:	2300      	movs	r3, #0
 80112fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	781b      	ldrb	r3, [r3, #0]
 8011302:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011306:	2b40      	cmp	r3, #64	; 0x40
 8011308:	d005      	beq.n	8011316 <USBD_StdItfReq+0x26>
 801130a:	2b40      	cmp	r3, #64	; 0x40
 801130c:	d82e      	bhi.n	801136c <USBD_StdItfReq+0x7c>
 801130e:	2b00      	cmp	r3, #0
 8011310:	d001      	beq.n	8011316 <USBD_StdItfReq+0x26>
 8011312:	2b20      	cmp	r3, #32
 8011314:	d12a      	bne.n	801136c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801131c:	3b01      	subs	r3, #1
 801131e:	2b02      	cmp	r3, #2
 8011320:	d81d      	bhi.n	801135e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	889b      	ldrh	r3, [r3, #4]
 8011326:	b2db      	uxtb	r3, r3
 8011328:	2b01      	cmp	r3, #1
 801132a:	d813      	bhi.n	8011354 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011332:	689b      	ldr	r3, [r3, #8]
 8011334:	6839      	ldr	r1, [r7, #0]
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	4798      	blx	r3
 801133a:	4603      	mov	r3, r0
 801133c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	88db      	ldrh	r3, [r3, #6]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d110      	bne.n	8011368 <USBD_StdItfReq+0x78>
 8011346:	7bfb      	ldrb	r3, [r7, #15]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d10d      	bne.n	8011368 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f000 fd56 	bl	8011dfe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011352:	e009      	b.n	8011368 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8011354:	6839      	ldr	r1, [r7, #0]
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f000 fc89 	bl	8011c6e <USBD_CtlError>
          break;
 801135c:	e004      	b.n	8011368 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 801135e:	6839      	ldr	r1, [r7, #0]
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f000 fc84 	bl	8011c6e <USBD_CtlError>
          break;
 8011366:	e000      	b.n	801136a <USBD_StdItfReq+0x7a>
          break;
 8011368:	bf00      	nop
      }
      break;
 801136a:	e004      	b.n	8011376 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 801136c:	6839      	ldr	r1, [r7, #0]
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f000 fc7d 	bl	8011c6e <USBD_CtlError>
      break;
 8011374:	bf00      	nop
  }

  return USBD_OK;
 8011376:	2300      	movs	r3, #0
}
 8011378:	4618      	mov	r0, r3
 801137a:	3710      	adds	r7, #16
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b084      	sub	sp, #16
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801138a:	2300      	movs	r3, #0
 801138c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	889b      	ldrh	r3, [r3, #4]
 8011392:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801139c:	2b40      	cmp	r3, #64	; 0x40
 801139e:	d007      	beq.n	80113b0 <USBD_StdEPReq+0x30>
 80113a0:	2b40      	cmp	r3, #64	; 0x40
 80113a2:	f200 8146 	bhi.w	8011632 <USBD_StdEPReq+0x2b2>
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00a      	beq.n	80113c0 <USBD_StdEPReq+0x40>
 80113aa:	2b20      	cmp	r3, #32
 80113ac:	f040 8141 	bne.w	8011632 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80113b6:	689b      	ldr	r3, [r3, #8]
 80113b8:	6839      	ldr	r1, [r7, #0]
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	4798      	blx	r3
      break;
 80113be:	e13d      	b.n	801163c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80113c8:	2b20      	cmp	r3, #32
 80113ca:	d10a      	bne.n	80113e2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80113d2:	689b      	ldr	r3, [r3, #8]
 80113d4:	6839      	ldr	r1, [r7, #0]
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	4798      	blx	r3
 80113da:	4603      	mov	r3, r0
 80113dc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80113de:	7bfb      	ldrb	r3, [r7, #15]
 80113e0:	e12d      	b.n	801163e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	785b      	ldrb	r3, [r3, #1]
 80113e6:	2b03      	cmp	r3, #3
 80113e8:	d007      	beq.n	80113fa <USBD_StdEPReq+0x7a>
 80113ea:	2b03      	cmp	r3, #3
 80113ec:	f300 811b 	bgt.w	8011626 <USBD_StdEPReq+0x2a6>
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d072      	beq.n	80114da <USBD_StdEPReq+0x15a>
 80113f4:	2b01      	cmp	r3, #1
 80113f6:	d03a      	beq.n	801146e <USBD_StdEPReq+0xee>
 80113f8:	e115      	b.n	8011626 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011400:	2b02      	cmp	r3, #2
 8011402:	d002      	beq.n	801140a <USBD_StdEPReq+0x8a>
 8011404:	2b03      	cmp	r3, #3
 8011406:	d015      	beq.n	8011434 <USBD_StdEPReq+0xb4>
 8011408:	e02b      	b.n	8011462 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801140a:	7bbb      	ldrb	r3, [r7, #14]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00c      	beq.n	801142a <USBD_StdEPReq+0xaa>
 8011410:	7bbb      	ldrb	r3, [r7, #14]
 8011412:	2b80      	cmp	r3, #128	; 0x80
 8011414:	d009      	beq.n	801142a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8011416:	7bbb      	ldrb	r3, [r7, #14]
 8011418:	4619      	mov	r1, r3
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f001 f85e 	bl	80124dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8011420:	2180      	movs	r1, #128	; 0x80
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f001 f85a 	bl	80124dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011428:	e020      	b.n	801146c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 801142a:	6839      	ldr	r1, [r7, #0]
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f000 fc1e 	bl	8011c6e <USBD_CtlError>
              break;
 8011432:	e01b      	b.n	801146c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	885b      	ldrh	r3, [r3, #2]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d10e      	bne.n	801145a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 801143c:	7bbb      	ldrb	r3, [r7, #14]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d00b      	beq.n	801145a <USBD_StdEPReq+0xda>
 8011442:	7bbb      	ldrb	r3, [r7, #14]
 8011444:	2b80      	cmp	r3, #128	; 0x80
 8011446:	d008      	beq.n	801145a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	88db      	ldrh	r3, [r3, #6]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d104      	bne.n	801145a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8011450:	7bbb      	ldrb	r3, [r7, #14]
 8011452:	4619      	mov	r1, r3
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f001 f841 	bl	80124dc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f000 fccf 	bl	8011dfe <USBD_CtlSendStatus>

              break;
 8011460:	e004      	b.n	801146c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8011462:	6839      	ldr	r1, [r7, #0]
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f000 fc02 	bl	8011c6e <USBD_CtlError>
              break;
 801146a:	bf00      	nop
          }
          break;
 801146c:	e0e0      	b.n	8011630 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011474:	2b02      	cmp	r3, #2
 8011476:	d002      	beq.n	801147e <USBD_StdEPReq+0xfe>
 8011478:	2b03      	cmp	r3, #3
 801147a:	d015      	beq.n	80114a8 <USBD_StdEPReq+0x128>
 801147c:	e026      	b.n	80114cc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801147e:	7bbb      	ldrb	r3, [r7, #14]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d00c      	beq.n	801149e <USBD_StdEPReq+0x11e>
 8011484:	7bbb      	ldrb	r3, [r7, #14]
 8011486:	2b80      	cmp	r3, #128	; 0x80
 8011488:	d009      	beq.n	801149e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801148a:	7bbb      	ldrb	r3, [r7, #14]
 801148c:	4619      	mov	r1, r3
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f001 f824 	bl	80124dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8011494:	2180      	movs	r1, #128	; 0x80
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f001 f820 	bl	80124dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801149c:	e01c      	b.n	80114d8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 801149e:	6839      	ldr	r1, [r7, #0]
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f000 fbe4 	bl	8011c6e <USBD_CtlError>
              break;
 80114a6:	e017      	b.n	80114d8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	885b      	ldrh	r3, [r3, #2]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d112      	bne.n	80114d6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80114b0:	7bbb      	ldrb	r3, [r7, #14]
 80114b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d004      	beq.n	80114c4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80114ba:	7bbb      	ldrb	r3, [r7, #14]
 80114bc:	4619      	mov	r1, r3
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	f001 f82b 	bl	801251a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f000 fc9a 	bl	8011dfe <USBD_CtlSendStatus>
              }
              break;
 80114ca:	e004      	b.n	80114d6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80114cc:	6839      	ldr	r1, [r7, #0]
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f000 fbcd 	bl	8011c6e <USBD_CtlError>
              break;
 80114d4:	e000      	b.n	80114d8 <USBD_StdEPReq+0x158>
              break;
 80114d6:	bf00      	nop
          }
          break;
 80114d8:	e0aa      	b.n	8011630 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114e0:	2b02      	cmp	r3, #2
 80114e2:	d002      	beq.n	80114ea <USBD_StdEPReq+0x16a>
 80114e4:	2b03      	cmp	r3, #3
 80114e6:	d032      	beq.n	801154e <USBD_StdEPReq+0x1ce>
 80114e8:	e097      	b.n	801161a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80114ea:	7bbb      	ldrb	r3, [r7, #14]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d007      	beq.n	8011500 <USBD_StdEPReq+0x180>
 80114f0:	7bbb      	ldrb	r3, [r7, #14]
 80114f2:	2b80      	cmp	r3, #128	; 0x80
 80114f4:	d004      	beq.n	8011500 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80114f6:	6839      	ldr	r1, [r7, #0]
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f000 fbb8 	bl	8011c6e <USBD_CtlError>
                break;
 80114fe:	e091      	b.n	8011624 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011504:	2b00      	cmp	r3, #0
 8011506:	da0b      	bge.n	8011520 <USBD_StdEPReq+0x1a0>
 8011508:	7bbb      	ldrb	r3, [r7, #14]
 801150a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801150e:	4613      	mov	r3, r2
 8011510:	009b      	lsls	r3, r3, #2
 8011512:	4413      	add	r3, r2
 8011514:	009b      	lsls	r3, r3, #2
 8011516:	3310      	adds	r3, #16
 8011518:	687a      	ldr	r2, [r7, #4]
 801151a:	4413      	add	r3, r2
 801151c:	3304      	adds	r3, #4
 801151e:	e00b      	b.n	8011538 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011520:	7bbb      	ldrb	r3, [r7, #14]
 8011522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011526:	4613      	mov	r3, r2
 8011528:	009b      	lsls	r3, r3, #2
 801152a:	4413      	add	r3, r2
 801152c:	009b      	lsls	r3, r3, #2
 801152e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011532:	687a      	ldr	r2, [r7, #4]
 8011534:	4413      	add	r3, r2
 8011536:	3304      	adds	r3, #4
 8011538:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	2200      	movs	r2, #0
 801153e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	2202      	movs	r2, #2
 8011544:	4619      	mov	r1, r3
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f000 fbfb 	bl	8011d42 <USBD_CtlSendData>
              break;
 801154c:	e06a      	b.n	8011624 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801154e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011552:	2b00      	cmp	r3, #0
 8011554:	da11      	bge.n	801157a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011556:	7bbb      	ldrb	r3, [r7, #14]
 8011558:	f003 020f 	and.w	r2, r3, #15
 801155c:	6879      	ldr	r1, [r7, #4]
 801155e:	4613      	mov	r3, r2
 8011560:	009b      	lsls	r3, r3, #2
 8011562:	4413      	add	r3, r2
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	440b      	add	r3, r1
 8011568:	3318      	adds	r3, #24
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d117      	bne.n	80115a0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8011570:	6839      	ldr	r1, [r7, #0]
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f000 fb7b 	bl	8011c6e <USBD_CtlError>
                  break;
 8011578:	e054      	b.n	8011624 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801157a:	7bbb      	ldrb	r3, [r7, #14]
 801157c:	f003 020f 	and.w	r2, r3, #15
 8011580:	6879      	ldr	r1, [r7, #4]
 8011582:	4613      	mov	r3, r2
 8011584:	009b      	lsls	r3, r3, #2
 8011586:	4413      	add	r3, r2
 8011588:	009b      	lsls	r3, r3, #2
 801158a:	440b      	add	r3, r1
 801158c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d104      	bne.n	80115a0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8011596:	6839      	ldr	r1, [r7, #0]
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f000 fb68 	bl	8011c6e <USBD_CtlError>
                  break;
 801159e:	e041      	b.n	8011624 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80115a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	da0b      	bge.n	80115c0 <USBD_StdEPReq+0x240>
 80115a8:	7bbb      	ldrb	r3, [r7, #14]
 80115aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80115ae:	4613      	mov	r3, r2
 80115b0:	009b      	lsls	r3, r3, #2
 80115b2:	4413      	add	r3, r2
 80115b4:	009b      	lsls	r3, r3, #2
 80115b6:	3310      	adds	r3, #16
 80115b8:	687a      	ldr	r2, [r7, #4]
 80115ba:	4413      	add	r3, r2
 80115bc:	3304      	adds	r3, #4
 80115be:	e00b      	b.n	80115d8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80115c0:	7bbb      	ldrb	r3, [r7, #14]
 80115c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80115c6:	4613      	mov	r3, r2
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	4413      	add	r3, r2
 80115cc:	009b      	lsls	r3, r3, #2
 80115ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80115d2:	687a      	ldr	r2, [r7, #4]
 80115d4:	4413      	add	r3, r2
 80115d6:	3304      	adds	r3, #4
 80115d8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80115da:	7bbb      	ldrb	r3, [r7, #14]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d002      	beq.n	80115e6 <USBD_StdEPReq+0x266>
 80115e0:	7bbb      	ldrb	r3, [r7, #14]
 80115e2:	2b80      	cmp	r3, #128	; 0x80
 80115e4:	d103      	bne.n	80115ee <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	2200      	movs	r2, #0
 80115ea:	601a      	str	r2, [r3, #0]
 80115ec:	e00e      	b.n	801160c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80115ee:	7bbb      	ldrb	r3, [r7, #14]
 80115f0:	4619      	mov	r1, r3
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f000 ffb0 	bl	8012558 <USBD_LL_IsStallEP>
 80115f8:	4603      	mov	r3, r0
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d003      	beq.n	8011606 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	2201      	movs	r2, #1
 8011602:	601a      	str	r2, [r3, #0]
 8011604:	e002      	b.n	801160c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	2200      	movs	r2, #0
 801160a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	2202      	movs	r2, #2
 8011610:	4619      	mov	r1, r3
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f000 fb95 	bl	8011d42 <USBD_CtlSendData>
              break;
 8011618:	e004      	b.n	8011624 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 801161a:	6839      	ldr	r1, [r7, #0]
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f000 fb26 	bl	8011c6e <USBD_CtlError>
              break;
 8011622:	bf00      	nop
          }
          break;
 8011624:	e004      	b.n	8011630 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8011626:	6839      	ldr	r1, [r7, #0]
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f000 fb20 	bl	8011c6e <USBD_CtlError>
          break;
 801162e:	bf00      	nop
      }
      break;
 8011630:	e004      	b.n	801163c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8011632:	6839      	ldr	r1, [r7, #0]
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f000 fb1a 	bl	8011c6e <USBD_CtlError>
      break;
 801163a:	bf00      	nop
  }

  return ret;
 801163c:	7bfb      	ldrb	r3, [r7, #15]
}
 801163e:	4618      	mov	r0, r3
 8011640:	3710      	adds	r7, #16
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
	...

08011648 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b084      	sub	sp, #16
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011652:	2300      	movs	r3, #0
 8011654:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011656:	2300      	movs	r3, #0
 8011658:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801165a:	2300      	movs	r3, #0
 801165c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	885b      	ldrh	r3, [r3, #2]
 8011662:	0a1b      	lsrs	r3, r3, #8
 8011664:	b29b      	uxth	r3, r3
 8011666:	3b01      	subs	r3, #1
 8011668:	2b06      	cmp	r3, #6
 801166a:	f200 8128 	bhi.w	80118be <USBD_GetDescriptor+0x276>
 801166e:	a201      	add	r2, pc, #4	; (adr r2, 8011674 <USBD_GetDescriptor+0x2c>)
 8011670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011674:	08011691 	.word	0x08011691
 8011678:	080116a9 	.word	0x080116a9
 801167c:	080116e9 	.word	0x080116e9
 8011680:	080118bf 	.word	0x080118bf
 8011684:	080118bf 	.word	0x080118bf
 8011688:	0801185f 	.word	0x0801185f
 801168c:	0801188b 	.word	0x0801188b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	687a      	ldr	r2, [r7, #4]
 801169a:	7c12      	ldrb	r2, [r2, #16]
 801169c:	f107 0108 	add.w	r1, r7, #8
 80116a0:	4610      	mov	r0, r2
 80116a2:	4798      	blx	r3
 80116a4:	60f8      	str	r0, [r7, #12]
      break;
 80116a6:	e112      	b.n	80118ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	7c1b      	ldrb	r3, [r3, #16]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d10d      	bne.n	80116cc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116b8:	f107 0208 	add.w	r2, r7, #8
 80116bc:	4610      	mov	r0, r2
 80116be:	4798      	blx	r3
 80116c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	3301      	adds	r3, #1
 80116c6:	2202      	movs	r2, #2
 80116c8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80116ca:	e100      	b.n	80118ce <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116d4:	f107 0208 	add.w	r2, r7, #8
 80116d8:	4610      	mov	r0, r2
 80116da:	4798      	blx	r3
 80116dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	3301      	adds	r3, #1
 80116e2:	2202      	movs	r2, #2
 80116e4:	701a      	strb	r2, [r3, #0]
      break;
 80116e6:	e0f2      	b.n	80118ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	885b      	ldrh	r3, [r3, #2]
 80116ec:	b2db      	uxtb	r3, r3
 80116ee:	2b05      	cmp	r3, #5
 80116f0:	f200 80ac 	bhi.w	801184c <USBD_GetDescriptor+0x204>
 80116f4:	a201      	add	r2, pc, #4	; (adr r2, 80116fc <USBD_GetDescriptor+0xb4>)
 80116f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116fa:	bf00      	nop
 80116fc:	08011715 	.word	0x08011715
 8011700:	08011749 	.word	0x08011749
 8011704:	0801177d 	.word	0x0801177d
 8011708:	080117b1 	.word	0x080117b1
 801170c:	080117e5 	.word	0x080117e5
 8011710:	08011819 	.word	0x08011819
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d00b      	beq.n	8011738 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	7c12      	ldrb	r2, [r2, #16]
 801172c:	f107 0108 	add.w	r1, r7, #8
 8011730:	4610      	mov	r0, r2
 8011732:	4798      	blx	r3
 8011734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011736:	e091      	b.n	801185c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011738:	6839      	ldr	r1, [r7, #0]
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f000 fa97 	bl	8011c6e <USBD_CtlError>
            err++;
 8011740:	7afb      	ldrb	r3, [r7, #11]
 8011742:	3301      	adds	r3, #1
 8011744:	72fb      	strb	r3, [r7, #11]
          break;
 8011746:	e089      	b.n	801185c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801174e:	689b      	ldr	r3, [r3, #8]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d00b      	beq.n	801176c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801175a:	689b      	ldr	r3, [r3, #8]
 801175c:	687a      	ldr	r2, [r7, #4]
 801175e:	7c12      	ldrb	r2, [r2, #16]
 8011760:	f107 0108 	add.w	r1, r7, #8
 8011764:	4610      	mov	r0, r2
 8011766:	4798      	blx	r3
 8011768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801176a:	e077      	b.n	801185c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801176c:	6839      	ldr	r1, [r7, #0]
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f000 fa7d 	bl	8011c6e <USBD_CtlError>
            err++;
 8011774:	7afb      	ldrb	r3, [r7, #11]
 8011776:	3301      	adds	r3, #1
 8011778:	72fb      	strb	r3, [r7, #11]
          break;
 801177a:	e06f      	b.n	801185c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011782:	68db      	ldr	r3, [r3, #12]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d00b      	beq.n	80117a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801178e:	68db      	ldr	r3, [r3, #12]
 8011790:	687a      	ldr	r2, [r7, #4]
 8011792:	7c12      	ldrb	r2, [r2, #16]
 8011794:	f107 0108 	add.w	r1, r7, #8
 8011798:	4610      	mov	r0, r2
 801179a:	4798      	blx	r3
 801179c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801179e:	e05d      	b.n	801185c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80117a0:	6839      	ldr	r1, [r7, #0]
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f000 fa63 	bl	8011c6e <USBD_CtlError>
            err++;
 80117a8:	7afb      	ldrb	r3, [r7, #11]
 80117aa:	3301      	adds	r3, #1
 80117ac:	72fb      	strb	r3, [r7, #11]
          break;
 80117ae:	e055      	b.n	801185c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80117b6:	691b      	ldr	r3, [r3, #16]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00b      	beq.n	80117d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80117c2:	691b      	ldr	r3, [r3, #16]
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	7c12      	ldrb	r2, [r2, #16]
 80117c8:	f107 0108 	add.w	r1, r7, #8
 80117cc:	4610      	mov	r0, r2
 80117ce:	4798      	blx	r3
 80117d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80117d2:	e043      	b.n	801185c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80117d4:	6839      	ldr	r1, [r7, #0]
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f000 fa49 	bl	8011c6e <USBD_CtlError>
            err++;
 80117dc:	7afb      	ldrb	r3, [r7, #11]
 80117de:	3301      	adds	r3, #1
 80117e0:	72fb      	strb	r3, [r7, #11]
          break;
 80117e2:	e03b      	b.n	801185c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80117ea:	695b      	ldr	r3, [r3, #20]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d00b      	beq.n	8011808 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80117f6:	695b      	ldr	r3, [r3, #20]
 80117f8:	687a      	ldr	r2, [r7, #4]
 80117fa:	7c12      	ldrb	r2, [r2, #16]
 80117fc:	f107 0108 	add.w	r1, r7, #8
 8011800:	4610      	mov	r0, r2
 8011802:	4798      	blx	r3
 8011804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011806:	e029      	b.n	801185c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011808:	6839      	ldr	r1, [r7, #0]
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f000 fa2f 	bl	8011c6e <USBD_CtlError>
            err++;
 8011810:	7afb      	ldrb	r3, [r7, #11]
 8011812:	3301      	adds	r3, #1
 8011814:	72fb      	strb	r3, [r7, #11]
          break;
 8011816:	e021      	b.n	801185c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801181e:	699b      	ldr	r3, [r3, #24]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00b      	beq.n	801183c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801182a:	699b      	ldr	r3, [r3, #24]
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	7c12      	ldrb	r2, [r2, #16]
 8011830:	f107 0108 	add.w	r1, r7, #8
 8011834:	4610      	mov	r0, r2
 8011836:	4798      	blx	r3
 8011838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801183a:	e00f      	b.n	801185c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801183c:	6839      	ldr	r1, [r7, #0]
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f000 fa15 	bl	8011c6e <USBD_CtlError>
            err++;
 8011844:	7afb      	ldrb	r3, [r7, #11]
 8011846:	3301      	adds	r3, #1
 8011848:	72fb      	strb	r3, [r7, #11]
          break;
 801184a:	e007      	b.n	801185c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801184c:	6839      	ldr	r1, [r7, #0]
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f000 fa0d 	bl	8011c6e <USBD_CtlError>
          err++;
 8011854:	7afb      	ldrb	r3, [r7, #11]
 8011856:	3301      	adds	r3, #1
 8011858:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801185a:	e038      	b.n	80118ce <USBD_GetDescriptor+0x286>
 801185c:	e037      	b.n	80118ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	7c1b      	ldrb	r3, [r3, #16]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d109      	bne.n	801187a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801186e:	f107 0208 	add.w	r2, r7, #8
 8011872:	4610      	mov	r0, r2
 8011874:	4798      	blx	r3
 8011876:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011878:	e029      	b.n	80118ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801187a:	6839      	ldr	r1, [r7, #0]
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f000 f9f6 	bl	8011c6e <USBD_CtlError>
        err++;
 8011882:	7afb      	ldrb	r3, [r7, #11]
 8011884:	3301      	adds	r3, #1
 8011886:	72fb      	strb	r3, [r7, #11]
      break;
 8011888:	e021      	b.n	80118ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	7c1b      	ldrb	r3, [r3, #16]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d10d      	bne.n	80118ae <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801189a:	f107 0208 	add.w	r2, r7, #8
 801189e:	4610      	mov	r0, r2
 80118a0:	4798      	blx	r3
 80118a2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	3301      	adds	r3, #1
 80118a8:	2207      	movs	r2, #7
 80118aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80118ac:	e00f      	b.n	80118ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80118ae:	6839      	ldr	r1, [r7, #0]
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f000 f9dc 	bl	8011c6e <USBD_CtlError>
        err++;
 80118b6:	7afb      	ldrb	r3, [r7, #11]
 80118b8:	3301      	adds	r3, #1
 80118ba:	72fb      	strb	r3, [r7, #11]
      break;
 80118bc:	e007      	b.n	80118ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80118be:	6839      	ldr	r1, [r7, #0]
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f000 f9d4 	bl	8011c6e <USBD_CtlError>
      err++;
 80118c6:	7afb      	ldrb	r3, [r7, #11]
 80118c8:	3301      	adds	r3, #1
 80118ca:	72fb      	strb	r3, [r7, #11]
      break;
 80118cc:	bf00      	nop
  }

  if (err != 0U)
 80118ce:	7afb      	ldrb	r3, [r7, #11]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d11c      	bne.n	801190e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80118d4:	893b      	ldrh	r3, [r7, #8]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d011      	beq.n	80118fe <USBD_GetDescriptor+0x2b6>
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	88db      	ldrh	r3, [r3, #6]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d00d      	beq.n	80118fe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	88da      	ldrh	r2, [r3, #6]
 80118e6:	893b      	ldrh	r3, [r7, #8]
 80118e8:	4293      	cmp	r3, r2
 80118ea:	bf28      	it	cs
 80118ec:	4613      	movcs	r3, r2
 80118ee:	b29b      	uxth	r3, r3
 80118f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80118f2:	893b      	ldrh	r3, [r7, #8]
 80118f4:	461a      	mov	r2, r3
 80118f6:	68f9      	ldr	r1, [r7, #12]
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f000 fa22 	bl	8011d42 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	88db      	ldrh	r3, [r3, #6]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d104      	bne.n	8011910 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 fa79 	bl	8011dfe <USBD_CtlSendStatus>
 801190c:	e000      	b.n	8011910 <USBD_GetDescriptor+0x2c8>
    return;
 801190e:	bf00      	nop
    }
  }
}
 8011910:	3710      	adds	r7, #16
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}
 8011916:	bf00      	nop

08011918 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b084      	sub	sp, #16
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011922:	683b      	ldr	r3, [r7, #0]
 8011924:	889b      	ldrh	r3, [r3, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d130      	bne.n	801198c <USBD_SetAddress+0x74>
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	88db      	ldrh	r3, [r3, #6]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d12c      	bne.n	801198c <USBD_SetAddress+0x74>
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	885b      	ldrh	r3, [r3, #2]
 8011936:	2b7f      	cmp	r3, #127	; 0x7f
 8011938:	d828      	bhi.n	801198c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	885b      	ldrh	r3, [r3, #2]
 801193e:	b2db      	uxtb	r3, r3
 8011940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011944:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801194c:	2b03      	cmp	r3, #3
 801194e:	d104      	bne.n	801195a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011950:	6839      	ldr	r1, [r7, #0]
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f000 f98b 	bl	8011c6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011958:	e01d      	b.n	8011996 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	7bfa      	ldrb	r2, [r7, #15]
 801195e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011962:	7bfb      	ldrb	r3, [r7, #15]
 8011964:	4619      	mov	r1, r3
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f000 fe22 	bl	80125b0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f000 fa46 	bl	8011dfe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011972:	7bfb      	ldrb	r3, [r7, #15]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d004      	beq.n	8011982 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2202      	movs	r2, #2
 801197c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011980:	e009      	b.n	8011996 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2201      	movs	r2, #1
 8011986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801198a:	e004      	b.n	8011996 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801198c:	6839      	ldr	r1, [r7, #0]
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f000 f96d 	bl	8011c6e <USBD_CtlError>
  }
}
 8011994:	bf00      	nop
 8011996:	bf00      	nop
 8011998:	3710      	adds	r7, #16
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
	...

080119a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	885b      	ldrh	r3, [r3, #2]
 80119ae:	b2da      	uxtb	r2, r3
 80119b0:	4b41      	ldr	r3, [pc, #260]	; (8011ab8 <USBD_SetConfig+0x118>)
 80119b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80119b4:	4b40      	ldr	r3, [pc, #256]	; (8011ab8 <USBD_SetConfig+0x118>)
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	2b01      	cmp	r3, #1
 80119ba:	d904      	bls.n	80119c6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80119bc:	6839      	ldr	r1, [r7, #0]
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f000 f955 	bl	8011c6e <USBD_CtlError>
 80119c4:	e075      	b.n	8011ab2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119cc:	2b02      	cmp	r3, #2
 80119ce:	d002      	beq.n	80119d6 <USBD_SetConfig+0x36>
 80119d0:	2b03      	cmp	r3, #3
 80119d2:	d023      	beq.n	8011a1c <USBD_SetConfig+0x7c>
 80119d4:	e062      	b.n	8011a9c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80119d6:	4b38      	ldr	r3, [pc, #224]	; (8011ab8 <USBD_SetConfig+0x118>)
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d01a      	beq.n	8011a14 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80119de:	4b36      	ldr	r3, [pc, #216]	; (8011ab8 <USBD_SetConfig+0x118>)
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	461a      	mov	r2, r3
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2203      	movs	r2, #3
 80119ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80119f0:	4b31      	ldr	r3, [pc, #196]	; (8011ab8 <USBD_SetConfig+0x118>)
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	4619      	mov	r1, r3
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f7ff f9e8 	bl	8010dcc <USBD_SetClassConfig>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b02      	cmp	r3, #2
 8011a00:	d104      	bne.n	8011a0c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8011a02:	6839      	ldr	r1, [r7, #0]
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f000 f932 	bl	8011c6e <USBD_CtlError>
            return;
 8011a0a:	e052      	b.n	8011ab2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f000 f9f6 	bl	8011dfe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8011a12:	e04e      	b.n	8011ab2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	f000 f9f2 	bl	8011dfe <USBD_CtlSendStatus>
        break;
 8011a1a:	e04a      	b.n	8011ab2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8011a1c:	4b26      	ldr	r3, [pc, #152]	; (8011ab8 <USBD_SetConfig+0x118>)
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d112      	bne.n	8011a4a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2202      	movs	r2, #2
 8011a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8011a2c:	4b22      	ldr	r3, [pc, #136]	; (8011ab8 <USBD_SetConfig+0x118>)
 8011a2e:	781b      	ldrb	r3, [r3, #0]
 8011a30:	461a      	mov	r2, r3
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8011a36:	4b20      	ldr	r3, [pc, #128]	; (8011ab8 <USBD_SetConfig+0x118>)
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	4619      	mov	r1, r3
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f7ff f9e4 	bl	8010e0a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 f9db 	bl	8011dfe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8011a48:	e033      	b.n	8011ab2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8011a4a:	4b1b      	ldr	r3, [pc, #108]	; (8011ab8 <USBD_SetConfig+0x118>)
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	461a      	mov	r2, r3
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d01d      	beq.n	8011a94 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	4619      	mov	r1, r3
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f7ff f9d2 	bl	8010e0a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8011a66:	4b14      	ldr	r3, [pc, #80]	; (8011ab8 <USBD_SetConfig+0x118>)
 8011a68:	781b      	ldrb	r3, [r3, #0]
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011a70:	4b11      	ldr	r3, [pc, #68]	; (8011ab8 <USBD_SetConfig+0x118>)
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	4619      	mov	r1, r3
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f7ff f9a8 	bl	8010dcc <USBD_SetClassConfig>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	2b02      	cmp	r3, #2
 8011a80:	d104      	bne.n	8011a8c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8011a82:	6839      	ldr	r1, [r7, #0]
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f000 f8f2 	bl	8011c6e <USBD_CtlError>
            return;
 8011a8a:	e012      	b.n	8011ab2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f000 f9b6 	bl	8011dfe <USBD_CtlSendStatus>
        break;
 8011a92:	e00e      	b.n	8011ab2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f000 f9b2 	bl	8011dfe <USBD_CtlSendStatus>
        break;
 8011a9a:	e00a      	b.n	8011ab2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8011a9c:	6839      	ldr	r1, [r7, #0]
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f000 f8e5 	bl	8011c6e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8011aa4:	4b04      	ldr	r3, [pc, #16]	; (8011ab8 <USBD_SetConfig+0x118>)
 8011aa6:	781b      	ldrb	r3, [r3, #0]
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f7ff f9ad 	bl	8010e0a <USBD_ClrClassConfig>
        break;
 8011ab0:	bf00      	nop
    }
  }
}
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}
 8011ab8:	20001490 	.word	0x20001490

08011abc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	88db      	ldrh	r3, [r3, #6]
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d004      	beq.n	8011ad8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011ace:	6839      	ldr	r1, [r7, #0]
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f000 f8cc 	bl	8011c6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011ad6:	e022      	b.n	8011b1e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ade:	2b02      	cmp	r3, #2
 8011ae0:	dc02      	bgt.n	8011ae8 <USBD_GetConfig+0x2c>
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	dc03      	bgt.n	8011aee <USBD_GetConfig+0x32>
 8011ae6:	e015      	b.n	8011b14 <USBD_GetConfig+0x58>
 8011ae8:	2b03      	cmp	r3, #3
 8011aea:	d00b      	beq.n	8011b04 <USBD_GetConfig+0x48>
 8011aec:	e012      	b.n	8011b14 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2200      	movs	r2, #0
 8011af2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	3308      	adds	r3, #8
 8011af8:	2201      	movs	r2, #1
 8011afa:	4619      	mov	r1, r3
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f000 f920 	bl	8011d42 <USBD_CtlSendData>
        break;
 8011b02:	e00c      	b.n	8011b1e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	3304      	adds	r3, #4
 8011b08:	2201      	movs	r2, #1
 8011b0a:	4619      	mov	r1, r3
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f000 f918 	bl	8011d42 <USBD_CtlSendData>
        break;
 8011b12:	e004      	b.n	8011b1e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8011b14:	6839      	ldr	r1, [r7, #0]
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f000 f8a9 	bl	8011c6e <USBD_CtlError>
        break;
 8011b1c:	bf00      	nop
}
 8011b1e:	bf00      	nop
 8011b20:	3708      	adds	r7, #8
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}

08011b26 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b26:	b580      	push	{r7, lr}
 8011b28:	b082      	sub	sp, #8
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
 8011b2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b36:	3b01      	subs	r3, #1
 8011b38:	2b02      	cmp	r3, #2
 8011b3a:	d81e      	bhi.n	8011b7a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	88db      	ldrh	r3, [r3, #6]
 8011b40:	2b02      	cmp	r3, #2
 8011b42:	d004      	beq.n	8011b4e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8011b44:	6839      	ldr	r1, [r7, #0]
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	f000 f891 	bl	8011c6e <USBD_CtlError>
        break;
 8011b4c:	e01a      	b.n	8011b84 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2201      	movs	r2, #1
 8011b52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d005      	beq.n	8011b6a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	68db      	ldr	r3, [r3, #12]
 8011b62:	f043 0202 	orr.w	r2, r3, #2
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	330c      	adds	r3, #12
 8011b6e:	2202      	movs	r2, #2
 8011b70:	4619      	mov	r1, r3
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f000 f8e5 	bl	8011d42 <USBD_CtlSendData>
      break;
 8011b78:	e004      	b.n	8011b84 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8011b7a:	6839      	ldr	r1, [r7, #0]
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f000 f876 	bl	8011c6e <USBD_CtlError>
      break;
 8011b82:	bf00      	nop
  }
}
 8011b84:	bf00      	nop
 8011b86:	3708      	adds	r7, #8
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}

08011b8c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	885b      	ldrh	r3, [r3, #2]
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	d106      	bne.n	8011bac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f000 f929 	bl	8011dfe <USBD_CtlSendStatus>
  }
}
 8011bac:	bf00      	nop
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}

08011bb4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bc4:	3b01      	subs	r3, #1
 8011bc6:	2b02      	cmp	r3, #2
 8011bc8:	d80b      	bhi.n	8011be2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	885b      	ldrh	r3, [r3, #2]
 8011bce:	2b01      	cmp	r3, #1
 8011bd0:	d10c      	bne.n	8011bec <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f000 f90f 	bl	8011dfe <USBD_CtlSendStatus>
      }
      break;
 8011be0:	e004      	b.n	8011bec <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8011be2:	6839      	ldr	r1, [r7, #0]
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f000 f842 	bl	8011c6e <USBD_CtlError>
      break;
 8011bea:	e000      	b.n	8011bee <USBD_ClrFeature+0x3a>
      break;
 8011bec:	bf00      	nop
  }
}
 8011bee:	bf00      	nop
 8011bf0:	3708      	adds	r7, #8
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}

08011bf6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011bf6:	b480      	push	{r7}
 8011bf8:	b083      	sub	sp, #12
 8011bfa:	af00      	add	r7, sp, #0
 8011bfc:	6078      	str	r0, [r7, #4]
 8011bfe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	781a      	ldrb	r2, [r3, #0]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	785a      	ldrb	r2, [r3, #1]
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	3302      	adds	r3, #2
 8011c14:	781b      	ldrb	r3, [r3, #0]
 8011c16:	b29a      	uxth	r2, r3
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	3303      	adds	r3, #3
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	b29b      	uxth	r3, r3
 8011c20:	021b      	lsls	r3, r3, #8
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	4413      	add	r3, r2
 8011c26:	b29a      	uxth	r2, r3
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	3304      	adds	r3, #4
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	b29a      	uxth	r2, r3
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	3305      	adds	r3, #5
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	021b      	lsls	r3, r3, #8
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	4413      	add	r3, r2
 8011c42:	b29a      	uxth	r2, r3
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	3306      	adds	r3, #6
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	b29a      	uxth	r2, r3
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	3307      	adds	r3, #7
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	b29b      	uxth	r3, r3
 8011c58:	021b      	lsls	r3, r3, #8
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	4413      	add	r3, r2
 8011c5e:	b29a      	uxth	r2, r3
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	80da      	strh	r2, [r3, #6]

}
 8011c64:	bf00      	nop
 8011c66:	370c      	adds	r7, #12
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bc80      	pop	{r7}
 8011c6c:	4770      	bx	lr

08011c6e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8011c6e:	b580      	push	{r7, lr}
 8011c70:	b082      	sub	sp, #8
 8011c72:	af00      	add	r7, sp, #0
 8011c74:	6078      	str	r0, [r7, #4]
 8011c76:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8011c78:	2180      	movs	r1, #128	; 0x80
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f000 fc2e 	bl	80124dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8011c80:	2100      	movs	r1, #0
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f000 fc2a 	bl	80124dc <USBD_LL_StallEP>
}
 8011c88:	bf00      	nop
 8011c8a:	3708      	adds	r7, #8
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b086      	sub	sp, #24
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d032      	beq.n	8011d0c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8011ca6:	68f8      	ldr	r0, [r7, #12]
 8011ca8:	f000 f834 	bl	8011d14 <USBD_GetLen>
 8011cac:	4603      	mov	r3, r0
 8011cae:	3301      	adds	r3, #1
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	005b      	lsls	r3, r3, #1
 8011cb4:	b29a      	uxth	r2, r3
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8011cba:	7dfb      	ldrb	r3, [r7, #23]
 8011cbc:	1c5a      	adds	r2, r3, #1
 8011cbe:	75fa      	strb	r2, [r7, #23]
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	4413      	add	r3, r2
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	7812      	ldrb	r2, [r2, #0]
 8011cca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8011ccc:	7dfb      	ldrb	r3, [r7, #23]
 8011cce:	1c5a      	adds	r2, r3, #1
 8011cd0:	75fa      	strb	r2, [r7, #23]
 8011cd2:	461a      	mov	r2, r3
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	4413      	add	r3, r2
 8011cd8:	2203      	movs	r2, #3
 8011cda:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8011cdc:	e012      	b.n	8011d04 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	1c5a      	adds	r2, r3, #1
 8011ce2:	60fa      	str	r2, [r7, #12]
 8011ce4:	7dfa      	ldrb	r2, [r7, #23]
 8011ce6:	1c51      	adds	r1, r2, #1
 8011ce8:	75f9      	strb	r1, [r7, #23]
 8011cea:	4611      	mov	r1, r2
 8011cec:	68ba      	ldr	r2, [r7, #8]
 8011cee:	440a      	add	r2, r1
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8011cf4:	7dfb      	ldrb	r3, [r7, #23]
 8011cf6:	1c5a      	adds	r2, r3, #1
 8011cf8:	75fa      	strb	r2, [r7, #23]
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	4413      	add	r3, r2
 8011d00:	2200      	movs	r2, #0
 8011d02:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d1e8      	bne.n	8011cde <USBD_GetString+0x4e>
    }
  }
}
 8011d0c:	bf00      	nop
 8011d0e:	3718      	adds	r7, #24
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}

08011d14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011d14:	b480      	push	{r7}
 8011d16:	b085      	sub	sp, #20
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8011d20:	e005      	b.n	8011d2e <USBD_GetLen+0x1a>
  {
    len++;
 8011d22:	7bfb      	ldrb	r3, [r7, #15]
 8011d24:	3301      	adds	r3, #1
 8011d26:	73fb      	strb	r3, [r7, #15]
    buf++;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d1f5      	bne.n	8011d22 <USBD_GetLen+0xe>
  }

  return len;
 8011d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3714      	adds	r7, #20
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bc80      	pop	{r7}
 8011d40:	4770      	bx	lr

08011d42 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8011d42:	b580      	push	{r7, lr}
 8011d44:	b084      	sub	sp, #16
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	60f8      	str	r0, [r7, #12]
 8011d4a:	60b9      	str	r1, [r7, #8]
 8011d4c:	4613      	mov	r3, r2
 8011d4e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	2202      	movs	r2, #2
 8011d54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011d58:	88fa      	ldrh	r2, [r7, #6]
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8011d5e:	88fa      	ldrh	r2, [r7, #6]
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011d64:	88fb      	ldrh	r3, [r7, #6]
 8011d66:	68ba      	ldr	r2, [r7, #8]
 8011d68:	2100      	movs	r1, #0
 8011d6a:	68f8      	ldr	r0, [r7, #12]
 8011d6c:	f000 fc3f 	bl	80125ee <USBD_LL_Transmit>

  return USBD_OK;
 8011d70:	2300      	movs	r3, #0
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3710      	adds	r7, #16
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}

08011d7a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8011d7a:	b580      	push	{r7, lr}
 8011d7c:	b084      	sub	sp, #16
 8011d7e:	af00      	add	r7, sp, #0
 8011d80:	60f8      	str	r0, [r7, #12]
 8011d82:	60b9      	str	r1, [r7, #8]
 8011d84:	4613      	mov	r3, r2
 8011d86:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011d88:	88fb      	ldrh	r3, [r7, #6]
 8011d8a:	68ba      	ldr	r2, [r7, #8]
 8011d8c:	2100      	movs	r1, #0
 8011d8e:	68f8      	ldr	r0, [r7, #12]
 8011d90:	f000 fc2d 	bl	80125ee <USBD_LL_Transmit>

  return USBD_OK;
 8011d94:	2300      	movs	r3, #0
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	3710      	adds	r7, #16
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}

08011d9e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8011d9e:	b580      	push	{r7, lr}
 8011da0:	b084      	sub	sp, #16
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	60f8      	str	r0, [r7, #12]
 8011da6:	60b9      	str	r1, [r7, #8]
 8011da8:	4613      	mov	r3, r2
 8011daa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	2203      	movs	r2, #3
 8011db0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011db4:	88fa      	ldrh	r2, [r7, #6]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8011dbc:	88fa      	ldrh	r2, [r7, #6]
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011dc4:	88fb      	ldrh	r3, [r7, #6]
 8011dc6:	68ba      	ldr	r2, [r7, #8]
 8011dc8:	2100      	movs	r1, #0
 8011dca:	68f8      	ldr	r0, [r7, #12]
 8011dcc:	f000 fc32 	bl	8012634 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011dd0:	2300      	movs	r3, #0
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3710      	adds	r7, #16
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}

08011dda <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8011dda:	b580      	push	{r7, lr}
 8011ddc:	b084      	sub	sp, #16
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	60f8      	str	r0, [r7, #12]
 8011de2:	60b9      	str	r1, [r7, #8]
 8011de4:	4613      	mov	r3, r2
 8011de6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011de8:	88fb      	ldrh	r3, [r7, #6]
 8011dea:	68ba      	ldr	r2, [r7, #8]
 8011dec:	2100      	movs	r1, #0
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	f000 fc20 	bl	8012634 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011df4:	2300      	movs	r3, #0
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3710      	adds	r7, #16
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}

08011dfe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011dfe:	b580      	push	{r7, lr}
 8011e00:	b082      	sub	sp, #8
 8011e02:	af00      	add	r7, sp, #0
 8011e04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2204      	movs	r2, #4
 8011e0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011e0e:	2300      	movs	r3, #0
 8011e10:	2200      	movs	r2, #0
 8011e12:	2100      	movs	r1, #0
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f000 fbea 	bl	80125ee <USBD_LL_Transmit>

  return USBD_OK;
 8011e1a:	2300      	movs	r3, #0
}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3708      	adds	r7, #8
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}

08011e24 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2205      	movs	r2, #5
 8011e30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e34:	2300      	movs	r3, #0
 8011e36:	2200      	movs	r2, #0
 8011e38:	2100      	movs	r1, #0
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 fbfa 	bl	8012634 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e40:	2300      	movs	r3, #0
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3708      	adds	r7, #8
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
	...

08011e4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011e50:	2200      	movs	r2, #0
 8011e52:	4912      	ldr	r1, [pc, #72]	; (8011e9c <MX_USB_DEVICE_Init+0x50>)
 8011e54:	4812      	ldr	r0, [pc, #72]	; (8011ea0 <MX_USB_DEVICE_Init+0x54>)
 8011e56:	f7fe ff5f 	bl	8010d18 <USBD_Init>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d001      	beq.n	8011e64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011e60:	f7f0 fef4 	bl	8002c4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011e64:	490f      	ldr	r1, [pc, #60]	; (8011ea4 <MX_USB_DEVICE_Init+0x58>)
 8011e66:	480e      	ldr	r0, [pc, #56]	; (8011ea0 <MX_USB_DEVICE_Init+0x54>)
 8011e68:	f7fe ff81 	bl	8010d6e <USBD_RegisterClass>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d001      	beq.n	8011e76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011e72:	f7f0 feeb 	bl	8002c4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011e76:	490c      	ldr	r1, [pc, #48]	; (8011ea8 <MX_USB_DEVICE_Init+0x5c>)
 8011e78:	4809      	ldr	r0, [pc, #36]	; (8011ea0 <MX_USB_DEVICE_Init+0x54>)
 8011e7a:	f7fe fee1 	bl	8010c40 <USBD_CDC_RegisterInterface>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d001      	beq.n	8011e88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011e84:	f7f0 fee2 	bl	8002c4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011e88:	4805      	ldr	r0, [pc, #20]	; (8011ea0 <MX_USB_DEVICE_Init+0x54>)
 8011e8a:	f7fe ff89 	bl	8010da0 <USBD_Start>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d001      	beq.n	8011e98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011e94:	f7f0 feda 	bl	8002c4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011e98:	bf00      	nop
 8011e9a:	bd80      	pop	{r7, pc}
 8011e9c:	2000092c 	.word	0x2000092c
 8011ea0:	20001494 	.word	0x20001494
 8011ea4:	20000818 	.word	0x20000818
 8011ea8:	2000091c 	.word	0x2000091c

08011eac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	4905      	ldr	r1, [pc, #20]	; (8011ec8 <CDC_Init_FS+0x1c>)
 8011eb4:	4805      	ldr	r0, [pc, #20]	; (8011ecc <CDC_Init_FS+0x20>)
 8011eb6:	f7fe fed9 	bl	8010c6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011eba:	4905      	ldr	r1, [pc, #20]	; (8011ed0 <CDC_Init_FS+0x24>)
 8011ebc:	4803      	ldr	r0, [pc, #12]	; (8011ecc <CDC_Init_FS+0x20>)
 8011ebe:	f7fe feee 	bl	8010c9e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011ec2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	20001b58 	.word	0x20001b58
 8011ecc:	20001494 	.word	0x20001494
 8011ed0:	20001758 	.word	0x20001758

08011ed4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011ed8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bc80      	pop	{r7}
 8011ee0:	4770      	bx	lr
	...

08011ee4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011ee4:	b480      	push	{r7}
 8011ee6:	b083      	sub	sp, #12
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	4603      	mov	r3, r0
 8011eec:	6039      	str	r1, [r7, #0]
 8011eee:	71fb      	strb	r3, [r7, #7]
 8011ef0:	4613      	mov	r3, r2
 8011ef2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011ef4:	79fb      	ldrb	r3, [r7, #7]
 8011ef6:	2b23      	cmp	r3, #35	; 0x23
 8011ef8:	d84a      	bhi.n	8011f90 <CDC_Control_FS+0xac>
 8011efa:	a201      	add	r2, pc, #4	; (adr r2, 8011f00 <CDC_Control_FS+0x1c>)
 8011efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f00:	08011f91 	.word	0x08011f91
 8011f04:	08011f91 	.word	0x08011f91
 8011f08:	08011f91 	.word	0x08011f91
 8011f0c:	08011f91 	.word	0x08011f91
 8011f10:	08011f91 	.word	0x08011f91
 8011f14:	08011f91 	.word	0x08011f91
 8011f18:	08011f91 	.word	0x08011f91
 8011f1c:	08011f91 	.word	0x08011f91
 8011f20:	08011f91 	.word	0x08011f91
 8011f24:	08011f91 	.word	0x08011f91
 8011f28:	08011f91 	.word	0x08011f91
 8011f2c:	08011f91 	.word	0x08011f91
 8011f30:	08011f91 	.word	0x08011f91
 8011f34:	08011f91 	.word	0x08011f91
 8011f38:	08011f91 	.word	0x08011f91
 8011f3c:	08011f91 	.word	0x08011f91
 8011f40:	08011f91 	.word	0x08011f91
 8011f44:	08011f91 	.word	0x08011f91
 8011f48:	08011f91 	.word	0x08011f91
 8011f4c:	08011f91 	.word	0x08011f91
 8011f50:	08011f91 	.word	0x08011f91
 8011f54:	08011f91 	.word	0x08011f91
 8011f58:	08011f91 	.word	0x08011f91
 8011f5c:	08011f91 	.word	0x08011f91
 8011f60:	08011f91 	.word	0x08011f91
 8011f64:	08011f91 	.word	0x08011f91
 8011f68:	08011f91 	.word	0x08011f91
 8011f6c:	08011f91 	.word	0x08011f91
 8011f70:	08011f91 	.word	0x08011f91
 8011f74:	08011f91 	.word	0x08011f91
 8011f78:	08011f91 	.word	0x08011f91
 8011f7c:	08011f91 	.word	0x08011f91
 8011f80:	08011f91 	.word	0x08011f91
 8011f84:	08011f91 	.word	0x08011f91
 8011f88:	08011f91 	.word	0x08011f91
 8011f8c:	08011f91 	.word	0x08011f91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011f90:	bf00      	nop
  }

  return (USBD_OK);
 8011f92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	370c      	adds	r7, #12
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bc80      	pop	{r7}
 8011f9c:	4770      	bx	lr
 8011f9e:	bf00      	nop

08011fa0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011faa:	6879      	ldr	r1, [r7, #4]
 8011fac:	4805      	ldr	r0, [pc, #20]	; (8011fc4 <CDC_Receive_FS+0x24>)
 8011fae:	f7fe fe76 	bl	8010c9e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011fb2:	4804      	ldr	r0, [pc, #16]	; (8011fc4 <CDC_Receive_FS+0x24>)
 8011fb4:	f7fe fe86 	bl	8010cc4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011fb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3708      	adds	r7, #8
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	20001494 	.word	0x20001494

08011fc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	4603      	mov	r3, r0
 8011fd0:	6039      	str	r1, [r7, #0]
 8011fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	2212      	movs	r2, #18
 8011fd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011fda:	4b03      	ldr	r3, [pc, #12]	; (8011fe8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	370c      	adds	r7, #12
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bc80      	pop	{r7}
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop
 8011fe8:	20000948 	.word	0x20000948

08011fec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fec:	b480      	push	{r7}
 8011fee:	b083      	sub	sp, #12
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	6039      	str	r1, [r7, #0]
 8011ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	2204      	movs	r2, #4
 8011ffc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011ffe:	4b03      	ldr	r3, [pc, #12]	; (801200c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012000:	4618      	mov	r0, r3
 8012002:	370c      	adds	r7, #12
 8012004:	46bd      	mov	sp, r7
 8012006:	bc80      	pop	{r7}
 8012008:	4770      	bx	lr
 801200a:	bf00      	nop
 801200c:	2000095c 	.word	0x2000095c

08012010 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b082      	sub	sp, #8
 8012014:	af00      	add	r7, sp, #0
 8012016:	4603      	mov	r3, r0
 8012018:	6039      	str	r1, [r7, #0]
 801201a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801201c:	79fb      	ldrb	r3, [r7, #7]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d105      	bne.n	801202e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012022:	683a      	ldr	r2, [r7, #0]
 8012024:	4907      	ldr	r1, [pc, #28]	; (8012044 <USBD_FS_ProductStrDescriptor+0x34>)
 8012026:	4808      	ldr	r0, [pc, #32]	; (8012048 <USBD_FS_ProductStrDescriptor+0x38>)
 8012028:	f7ff fe32 	bl	8011c90 <USBD_GetString>
 801202c:	e004      	b.n	8012038 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801202e:	683a      	ldr	r2, [r7, #0]
 8012030:	4904      	ldr	r1, [pc, #16]	; (8012044 <USBD_FS_ProductStrDescriptor+0x34>)
 8012032:	4805      	ldr	r0, [pc, #20]	; (8012048 <USBD_FS_ProductStrDescriptor+0x38>)
 8012034:	f7ff fe2c 	bl	8011c90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012038:	4b02      	ldr	r3, [pc, #8]	; (8012044 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801203a:	4618      	mov	r0, r3
 801203c:	3708      	adds	r7, #8
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop
 8012044:	20001f58 	.word	0x20001f58
 8012048:	080140d8 	.word	0x080140d8

0801204c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
 8012052:	4603      	mov	r3, r0
 8012054:	6039      	str	r1, [r7, #0]
 8012056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012058:	683a      	ldr	r2, [r7, #0]
 801205a:	4904      	ldr	r1, [pc, #16]	; (801206c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801205c:	4804      	ldr	r0, [pc, #16]	; (8012070 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801205e:	f7ff fe17 	bl	8011c90 <USBD_GetString>
  return USBD_StrDesc;
 8012062:	4b02      	ldr	r3, [pc, #8]	; (801206c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012064:	4618      	mov	r0, r3
 8012066:	3708      	adds	r7, #8
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}
 801206c:	20001f58 	.word	0x20001f58
 8012070:	080140f0 	.word	0x080140f0

08012074 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	4603      	mov	r3, r0
 801207c:	6039      	str	r1, [r7, #0]
 801207e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	221a      	movs	r2, #26
 8012084:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012086:	f000 f843 	bl	8012110 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801208a:	4b02      	ldr	r3, [pc, #8]	; (8012094 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801208c:	4618      	mov	r0, r3
 801208e:	3708      	adds	r7, #8
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}
 8012094:	20000960 	.word	0x20000960

08012098 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b082      	sub	sp, #8
 801209c:	af00      	add	r7, sp, #0
 801209e:	4603      	mov	r3, r0
 80120a0:	6039      	str	r1, [r7, #0]
 80120a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80120a4:	79fb      	ldrb	r3, [r7, #7]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d105      	bne.n	80120b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80120aa:	683a      	ldr	r2, [r7, #0]
 80120ac:	4907      	ldr	r1, [pc, #28]	; (80120cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80120ae:	4808      	ldr	r0, [pc, #32]	; (80120d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80120b0:	f7ff fdee 	bl	8011c90 <USBD_GetString>
 80120b4:	e004      	b.n	80120c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80120b6:	683a      	ldr	r2, [r7, #0]
 80120b8:	4904      	ldr	r1, [pc, #16]	; (80120cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80120ba:	4805      	ldr	r0, [pc, #20]	; (80120d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80120bc:	f7ff fde8 	bl	8011c90 <USBD_GetString>
  }
  return USBD_StrDesc;
 80120c0:	4b02      	ldr	r3, [pc, #8]	; (80120cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	3708      	adds	r7, #8
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}
 80120ca:	bf00      	nop
 80120cc:	20001f58 	.word	0x20001f58
 80120d0:	08014104 	.word	0x08014104

080120d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af00      	add	r7, sp, #0
 80120da:	4603      	mov	r3, r0
 80120dc:	6039      	str	r1, [r7, #0]
 80120de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80120e0:	79fb      	ldrb	r3, [r7, #7]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d105      	bne.n	80120f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80120e6:	683a      	ldr	r2, [r7, #0]
 80120e8:	4907      	ldr	r1, [pc, #28]	; (8012108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80120ea:	4808      	ldr	r0, [pc, #32]	; (801210c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80120ec:	f7ff fdd0 	bl	8011c90 <USBD_GetString>
 80120f0:	e004      	b.n	80120fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80120f2:	683a      	ldr	r2, [r7, #0]
 80120f4:	4904      	ldr	r1, [pc, #16]	; (8012108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80120f6:	4805      	ldr	r0, [pc, #20]	; (801210c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80120f8:	f7ff fdca 	bl	8011c90 <USBD_GetString>
  }
  return USBD_StrDesc;
 80120fc:	4b02      	ldr	r3, [pc, #8]	; (8012108 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3708      	adds	r7, #8
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	20001f58 	.word	0x20001f58
 801210c:	08014110 	.word	0x08014110

08012110 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b084      	sub	sp, #16
 8012114:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012116:	4b0f      	ldr	r3, [pc, #60]	; (8012154 <Get_SerialNum+0x44>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801211c:	4b0e      	ldr	r3, [pc, #56]	; (8012158 <Get_SerialNum+0x48>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012122:	4b0e      	ldr	r3, [pc, #56]	; (801215c <Get_SerialNum+0x4c>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012128:	68fa      	ldr	r2, [r7, #12]
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	4413      	add	r3, r2
 801212e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d009      	beq.n	801214a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012136:	2208      	movs	r2, #8
 8012138:	4909      	ldr	r1, [pc, #36]	; (8012160 <Get_SerialNum+0x50>)
 801213a:	68f8      	ldr	r0, [r7, #12]
 801213c:	f000 f814 	bl	8012168 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012140:	2204      	movs	r2, #4
 8012142:	4908      	ldr	r1, [pc, #32]	; (8012164 <Get_SerialNum+0x54>)
 8012144:	68b8      	ldr	r0, [r7, #8]
 8012146:	f000 f80f 	bl	8012168 <IntToUnicode>
  }
}
 801214a:	bf00      	nop
 801214c:	3710      	adds	r7, #16
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
 8012152:	bf00      	nop
 8012154:	1ffff7e8 	.word	0x1ffff7e8
 8012158:	1ffff7ec 	.word	0x1ffff7ec
 801215c:	1ffff7f0 	.word	0x1ffff7f0
 8012160:	20000962 	.word	0x20000962
 8012164:	20000972 	.word	0x20000972

08012168 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012168:	b480      	push	{r7}
 801216a:	b087      	sub	sp, #28
 801216c:	af00      	add	r7, sp, #0
 801216e:	60f8      	str	r0, [r7, #12]
 8012170:	60b9      	str	r1, [r7, #8]
 8012172:	4613      	mov	r3, r2
 8012174:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012176:	2300      	movs	r3, #0
 8012178:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801217a:	2300      	movs	r3, #0
 801217c:	75fb      	strb	r3, [r7, #23]
 801217e:	e027      	b.n	80121d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	0f1b      	lsrs	r3, r3, #28
 8012184:	2b09      	cmp	r3, #9
 8012186:	d80b      	bhi.n	80121a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	0f1b      	lsrs	r3, r3, #28
 801218c:	b2da      	uxtb	r2, r3
 801218e:	7dfb      	ldrb	r3, [r7, #23]
 8012190:	005b      	lsls	r3, r3, #1
 8012192:	4619      	mov	r1, r3
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	440b      	add	r3, r1
 8012198:	3230      	adds	r2, #48	; 0x30
 801219a:	b2d2      	uxtb	r2, r2
 801219c:	701a      	strb	r2, [r3, #0]
 801219e:	e00a      	b.n	80121b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	0f1b      	lsrs	r3, r3, #28
 80121a4:	b2da      	uxtb	r2, r3
 80121a6:	7dfb      	ldrb	r3, [r7, #23]
 80121a8:	005b      	lsls	r3, r3, #1
 80121aa:	4619      	mov	r1, r3
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	440b      	add	r3, r1
 80121b0:	3237      	adds	r2, #55	; 0x37
 80121b2:	b2d2      	uxtb	r2, r2
 80121b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	011b      	lsls	r3, r3, #4
 80121ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80121bc:	7dfb      	ldrb	r3, [r7, #23]
 80121be:	005b      	lsls	r3, r3, #1
 80121c0:	3301      	adds	r3, #1
 80121c2:	68ba      	ldr	r2, [r7, #8]
 80121c4:	4413      	add	r3, r2
 80121c6:	2200      	movs	r2, #0
 80121c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80121ca:	7dfb      	ldrb	r3, [r7, #23]
 80121cc:	3301      	adds	r3, #1
 80121ce:	75fb      	strb	r3, [r7, #23]
 80121d0:	7dfa      	ldrb	r2, [r7, #23]
 80121d2:	79fb      	ldrb	r3, [r7, #7]
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d3d3      	bcc.n	8012180 <IntToUnicode+0x18>
  }
}
 80121d8:	bf00      	nop
 80121da:	bf00      	nop
 80121dc:	371c      	adds	r7, #28
 80121de:	46bd      	mov	sp, r7
 80121e0:	bc80      	pop	{r7}
 80121e2:	4770      	bx	lr

080121e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b084      	sub	sp, #16
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	4a0d      	ldr	r2, [pc, #52]	; (8012228 <HAL_PCD_MspInit+0x44>)
 80121f2:	4293      	cmp	r3, r2
 80121f4:	d113      	bne.n	801221e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80121f6:	4b0d      	ldr	r3, [pc, #52]	; (801222c <HAL_PCD_MspInit+0x48>)
 80121f8:	69db      	ldr	r3, [r3, #28]
 80121fa:	4a0c      	ldr	r2, [pc, #48]	; (801222c <HAL_PCD_MspInit+0x48>)
 80121fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012200:	61d3      	str	r3, [r2, #28]
 8012202:	4b0a      	ldr	r3, [pc, #40]	; (801222c <HAL_PCD_MspInit+0x48>)
 8012204:	69db      	ldr	r3, [r3, #28]
 8012206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801220a:	60fb      	str	r3, [r7, #12]
 801220c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 801220e:	2200      	movs	r2, #0
 8012210:	2100      	movs	r1, #0
 8012212:	2014      	movs	r0, #20
 8012214:	f7f5 f881 	bl	800731a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8012218:	2014      	movs	r0, #20
 801221a:	f7f5 f89a 	bl	8007352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801221e:	bf00      	nop
 8012220:	3710      	adds	r7, #16
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	40005c00 	.word	0x40005c00
 801222c:	40021000 	.word	0x40021000

08012230 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b082      	sub	sp, #8
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012244:	4619      	mov	r1, r3
 8012246:	4610      	mov	r0, r2
 8012248:	f7fe fdf2 	bl	8010e30 <USBD_LL_SetupStage>
}
 801224c:	bf00      	nop
 801224e:	3708      	adds	r7, #8
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}

08012254 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	460b      	mov	r3, r1
 801225e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8012266:	78fa      	ldrb	r2, [r7, #3]
 8012268:	6879      	ldr	r1, [r7, #4]
 801226a:	4613      	mov	r3, r2
 801226c:	009b      	lsls	r3, r3, #2
 801226e:	4413      	add	r3, r2
 8012270:	00db      	lsls	r3, r3, #3
 8012272:	440b      	add	r3, r1
 8012274:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8012278:	681a      	ldr	r2, [r3, #0]
 801227a:	78fb      	ldrb	r3, [r7, #3]
 801227c:	4619      	mov	r1, r3
 801227e:	f7fe fe24 	bl	8010eca <USBD_LL_DataOutStage>
}
 8012282:	bf00      	nop
 8012284:	3708      	adds	r7, #8
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}

0801228a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801228a:	b580      	push	{r7, lr}
 801228c:	b082      	sub	sp, #8
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
 8012292:	460b      	mov	r3, r1
 8012294:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 801229c:	78fa      	ldrb	r2, [r7, #3]
 801229e:	6879      	ldr	r1, [r7, #4]
 80122a0:	4613      	mov	r3, r2
 80122a2:	009b      	lsls	r3, r3, #2
 80122a4:	4413      	add	r3, r2
 80122a6:	00db      	lsls	r3, r3, #3
 80122a8:	440b      	add	r3, r1
 80122aa:	333c      	adds	r3, #60	; 0x3c
 80122ac:	681a      	ldr	r2, [r3, #0]
 80122ae:	78fb      	ldrb	r3, [r7, #3]
 80122b0:	4619      	mov	r1, r3
 80122b2:	f7fe fe7b 	bl	8010fac <USBD_LL_DataInStage>
}
 80122b6:	bf00      	nop
 80122b8:	3708      	adds	r7, #8
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}

080122be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122be:	b580      	push	{r7, lr}
 80122c0:	b082      	sub	sp, #8
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7fe ff8b 	bl	80111e8 <USBD_LL_SOF>
}
 80122d2:	bf00      	nop
 80122d4:	3708      	adds	r7, #8
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}

080122da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80122da:	b580      	push	{r7, lr}
 80122dc:	b084      	sub	sp, #16
 80122de:	af00      	add	r7, sp, #0
 80122e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80122e2:	2301      	movs	r3, #1
 80122e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	689b      	ldr	r3, [r3, #8]
 80122ea:	2b02      	cmp	r3, #2
 80122ec:	d001      	beq.n	80122f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80122ee:	f7f0 fcad 	bl	8002c4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80122f8:	7bfa      	ldrb	r2, [r7, #15]
 80122fa:	4611      	mov	r1, r2
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7fe ff3b 	bl	8011178 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8012308:	4618      	mov	r0, r3
 801230a:	f7fe fef4 	bl	80110f6 <USBD_LL_Reset>
}
 801230e:	bf00      	nop
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
	...

08012318 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8012326:	4618      	mov	r0, r3
 8012328:	f7fe ff35 	bl	8011196 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	699b      	ldr	r3, [r3, #24]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d005      	beq.n	8012340 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012334:	4b04      	ldr	r3, [pc, #16]	; (8012348 <HAL_PCD_SuspendCallback+0x30>)
 8012336:	691b      	ldr	r3, [r3, #16]
 8012338:	4a03      	ldr	r2, [pc, #12]	; (8012348 <HAL_PCD_SuspendCallback+0x30>)
 801233a:	f043 0306 	orr.w	r3, r3, #6
 801233e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012340:	bf00      	nop
 8012342:	3708      	adds	r7, #8
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}
 8012348:	e000ed00 	.word	0xe000ed00

0801234c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801235a:	4618      	mov	r0, r3
 801235c:	f7fe ff2f 	bl	80111be <USBD_LL_Resume>
}
 8012360:	bf00      	nop
 8012362:	3708      	adds	r7, #8
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}

08012368 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8012370:	4a28      	ldr	r2, [pc, #160]	; (8012414 <USBD_LL_Init+0xac>)
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	4a26      	ldr	r2, [pc, #152]	; (8012414 <USBD_LL_Init+0xac>)
 801237c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8012380:	4b24      	ldr	r3, [pc, #144]	; (8012414 <USBD_LL_Init+0xac>)
 8012382:	4a25      	ldr	r2, [pc, #148]	; (8012418 <USBD_LL_Init+0xb0>)
 8012384:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012386:	4b23      	ldr	r3, [pc, #140]	; (8012414 <USBD_LL_Init+0xac>)
 8012388:	2208      	movs	r2, #8
 801238a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801238c:	4b21      	ldr	r3, [pc, #132]	; (8012414 <USBD_LL_Init+0xac>)
 801238e:	2202      	movs	r2, #2
 8012390:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012392:	4b20      	ldr	r3, [pc, #128]	; (8012414 <USBD_LL_Init+0xac>)
 8012394:	2200      	movs	r2, #0
 8012396:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012398:	4b1e      	ldr	r3, [pc, #120]	; (8012414 <USBD_LL_Init+0xac>)
 801239a:	2200      	movs	r2, #0
 801239c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801239e:	4b1d      	ldr	r3, [pc, #116]	; (8012414 <USBD_LL_Init+0xac>)
 80123a0:	2200      	movs	r2, #0
 80123a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80123a4:	481b      	ldr	r0, [pc, #108]	; (8012414 <USBD_LL_Init+0xac>)
 80123a6:	f7f7 f8af 	bl	8009508 <HAL_PCD_Init>
 80123aa:	4603      	mov	r3, r0
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d001      	beq.n	80123b4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80123b0:	f7f0 fc4c 	bl	8002c4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80123ba:	2318      	movs	r3, #24
 80123bc:	2200      	movs	r2, #0
 80123be:	2100      	movs	r1, #0
 80123c0:	f7f8 fd23 	bl	800ae0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80123ca:	2358      	movs	r3, #88	; 0x58
 80123cc:	2200      	movs	r2, #0
 80123ce:	2180      	movs	r1, #128	; 0x80
 80123d0:	f7f8 fd1b 	bl	800ae0a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80123da:	23c0      	movs	r3, #192	; 0xc0
 80123dc:	2200      	movs	r2, #0
 80123de:	2181      	movs	r1, #129	; 0x81
 80123e0:	f7f8 fd13 	bl	800ae0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80123ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 80123ee:	2200      	movs	r2, #0
 80123f0:	2101      	movs	r1, #1
 80123f2:	f7f8 fd0a 	bl	800ae0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80123fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012400:	2200      	movs	r2, #0
 8012402:	2182      	movs	r1, #130	; 0x82
 8012404:	f7f8 fd01 	bl	800ae0a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012408:	2300      	movs	r3, #0
}
 801240a:	4618      	mov	r0, r3
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
 8012412:	bf00      	nop
 8012414:	20002158 	.word	0x20002158
 8012418:	40005c00 	.word	0x40005c00

0801241c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b084      	sub	sp, #16
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012424:	2300      	movs	r3, #0
 8012426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012428:	2300      	movs	r3, #0
 801242a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012432:	4618      	mov	r0, r3
 8012434:	f7f7 f973 	bl	800971e <HAL_PCD_Start>
 8012438:	4603      	mov	r3, r0
 801243a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801243c:	7bfb      	ldrb	r3, [r7, #15]
 801243e:	4618      	mov	r0, r3
 8012440:	f000 f94e 	bl	80126e0 <USBD_Get_USB_Status>
 8012444:	4603      	mov	r3, r0
 8012446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012448:	7bbb      	ldrb	r3, [r7, #14]
}
 801244a:	4618      	mov	r0, r3
 801244c:	3710      	adds	r7, #16
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}

08012452 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012452:	b580      	push	{r7, lr}
 8012454:	b084      	sub	sp, #16
 8012456:	af00      	add	r7, sp, #0
 8012458:	6078      	str	r0, [r7, #4]
 801245a:	4608      	mov	r0, r1
 801245c:	4611      	mov	r1, r2
 801245e:	461a      	mov	r2, r3
 8012460:	4603      	mov	r3, r0
 8012462:	70fb      	strb	r3, [r7, #3]
 8012464:	460b      	mov	r3, r1
 8012466:	70bb      	strb	r3, [r7, #2]
 8012468:	4613      	mov	r3, r2
 801246a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801246c:	2300      	movs	r3, #0
 801246e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012470:	2300      	movs	r3, #0
 8012472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801247a:	78bb      	ldrb	r3, [r7, #2]
 801247c:	883a      	ldrh	r2, [r7, #0]
 801247e:	78f9      	ldrb	r1, [r7, #3]
 8012480:	f7f7 faeb 	bl	8009a5a <HAL_PCD_EP_Open>
 8012484:	4603      	mov	r3, r0
 8012486:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012488:	7bfb      	ldrb	r3, [r7, #15]
 801248a:	4618      	mov	r0, r3
 801248c:	f000 f928 	bl	80126e0 <USBD_Get_USB_Status>
 8012490:	4603      	mov	r3, r0
 8012492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012494:	7bbb      	ldrb	r3, [r7, #14]
}
 8012496:	4618      	mov	r0, r3
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801249e:	b580      	push	{r7, lr}
 80124a0:	b084      	sub	sp, #16
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
 80124a6:	460b      	mov	r3, r1
 80124a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124aa:	2300      	movs	r3, #0
 80124ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124ae:	2300      	movs	r3, #0
 80124b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80124b8:	78fa      	ldrb	r2, [r7, #3]
 80124ba:	4611      	mov	r1, r2
 80124bc:	4618      	mov	r0, r3
 80124be:	f7f7 fb32 	bl	8009b26 <HAL_PCD_EP_Close>
 80124c2:	4603      	mov	r3, r0
 80124c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124c6:	7bfb      	ldrb	r3, [r7, #15]
 80124c8:	4618      	mov	r0, r3
 80124ca:	f000 f909 	bl	80126e0 <USBD_Get_USB_Status>
 80124ce:	4603      	mov	r3, r0
 80124d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	460b      	mov	r3, r1
 80124e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124e8:	2300      	movs	r3, #0
 80124ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124ec:	2300      	movs	r3, #0
 80124ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80124f6:	78fa      	ldrb	r2, [r7, #3]
 80124f8:	4611      	mov	r1, r2
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7f7 fbf2 	bl	8009ce4 <HAL_PCD_EP_SetStall>
 8012500:	4603      	mov	r3, r0
 8012502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012504:	7bfb      	ldrb	r3, [r7, #15]
 8012506:	4618      	mov	r0, r3
 8012508:	f000 f8ea 	bl	80126e0 <USBD_Get_USB_Status>
 801250c:	4603      	mov	r3, r0
 801250e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012510:	7bbb      	ldrb	r3, [r7, #14]
}
 8012512:	4618      	mov	r0, r3
 8012514:	3710      	adds	r7, #16
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}

0801251a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801251a:	b580      	push	{r7, lr}
 801251c:	b084      	sub	sp, #16
 801251e:	af00      	add	r7, sp, #0
 8012520:	6078      	str	r0, [r7, #4]
 8012522:	460b      	mov	r3, r1
 8012524:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012526:	2300      	movs	r3, #0
 8012528:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801252a:	2300      	movs	r3, #0
 801252c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012534:	78fa      	ldrb	r2, [r7, #3]
 8012536:	4611      	mov	r1, r2
 8012538:	4618      	mov	r0, r3
 801253a:	f7f7 fc33 	bl	8009da4 <HAL_PCD_EP_ClrStall>
 801253e:	4603      	mov	r3, r0
 8012540:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012542:	7bfb      	ldrb	r3, [r7, #15]
 8012544:	4618      	mov	r0, r3
 8012546:	f000 f8cb 	bl	80126e0 <USBD_Get_USB_Status>
 801254a:	4603      	mov	r3, r0
 801254c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801254e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012550:	4618      	mov	r0, r3
 8012552:	3710      	adds	r7, #16
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}

08012558 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012558:	b480      	push	{r7}
 801255a:	b085      	sub	sp, #20
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
 8012560:	460b      	mov	r3, r1
 8012562:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801256a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801256c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012570:	2b00      	cmp	r3, #0
 8012572:	da0c      	bge.n	801258e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012574:	78fb      	ldrb	r3, [r7, #3]
 8012576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801257a:	68f9      	ldr	r1, [r7, #12]
 801257c:	1c5a      	adds	r2, r3, #1
 801257e:	4613      	mov	r3, r2
 8012580:	009b      	lsls	r3, r3, #2
 8012582:	4413      	add	r3, r2
 8012584:	00db      	lsls	r3, r3, #3
 8012586:	440b      	add	r3, r1
 8012588:	3302      	adds	r3, #2
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	e00b      	b.n	80125a6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801258e:	78fb      	ldrb	r3, [r7, #3]
 8012590:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012594:	68f9      	ldr	r1, [r7, #12]
 8012596:	4613      	mov	r3, r2
 8012598:	009b      	lsls	r3, r3, #2
 801259a:	4413      	add	r3, r2
 801259c:	00db      	lsls	r3, r3, #3
 801259e:	440b      	add	r3, r1
 80125a0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80125a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3714      	adds	r7, #20
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bc80      	pop	{r7}
 80125ae:	4770      	bx	lr

080125b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b084      	sub	sp, #16
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	460b      	mov	r3, r1
 80125ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125bc:	2300      	movs	r3, #0
 80125be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80125c0:	2300      	movs	r3, #0
 80125c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80125ca:	78fa      	ldrb	r2, [r7, #3]
 80125cc:	4611      	mov	r1, r2
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7f7 fa1e 	bl	8009a10 <HAL_PCD_SetAddress>
 80125d4:	4603      	mov	r3, r0
 80125d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80125d8:	7bfb      	ldrb	r3, [r7, #15]
 80125da:	4618      	mov	r0, r3
 80125dc:	f000 f880 	bl	80126e0 <USBD_Get_USB_Status>
 80125e0:	4603      	mov	r3, r0
 80125e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80125e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3710      	adds	r7, #16
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}

080125ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80125ee:	b580      	push	{r7, lr}
 80125f0:	b086      	sub	sp, #24
 80125f2:	af00      	add	r7, sp, #0
 80125f4:	60f8      	str	r0, [r7, #12]
 80125f6:	607a      	str	r2, [r7, #4]
 80125f8:	461a      	mov	r2, r3
 80125fa:	460b      	mov	r3, r1
 80125fc:	72fb      	strb	r3, [r7, #11]
 80125fe:	4613      	mov	r3, r2
 8012600:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012602:	2300      	movs	r3, #0
 8012604:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012606:	2300      	movs	r3, #0
 8012608:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012610:	893b      	ldrh	r3, [r7, #8]
 8012612:	7af9      	ldrb	r1, [r7, #11]
 8012614:	687a      	ldr	r2, [r7, #4]
 8012616:	f7f7 fb22 	bl	8009c5e <HAL_PCD_EP_Transmit>
 801261a:	4603      	mov	r3, r0
 801261c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801261e:	7dfb      	ldrb	r3, [r7, #23]
 8012620:	4618      	mov	r0, r3
 8012622:	f000 f85d 	bl	80126e0 <USBD_Get_USB_Status>
 8012626:	4603      	mov	r3, r0
 8012628:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801262a:	7dbb      	ldrb	r3, [r7, #22]
}
 801262c:	4618      	mov	r0, r3
 801262e:	3718      	adds	r7, #24
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b086      	sub	sp, #24
 8012638:	af00      	add	r7, sp, #0
 801263a:	60f8      	str	r0, [r7, #12]
 801263c:	607a      	str	r2, [r7, #4]
 801263e:	461a      	mov	r2, r3
 8012640:	460b      	mov	r3, r1
 8012642:	72fb      	strb	r3, [r7, #11]
 8012644:	4613      	mov	r3, r2
 8012646:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012648:	2300      	movs	r3, #0
 801264a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801264c:	2300      	movs	r3, #0
 801264e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012656:	893b      	ldrh	r3, [r7, #8]
 8012658:	7af9      	ldrb	r1, [r7, #11]
 801265a:	687a      	ldr	r2, [r7, #4]
 801265c:	f7f7 faab 	bl	8009bb6 <HAL_PCD_EP_Receive>
 8012660:	4603      	mov	r3, r0
 8012662:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012664:	7dfb      	ldrb	r3, [r7, #23]
 8012666:	4618      	mov	r0, r3
 8012668:	f000 f83a 	bl	80126e0 <USBD_Get_USB_Status>
 801266c:	4603      	mov	r3, r0
 801266e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012670:	7dbb      	ldrb	r3, [r7, #22]
}
 8012672:	4618      	mov	r0, r3
 8012674:	3718      	adds	r7, #24
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}

0801267a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801267a:	b580      	push	{r7, lr}
 801267c:	b082      	sub	sp, #8
 801267e:	af00      	add	r7, sp, #0
 8012680:	6078      	str	r0, [r7, #4]
 8012682:	460b      	mov	r3, r1
 8012684:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801268c:	78fa      	ldrb	r2, [r7, #3]
 801268e:	4611      	mov	r1, r2
 8012690:	4618      	mov	r0, r3
 8012692:	f7f7 facd 	bl	8009c30 <HAL_PCD_EP_GetRxCount>
 8012696:	4603      	mov	r3, r0
}
 8012698:	4618      	mov	r0, r3
 801269a:	3708      	adds	r7, #8
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b083      	sub	sp, #12
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80126a8:	4b02      	ldr	r3, [pc, #8]	; (80126b4 <USBD_static_malloc+0x14>)
}
 80126aa:	4618      	mov	r0, r3
 80126ac:	370c      	adds	r7, #12
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bc80      	pop	{r7}
 80126b2:	4770      	bx	lr
 80126b4:	20002444 	.word	0x20002444

080126b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80126b8:	b480      	push	{r7}
 80126ba:	b083      	sub	sp, #12
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]

}
 80126c0:	bf00      	nop
 80126c2:	370c      	adds	r7, #12
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bc80      	pop	{r7}
 80126c8:	4770      	bx	lr

080126ca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126ca:	b480      	push	{r7}
 80126cc:	b083      	sub	sp, #12
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	6078      	str	r0, [r7, #4]
 80126d2:	460b      	mov	r3, r1
 80126d4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80126d6:	bf00      	nop
 80126d8:	370c      	adds	r7, #12
 80126da:	46bd      	mov	sp, r7
 80126dc:	bc80      	pop	{r7}
 80126de:	4770      	bx	lr

080126e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80126e0:	b480      	push	{r7}
 80126e2:	b085      	sub	sp, #20
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	4603      	mov	r3, r0
 80126e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80126ea:	2300      	movs	r3, #0
 80126ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80126ee:	79fb      	ldrb	r3, [r7, #7]
 80126f0:	2b03      	cmp	r3, #3
 80126f2:	d817      	bhi.n	8012724 <USBD_Get_USB_Status+0x44>
 80126f4:	a201      	add	r2, pc, #4	; (adr r2, 80126fc <USBD_Get_USB_Status+0x1c>)
 80126f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126fa:	bf00      	nop
 80126fc:	0801270d 	.word	0x0801270d
 8012700:	08012713 	.word	0x08012713
 8012704:	08012719 	.word	0x08012719
 8012708:	0801271f 	.word	0x0801271f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801270c:	2300      	movs	r3, #0
 801270e:	73fb      	strb	r3, [r7, #15]
    break;
 8012710:	e00b      	b.n	801272a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012712:	2302      	movs	r3, #2
 8012714:	73fb      	strb	r3, [r7, #15]
    break;
 8012716:	e008      	b.n	801272a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012718:	2301      	movs	r3, #1
 801271a:	73fb      	strb	r3, [r7, #15]
    break;
 801271c:	e005      	b.n	801272a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801271e:	2302      	movs	r3, #2
 8012720:	73fb      	strb	r3, [r7, #15]
    break;
 8012722:	e002      	b.n	801272a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012724:	2302      	movs	r3, #2
 8012726:	73fb      	strb	r3, [r7, #15]
    break;
 8012728:	bf00      	nop
  }
  return usb_status;
 801272a:	7bfb      	ldrb	r3, [r7, #15]
}
 801272c:	4618      	mov	r0, r3
 801272e:	3714      	adds	r7, #20
 8012730:	46bd      	mov	sp, r7
 8012732:	bc80      	pop	{r7}
 8012734:	4770      	bx	lr
 8012736:	bf00      	nop

08012738 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8012738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801273a:	2400      	movs	r4, #0
 801273c:	2310      	movs	r3, #16
 801273e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012742:	6803      	ldr	r3, [r0, #0]
 8012744:	4615      	mov	r5, r2
 8012746:	699e      	ldr	r6, [r3, #24]
 8012748:	e9cd 4400 	strd	r4, r4, [sp]
 801274c:	466b      	mov	r3, sp
 801274e:	6812      	ldr	r2, [r2, #0]
 8012750:	47b0      	blx	r6
 8012752:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012756:	f003 0306 	and.w	r3, r3, #6
 801275a:	2b06      	cmp	r3, #6
 801275c:	bf09      	itett	eq
 801275e:	2001      	moveq	r0, #1
 8012760:	4620      	movne	r0, r4
 8012762:	9b00      	ldreq	r3, [sp, #0]
 8012764:	602b      	streq	r3, [r5, #0]
 8012766:	b004      	add	sp, #16
 8012768:	bd70      	pop	{r4, r5, r6, pc}

0801276a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801276a:	9800      	ldr	r0, [sp, #0]
 801276c:	4290      	cmp	r0, r2
 801276e:	bf14      	ite	ne
 8012770:	2001      	movne	r0, #1
 8012772:	2006      	moveq	r0, #6
 8012774:	4770      	bx	lr
	...

08012778 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8012778:	b510      	push	{r4, lr}
 801277a:	4604      	mov	r4, r0
 801277c:	4b02      	ldr	r3, [pc, #8]	; (8012788 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801277e:	6003      	str	r3, [r0, #0]
 8012780:	f000 fda3 	bl	80132ca <_ZNSt9type_infoD1Ev>
 8012784:	4620      	mov	r0, r4
 8012786:	bd10      	pop	{r4, pc}
 8012788:	08015154 	.word	0x08015154

0801278c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801278c:	b510      	push	{r4, lr}
 801278e:	4604      	mov	r4, r0
 8012790:	f7ff fff2 	bl	8012778 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8012794:	4620      	mov	r0, r4
 8012796:	2108      	movs	r1, #8
 8012798:	f000 f842 	bl	8012820 <_ZdlPvj>
 801279c:	4620      	mov	r0, r4
 801279e:	bd10      	pop	{r4, pc}

080127a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80127a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127a4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80127a8:	461f      	mov	r7, r3
 80127aa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80127ae:	4598      	cmp	r8, r3
 80127b0:	4606      	mov	r6, r0
 80127b2:	4615      	mov	r5, r2
 80127b4:	d107      	bne.n	80127c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80127b6:	9907      	ldr	r1, [sp, #28]
 80127b8:	f000 fd8a 	bl	80132d0 <_ZNKSt9type_infoeqERKS_>
 80127bc:	b118      	cbz	r0, 80127c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80127be:	7165      	strb	r5, [r4, #5]
 80127c0:	2000      	movs	r0, #0
 80127c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127c6:	4639      	mov	r1, r7
 80127c8:	4630      	mov	r0, r6
 80127ca:	f000 fd81 	bl	80132d0 <_ZNKSt9type_infoeqERKS_>
 80127ce:	2800      	cmp	r0, #0
 80127d0:	d0f6      	beq.n	80127c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80127d2:	2301      	movs	r3, #1
 80127d4:	f8c4 8000 	str.w	r8, [r4]
 80127d8:	7125      	strb	r5, [r4, #4]
 80127da:	71a3      	strb	r3, [r4, #6]
 80127dc:	e7f0      	b.n	80127c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080127de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80127de:	b538      	push	{r3, r4, r5, lr}
 80127e0:	4615      	mov	r5, r2
 80127e2:	461c      	mov	r4, r3
 80127e4:	f000 fd74 	bl	80132d0 <_ZNKSt9type_infoeqERKS_>
 80127e8:	b120      	cbz	r0, 80127f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80127ea:	2308      	movs	r3, #8
 80127ec:	60e3      	str	r3, [r4, #12]
 80127ee:	2306      	movs	r3, #6
 80127f0:	6025      	str	r5, [r4, #0]
 80127f2:	7123      	strb	r3, [r4, #4]
 80127f4:	bd38      	pop	{r3, r4, r5, pc}

080127f6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80127f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127fa:	4605      	mov	r5, r0
 80127fc:	460c      	mov	r4, r1
 80127fe:	4616      	mov	r6, r2
 8012800:	461f      	mov	r7, r3
 8012802:	f000 fd65 	bl	80132d0 <_ZNKSt9type_infoeqERKS_>
 8012806:	b948      	cbnz	r0, 801281c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8012808:	2f03      	cmp	r7, #3
 801280a:	d807      	bhi.n	801281c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801280c:	6823      	ldr	r3, [r4, #0]
 801280e:	4632      	mov	r2, r6
 8012810:	4629      	mov	r1, r5
 8012812:	4620      	mov	r0, r4
 8012814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012818:	695b      	ldr	r3, [r3, #20]
 801281a:	4718      	bx	r3
 801281c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012820 <_ZdlPvj>:
 8012820:	f000 be4c 	b.w	80134bc <_ZdlPv>

08012824 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 8012824:	4a19      	ldr	r2, [pc, #100]	; (801288c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>)
 8012826:	b570      	push	{r4, r5, r6, lr}
 8012828:	6853      	ldr	r3, [r2, #4]
 801282a:	f1a0 0408 	sub.w	r4, r0, #8
 801282e:	b123      	cbz	r3, 801283a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x16>
 8012830:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8012834:	1865      	adds	r5, r4, r1
 8012836:	42ab      	cmp	r3, r5
 8012838:	d903      	bls.n	8012842 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 801283a:	f840 3c04 	str.w	r3, [r0, #-4]
 801283e:	6054      	str	r4, [r2, #4]
 8012840:	bd70      	pop	{r4, r5, r6, pc}
 8012842:	d105      	bne.n	8012850 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x2c>
 8012844:	e9d3 3500 	ldrd	r3, r5, [r3]
 8012848:	4419      	add	r1, r3
 801284a:	e940 1502 	strd	r1, r5, [r0, #-8]
 801284e:	e7f6      	b.n	801283e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1a>
 8012850:	3204      	adds	r2, #4
 8012852:	685e      	ldr	r6, [r3, #4]
 8012854:	b14e      	cbz	r6, 801286a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x46>
 8012856:	42b5      	cmp	r5, r6
 8012858:	d202      	bcs.n	8012860 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x3c>
 801285a:	1d1a      	adds	r2, r3, #4
 801285c:	4633      	mov	r3, r6
 801285e:	e7f8      	b.n	8012852 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x2e>
 8012860:	bf01      	itttt	eq
 8012862:	682e      	ldreq	r6, [r5, #0]
 8012864:	686d      	ldreq	r5, [r5, #4]
 8012866:	1989      	addeq	r1, r1, r6
 8012868:	605d      	streq	r5, [r3, #4]
 801286a:	6813      	ldr	r3, [r2, #0]
 801286c:	681d      	ldr	r5, [r3, #0]
 801286e:	195e      	adds	r6, r3, r5
 8012870:	42b4      	cmp	r4, r6
 8012872:	bf17      	itett	ne
 8012874:	685b      	ldrne	r3, [r3, #4]
 8012876:	1949      	addeq	r1, r1, r5
 8012878:	f840 3c04 	strne.w	r3, [r0, #-4]
 801287c:	6813      	ldrne	r3, [r2, #0]
 801287e:	bf16      	itet	ne
 8012880:	f840 1c08 	strne.w	r1, [r0, #-8]
 8012884:	6019      	streq	r1, [r3, #0]
 8012886:	605c      	strne	r4, [r3, #4]
 8012888:	e7da      	b.n	8012840 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1c>
 801288a:	bf00      	nop
 801288c:	20002664 	.word	0x20002664

08012890 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 8012890:	f100 0308 	add.w	r3, r0, #8
 8012894:	2b08      	cmp	r3, #8
 8012896:	bf38      	it	cc
 8012898:	2308      	movcc	r3, #8
 801289a:	b530      	push	{r4, r5, lr}
 801289c:	4a0d      	ldr	r2, [pc, #52]	; (80128d4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
 801289e:	3307      	adds	r3, #7
 80128a0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80128a4:	f023 0307 	bic.w	r3, r3, #7
 80128a8:	b168      	cbz	r0, 80128c6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x36>
 80128aa:	e9d0 1400 	ldrd	r1, r4, [r0]
 80128ae:	428b      	cmp	r3, r1
 80128b0:	d90a      	bls.n	80128c8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x38>
 80128b2:	1d02      	adds	r2, r0, #4
 80128b4:	4620      	mov	r0, r4
 80128b6:	e7f7      	b.n	80128a8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x18>
 80128b8:	18c1      	adds	r1, r0, r3
 80128ba:	604c      	str	r4, [r1, #4]
 80128bc:	50c5      	str	r5, [r0, r3]
 80128be:	6810      	ldr	r0, [r2, #0]
 80128c0:	6003      	str	r3, [r0, #0]
 80128c2:	6011      	str	r1, [r2, #0]
 80128c4:	3008      	adds	r0, #8
 80128c6:	bd30      	pop	{r4, r5, pc}
 80128c8:	1acd      	subs	r5, r1, r3
 80128ca:	2d07      	cmp	r5, #7
 80128cc:	d8f4      	bhi.n	80128b8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x28>
 80128ce:	6001      	str	r1, [r0, #0]
 80128d0:	6014      	str	r4, [r2, #0]
 80128d2:	e7f7      	b.n	80128c4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
 80128d4:	20002664 	.word	0x20002664

080128d8 <__cxa_allocate_exception>:
 80128d8:	b510      	push	{r4, lr}
 80128da:	f100 0480 	add.w	r4, r0, #128	; 0x80
 80128de:	4620      	mov	r0, r4
 80128e0:	f000 fe7a 	bl	80135d8 <malloc>
 80128e4:	4603      	mov	r3, r0
 80128e6:	b930      	cbnz	r0, 80128f6 <__cxa_allocate_exception+0x1e>
 80128e8:	4620      	mov	r0, r4
 80128ea:	f7ff ffd1 	bl	8012890 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 80128ee:	4603      	mov	r3, r0
 80128f0:	b908      	cbnz	r0, 80128f6 <__cxa_allocate_exception+0x1e>
 80128f2:	f000 fbe9 	bl	80130c8 <_ZSt9terminatev>
 80128f6:	2280      	movs	r2, #128	; 0x80
 80128f8:	2100      	movs	r1, #0
 80128fa:	4618      	mov	r0, r3
 80128fc:	f000 feb2 	bl	8013664 <memset>
 8012900:	3080      	adds	r0, #128	; 0x80
 8012902:	bd10      	pop	{r4, pc}

08012904 <__cxa_free_exception>:
 8012904:	4a06      	ldr	r2, [pc, #24]	; (8012920 <__cxa_free_exception+0x1c>)
 8012906:	3880      	subs	r0, #128	; 0x80
 8012908:	6893      	ldr	r3, [r2, #8]
 801290a:	4298      	cmp	r0, r3
 801290c:	d905      	bls.n	801291a <__cxa_free_exception+0x16>
 801290e:	68d2      	ldr	r2, [r2, #12]
 8012910:	4413      	add	r3, r2
 8012912:	4298      	cmp	r0, r3
 8012914:	d201      	bcs.n	801291a <__cxa_free_exception+0x16>
 8012916:	f7ff bf85 	b.w	8012824 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 801291a:	f000 be65 	b.w	80135e8 <free>
 801291e:	bf00      	nop
 8012920:	20002664 	.word	0x20002664

08012924 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8012924:	b538      	push	{r3, r4, r5, lr}
 8012926:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 801292a:	4c07      	ldr	r4, [pc, #28]	; (8012948 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 801292c:	4628      	mov	r0, r5
 801292e:	60e5      	str	r5, [r4, #12]
 8012930:	f000 fe52 	bl	80135d8 <malloc>
 8012934:	60a0      	str	r0, [r4, #8]
 8012936:	b910      	cbnz	r0, 801293e <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8012938:	60e0      	str	r0, [r4, #12]
 801293a:	6060      	str	r0, [r4, #4]
 801293c:	bd38      	pop	{r3, r4, r5, pc}
 801293e:	2300      	movs	r3, #0
 8012940:	6060      	str	r0, [r4, #4]
 8012942:	6005      	str	r5, [r0, #0]
 8012944:	6043      	str	r3, [r0, #4]
 8012946:	e7f9      	b.n	801293c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 8012948:	20002664 	.word	0x20002664

0801294c <__cxa_end_cleanup>:
 801294c:	b41e      	push	{r1, r2, r3, r4}
 801294e:	f000 f89c 	bl	8012a8a <__gnu_end_cleanup>
 8012952:	bc1e      	pop	{r1, r2, r3, r4}
 8012954:	f7ee fd7a 	bl	800144c <_Unwind_Resume>

08012958 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8012958:	7803      	ldrb	r3, [r0, #0]
 801295a:	2b47      	cmp	r3, #71	; 0x47
 801295c:	d117      	bne.n	801298e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801295e:	7843      	ldrb	r3, [r0, #1]
 8012960:	2b4e      	cmp	r3, #78	; 0x4e
 8012962:	d114      	bne.n	801298e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012964:	7883      	ldrb	r3, [r0, #2]
 8012966:	2b55      	cmp	r3, #85	; 0x55
 8012968:	d111      	bne.n	801298e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801296a:	78c3      	ldrb	r3, [r0, #3]
 801296c:	2b43      	cmp	r3, #67	; 0x43
 801296e:	d10e      	bne.n	801298e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012970:	7903      	ldrb	r3, [r0, #4]
 8012972:	2b43      	cmp	r3, #67	; 0x43
 8012974:	d10b      	bne.n	801298e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012976:	7943      	ldrb	r3, [r0, #5]
 8012978:	2b2b      	cmp	r3, #43	; 0x2b
 801297a:	d108      	bne.n	801298e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 801297c:	7983      	ldrb	r3, [r0, #6]
 801297e:	2b2b      	cmp	r3, #43	; 0x2b
 8012980:	d105      	bne.n	801298e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012982:	79c0      	ldrb	r0, [r0, #7]
 8012984:	2801      	cmp	r0, #1
 8012986:	bf8c      	ite	hi
 8012988:	2000      	movhi	r0, #0
 801298a:	2001      	movls	r0, #1
 801298c:	4770      	bx	lr
 801298e:	2000      	movs	r0, #0
 8012990:	4770      	bx	lr
	...

08012994 <__cxa_type_match>:
 8012994:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012998:	461d      	mov	r5, r3
 801299a:	7803      	ldrb	r3, [r0, #0]
 801299c:	460e      	mov	r6, r1
 801299e:	2b47      	cmp	r3, #71	; 0x47
 80129a0:	4602      	mov	r2, r0
 80129a2:	79c1      	ldrb	r1, [r0, #7]
 80129a4:	d113      	bne.n	80129ce <__cxa_type_match+0x3a>
 80129a6:	7843      	ldrb	r3, [r0, #1]
 80129a8:	2b4e      	cmp	r3, #78	; 0x4e
 80129aa:	d110      	bne.n	80129ce <__cxa_type_match+0x3a>
 80129ac:	7883      	ldrb	r3, [r0, #2]
 80129ae:	2b55      	cmp	r3, #85	; 0x55
 80129b0:	d10d      	bne.n	80129ce <__cxa_type_match+0x3a>
 80129b2:	78c3      	ldrb	r3, [r0, #3]
 80129b4:	2b43      	cmp	r3, #67	; 0x43
 80129b6:	d10a      	bne.n	80129ce <__cxa_type_match+0x3a>
 80129b8:	7903      	ldrb	r3, [r0, #4]
 80129ba:	2b46      	cmp	r3, #70	; 0x46
 80129bc:	d107      	bne.n	80129ce <__cxa_type_match+0x3a>
 80129be:	7943      	ldrb	r3, [r0, #5]
 80129c0:	2b4f      	cmp	r3, #79	; 0x4f
 80129c2:	d104      	bne.n	80129ce <__cxa_type_match+0x3a>
 80129c4:	7983      	ldrb	r3, [r0, #6]
 80129c6:	2b52      	cmp	r3, #82	; 0x52
 80129c8:	d101      	bne.n	80129ce <__cxa_type_match+0x3a>
 80129ca:	2900      	cmp	r1, #0
 80129cc:	d030      	beq.n	8012a30 <__cxa_type_match+0x9c>
 80129ce:	4610      	mov	r0, r2
 80129d0:	f7ff ffc2 	bl	8012958 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80129d4:	2300      	movs	r3, #0
 80129d6:	f080 0401 	eor.w	r4, r0, #1
 80129da:	b2e4      	uxtb	r4, r4
 80129dc:	2000      	movs	r0, #0
 80129de:	9001      	str	r0, [sp, #4]
 80129e0:	bb4b      	cbnz	r3, 8012a36 <__cxa_type_match+0xa2>
 80129e2:	bb54      	cbnz	r4, 8012a3a <__cxa_type_match+0xa6>
 80129e4:	2901      	cmp	r1, #1
 80129e6:	bf0a      	itet	eq
 80129e8:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 80129ec:	f1a2 0320 	subne.w	r3, r2, #32
 80129f0:	3b78      	subeq	r3, #120	; 0x78
 80129f2:	2901      	cmp	r1, #1
 80129f4:	bf0c      	ite	eq
 80129f6:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 80129fa:	3258      	addne	r2, #88	; 0x58
 80129fc:	681c      	ldr	r4, [r3, #0]
 80129fe:	9201      	str	r2, [sp, #4]
 8012a00:	6823      	ldr	r3, [r4, #0]
 8012a02:	4620      	mov	r0, r4
 8012a04:	689b      	ldr	r3, [r3, #8]
 8012a06:	4798      	blx	r3
 8012a08:	b1c8      	cbz	r0, 8012a3e <__cxa_type_match+0xaa>
 8012a0a:	2702      	movs	r7, #2
 8012a0c:	9b01      	ldr	r3, [sp, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	9301      	str	r3, [sp, #4]
 8012a12:	6833      	ldr	r3, [r6, #0]
 8012a14:	4621      	mov	r1, r4
 8012a16:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8012a1a:	4630      	mov	r0, r6
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	aa01      	add	r2, sp, #4
 8012a20:	47c0      	blx	r8
 8012a22:	b170      	cbz	r0, 8012a42 <__cxa_type_match+0xae>
 8012a24:	9b01      	ldr	r3, [sp, #4]
 8012a26:	602b      	str	r3, [r5, #0]
 8012a28:	4638      	mov	r0, r7
 8012a2a:	b002      	add	sp, #8
 8012a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a30:	2301      	movs	r3, #1
 8012a32:	460c      	mov	r4, r1
 8012a34:	e7d2      	b.n	80129dc <__cxa_type_match+0x48>
 8012a36:	4c04      	ldr	r4, [pc, #16]	; (8012a48 <__cxa_type_match+0xb4>)
 8012a38:	e7e2      	b.n	8012a00 <__cxa_type_match+0x6c>
 8012a3a:	4c04      	ldr	r4, [pc, #16]	; (8012a4c <__cxa_type_match+0xb8>)
 8012a3c:	e7e0      	b.n	8012a00 <__cxa_type_match+0x6c>
 8012a3e:	2701      	movs	r7, #1
 8012a40:	e7e7      	b.n	8012a12 <__cxa_type_match+0x7e>
 8012a42:	4607      	mov	r7, r0
 8012a44:	e7f0      	b.n	8012a28 <__cxa_type_match+0x94>
 8012a46:	bf00      	nop
 8012a48:	08015188 	.word	0x08015188
 8012a4c:	08015190 	.word	0x08015190

08012a50 <__cxa_begin_cleanup>:
 8012a50:	b510      	push	{r4, lr}
 8012a52:	4604      	mov	r4, r0
 8012a54:	f000 f8ae 	bl	8012bb4 <__cxa_get_globals>
 8012a58:	4602      	mov	r2, r0
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	f1a4 0120 	sub.w	r1, r4, #32
 8012a60:	f7ff ff7a 	bl	8012958 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012a64:	b160      	cbz	r0, 8012a80 <__cxa_begin_cleanup+0x30>
 8012a66:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012a6a:	3301      	adds	r3, #1
 8012a6c:	2b01      	cmp	r3, #1
 8012a6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012a72:	d103      	bne.n	8012a7c <__cxa_begin_cleanup+0x2c>
 8012a74:	6893      	ldr	r3, [r2, #8]
 8012a76:	f844 3c08 	str.w	r3, [r4, #-8]
 8012a7a:	6091      	str	r1, [r2, #8]
 8012a7c:	2001      	movs	r0, #1
 8012a7e:	bd10      	pop	{r4, pc}
 8012a80:	6893      	ldr	r3, [r2, #8]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d0f9      	beq.n	8012a7a <__cxa_begin_cleanup+0x2a>
 8012a86:	f000 fb1f 	bl	80130c8 <_ZSt9terminatev>

08012a8a <__gnu_end_cleanup>:
 8012a8a:	b510      	push	{r4, lr}
 8012a8c:	f000 f892 	bl	8012bb4 <__cxa_get_globals>
 8012a90:	6882      	ldr	r2, [r0, #8]
 8012a92:	4601      	mov	r1, r0
 8012a94:	b90a      	cbnz	r2, 8012a9a <__gnu_end_cleanup+0x10>
 8012a96:	f000 fb17 	bl	80130c8 <_ZSt9terminatev>
 8012a9a:	f102 0420 	add.w	r4, r2, #32
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f7ff ff5a 	bl	8012958 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012aa4:	b140      	cbz	r0, 8012ab8 <__gnu_end_cleanup+0x2e>
 8012aa6:	69d3      	ldr	r3, [r2, #28]
 8012aa8:	3b01      	subs	r3, #1
 8012aaa:	61d3      	str	r3, [r2, #28]
 8012aac:	b913      	cbnz	r3, 8012ab4 <__gnu_end_cleanup+0x2a>
 8012aae:	6990      	ldr	r0, [r2, #24]
 8012ab0:	6088      	str	r0, [r1, #8]
 8012ab2:	6193      	str	r3, [r2, #24]
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	bd10      	pop	{r4, pc}
 8012ab8:	6088      	str	r0, [r1, #8]
 8012aba:	e7fb      	b.n	8012ab4 <__gnu_end_cleanup+0x2a>

08012abc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8012abc:	7803      	ldrb	r3, [r0, #0]
 8012abe:	2b47      	cmp	r3, #71	; 0x47
 8012ac0:	d117      	bne.n	8012af2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012ac2:	7843      	ldrb	r3, [r0, #1]
 8012ac4:	2b4e      	cmp	r3, #78	; 0x4e
 8012ac6:	d114      	bne.n	8012af2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012ac8:	7883      	ldrb	r3, [r0, #2]
 8012aca:	2b55      	cmp	r3, #85	; 0x55
 8012acc:	d111      	bne.n	8012af2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012ace:	78c3      	ldrb	r3, [r0, #3]
 8012ad0:	2b43      	cmp	r3, #67	; 0x43
 8012ad2:	d10e      	bne.n	8012af2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012ad4:	7903      	ldrb	r3, [r0, #4]
 8012ad6:	2b43      	cmp	r3, #67	; 0x43
 8012ad8:	d10b      	bne.n	8012af2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012ada:	7943      	ldrb	r3, [r0, #5]
 8012adc:	2b2b      	cmp	r3, #43	; 0x2b
 8012ade:	d108      	bne.n	8012af2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012ae0:	7983      	ldrb	r3, [r0, #6]
 8012ae2:	2b2b      	cmp	r3, #43	; 0x2b
 8012ae4:	d105      	bne.n	8012af2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8012ae6:	79c0      	ldrb	r0, [r0, #7]
 8012ae8:	2801      	cmp	r0, #1
 8012aea:	bf8c      	ite	hi
 8012aec:	2000      	movhi	r0, #0
 8012aee:	2001      	movls	r0, #1
 8012af0:	4770      	bx	lr
 8012af2:	2000      	movs	r0, #0
 8012af4:	4770      	bx	lr

08012af6 <__cxa_begin_catch>:
 8012af6:	b538      	push	{r3, r4, r5, lr}
 8012af8:	4604      	mov	r4, r0
 8012afa:	f000 f85b 	bl	8012bb4 <__cxa_get_globals>
 8012afe:	4602      	mov	r2, r0
 8012b00:	6805      	ldr	r5, [r0, #0]
 8012b02:	4620      	mov	r0, r4
 8012b04:	f1a4 0120 	sub.w	r1, r4, #32
 8012b08:	f7ff ffd8 	bl	8012abc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012b0c:	b928      	cbnz	r0, 8012b1a <__cxa_begin_catch+0x24>
 8012b0e:	b10d      	cbz	r5, 8012b14 <__cxa_begin_catch+0x1e>
 8012b10:	f000 fada 	bl	80130c8 <_ZSt9terminatev>
 8012b14:	6011      	str	r1, [r2, #0]
 8012b16:	4628      	mov	r0, r5
 8012b18:	bd38      	pop	{r3, r4, r5, pc}
 8012b1a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8012b1e:	4620      	mov	r0, r4
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	bfb4      	ite	lt
 8012b24:	f1c3 0301 	rsblt	r3, r3, #1
 8012b28:	3301      	addge	r3, #1
 8012b2a:	f844 3c0c 	str.w	r3, [r4, #-12]
 8012b2e:	6853      	ldr	r3, [r2, #4]
 8012b30:	428d      	cmp	r5, r1
 8012b32:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012b36:	6053      	str	r3, [r2, #4]
 8012b38:	bf1c      	itt	ne
 8012b3a:	f844 5c10 	strne.w	r5, [r4, #-16]
 8012b3e:	6011      	strne	r1, [r2, #0]
 8012b40:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012b42:	f7ee f8cf 	bl	8000ce4 <_Unwind_Complete>
 8012b46:	e7e6      	b.n	8012b16 <__cxa_begin_catch+0x20>

08012b48 <__cxa_end_catch>:
 8012b48:	b510      	push	{r4, lr}
 8012b4a:	f000 f82f 	bl	8012bac <__cxa_get_globals_fast>
 8012b4e:	6802      	ldr	r2, [r0, #0]
 8012b50:	4601      	mov	r1, r0
 8012b52:	b19a      	cbz	r2, 8012b7c <__cxa_end_catch+0x34>
 8012b54:	f102 0420 	add.w	r4, r2, #32
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f7ff ffaf 	bl	8012abc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8012b5e:	b928      	cbnz	r0, 8012b6c <__cxa_end_catch+0x24>
 8012b60:	6008      	str	r0, [r1, #0]
 8012b62:	4620      	mov	r0, r4
 8012b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b68:	f7ee b8be 	b.w	8000ce8 <_Unwind_DeleteException>
 8012b6c:	6953      	ldr	r3, [r2, #20]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	da05      	bge.n	8012b7e <__cxa_end_catch+0x36>
 8012b72:	3301      	adds	r3, #1
 8012b74:	d101      	bne.n	8012b7a <__cxa_end_catch+0x32>
 8012b76:	6910      	ldr	r0, [r2, #16]
 8012b78:	6008      	str	r0, [r1, #0]
 8012b7a:	6153      	str	r3, [r2, #20]
 8012b7c:	bd10      	pop	{r4, pc}
 8012b7e:	3b01      	subs	r3, #1
 8012b80:	d102      	bne.n	8012b88 <__cxa_end_catch+0x40>
 8012b82:	6913      	ldr	r3, [r2, #16]
 8012b84:	600b      	str	r3, [r1, #0]
 8012b86:	e7ec      	b.n	8012b62 <__cxa_end_catch+0x1a>
 8012b88:	1c59      	adds	r1, r3, #1
 8012b8a:	d1f6      	bne.n	8012b7a <__cxa_end_catch+0x32>
 8012b8c:	f000 fa9c 	bl	80130c8 <_ZSt9terminatev>

08012b90 <_ZNSt9exceptionD1Ev>:
 8012b90:	4770      	bx	lr
	...

08012b94 <_ZGTtNKSt9exception4whatEv>:
 8012b94:	4800      	ldr	r0, [pc, #0]	; (8012b98 <_ZGTtNKSt9exception4whatEv+0x4>)
 8012b96:	4770      	bx	lr
 8012b98:	08015178 	.word	0x08015178

08012b9c <_ZNSt9exceptionD0Ev>:
 8012b9c:	b510      	push	{r4, lr}
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	2104      	movs	r1, #4
 8012ba2:	f7ff fe3d 	bl	8012820 <_ZdlPvj>
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	bd10      	pop	{r4, pc}
	...

08012bac <__cxa_get_globals_fast>:
 8012bac:	4800      	ldr	r0, [pc, #0]	; (8012bb0 <__cxa_get_globals_fast+0x4>)
 8012bae:	4770      	bx	lr
 8012bb0:	20002674 	.word	0x20002674

08012bb4 <__cxa_get_globals>:
 8012bb4:	4800      	ldr	r0, [pc, #0]	; (8012bb8 <__cxa_get_globals+0x4>)
 8012bb6:	4770      	bx	lr
 8012bb8:	20002674 	.word	0x20002674

08012bbc <_ZL12read_uleb128PKhPm>:
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	461a      	mov	r2, r3
 8012bc0:	b530      	push	{r4, r5, lr}
 8012bc2:	f810 5b01 	ldrb.w	r5, [r0], #1
 8012bc6:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 8012bca:	4094      	lsls	r4, r2
 8012bcc:	4323      	orrs	r3, r4
 8012bce:	062c      	lsls	r4, r5, #24
 8012bd0:	f102 0207 	add.w	r2, r2, #7
 8012bd4:	d4f5      	bmi.n	8012bc2 <_ZL12read_uleb128PKhPm+0x6>
 8012bd6:	600b      	str	r3, [r1, #0]
 8012bd8:	bd30      	pop	{r4, r5, pc}

08012bda <_ZL12read_sleb128PKhPl>:
 8012bda:	2300      	movs	r3, #0
 8012bdc:	461a      	mov	r2, r3
 8012bde:	b530      	push	{r4, r5, lr}
 8012be0:	f810 4b01 	ldrb.w	r4, [r0], #1
 8012be4:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8012be8:	4095      	lsls	r5, r2
 8012bea:	432b      	orrs	r3, r5
 8012bec:	0625      	lsls	r5, r4, #24
 8012bee:	f102 0207 	add.w	r2, r2, #7
 8012bf2:	d4f5      	bmi.n	8012be0 <_ZL12read_sleb128PKhPl+0x6>
 8012bf4:	2a1f      	cmp	r2, #31
 8012bf6:	d806      	bhi.n	8012c06 <_ZL12read_sleb128PKhPl+0x2c>
 8012bf8:	0664      	lsls	r4, r4, #25
 8012bfa:	bf42      	ittt	mi
 8012bfc:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 8012c00:	fa04 f202 	lslmi.w	r2, r4, r2
 8012c04:	4313      	orrmi	r3, r2
 8012c06:	600b      	str	r3, [r1, #0]
 8012c08:	bd30      	pop	{r4, r5, pc}

08012c0a <_ZL28read_encoded_value_with_basehjPKhPj>:
 8012c0a:	2850      	cmp	r0, #80	; 0x50
 8012c0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012c10:	4606      	mov	r6, r0
 8012c12:	4688      	mov	r8, r1
 8012c14:	4615      	mov	r5, r2
 8012c16:	461f      	mov	r7, r3
 8012c18:	d108      	bne.n	8012c2c <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8012c1a:	1cd0      	adds	r0, r2, #3
 8012c1c:	f020 0003 	bic.w	r0, r0, #3
 8012c20:	f850 4b04 	ldr.w	r4, [r0], #4
 8012c24:	603c      	str	r4, [r7, #0]
 8012c26:	b002      	add	sp, #8
 8012c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c2c:	f000 030f 	and.w	r3, r0, #15
 8012c30:	2b0c      	cmp	r3, #12
 8012c32:	d82e      	bhi.n	8012c92 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8012c34:	e8df f003 	tbb	[pc, r3]
 8012c38:	251d0725 	.word	0x251d0725
 8012c3c:	2d2d2d29 	.word	0x2d2d2d29
 8012c40:	2521182d 	.word	0x2521182d
 8012c44:	29          	.byte	0x29
 8012c45:	00          	.byte	0x00
 8012c46:	4628      	mov	r0, r5
 8012c48:	a901      	add	r1, sp, #4
 8012c4a:	f7ff ffb7 	bl	8012bbc <_ZL12read_uleb128PKhPm>
 8012c4e:	9c01      	ldr	r4, [sp, #4]
 8012c50:	2c00      	cmp	r4, #0
 8012c52:	d0e7      	beq.n	8012c24 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8012c54:	f006 0370 	and.w	r3, r6, #112	; 0x70
 8012c58:	2b10      	cmp	r3, #16
 8012c5a:	bf08      	it	eq
 8012c5c:	46a8      	moveq	r8, r5
 8012c5e:	0633      	lsls	r3, r6, #24
 8012c60:	4444      	add	r4, r8
 8012c62:	bf48      	it	mi
 8012c64:	6824      	ldrmi	r4, [r4, #0]
 8012c66:	e7dd      	b.n	8012c24 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8012c68:	4628      	mov	r0, r5
 8012c6a:	a901      	add	r1, sp, #4
 8012c6c:	f7ff ffb5 	bl	8012bda <_ZL12read_sleb128PKhPl>
 8012c70:	e7ed      	b.n	8012c4e <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8012c72:	4628      	mov	r0, r5
 8012c74:	f830 4b02 	ldrh.w	r4, [r0], #2
 8012c78:	e7ea      	b.n	8012c50 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8012c7a:	4628      	mov	r0, r5
 8012c7c:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8012c80:	e7e6      	b.n	8012c50 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8012c82:	4628      	mov	r0, r5
 8012c84:	f850 4b04 	ldr.w	r4, [r0], #4
 8012c88:	e7e2      	b.n	8012c50 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	f850 4b08 	ldr.w	r4, [r0], #8
 8012c90:	e7de      	b.n	8012c50 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8012c92:	f000 fc6f 	bl	8013574 <abort>

08012c96 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8012c96:	b508      	push	{r3, lr}
 8012c98:	4603      	mov	r3, r0
 8012c9a:	2bff      	cmp	r3, #255	; 0xff
 8012c9c:	4608      	mov	r0, r1
 8012c9e:	d010      	beq.n	8012cc2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8012ca0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8012ca4:	2a30      	cmp	r2, #48	; 0x30
 8012ca6:	d012      	beq.n	8012cce <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8012ca8:	d807      	bhi.n	8012cba <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 8012caa:	2a20      	cmp	r2, #32
 8012cac:	d00b      	beq.n	8012cc6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8012cae:	d802      	bhi.n	8012cb6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8012cb0:	f013 0f60 	tst.w	r3, #96	; 0x60
 8012cb4:	d005      	beq.n	8012cc2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8012cb6:	f000 fc5d 	bl	8013574 <abort>
 8012cba:	2a40      	cmp	r2, #64	; 0x40
 8012cbc:	d00b      	beq.n	8012cd6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8012cbe:	2a50      	cmp	r2, #80	; 0x50
 8012cc0:	d1f9      	bne.n	8012cb6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8012cc2:	2000      	movs	r0, #0
 8012cc4:	bd08      	pop	{r3, pc}
 8012cc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012cca:	f001 b95d 	b.w	8013f88 <_Unwind_GetTextRelBase>
 8012cce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012cd2:	f001 b956 	b.w	8013f82 <_Unwind_GetDataRelBase>
 8012cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012cda:	f7ee bdb5 	b.w	8001848 <_Unwind_GetRegionStart>

08012cde <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8012cde:	b570      	push	{r4, r5, r6, lr}
 8012ce0:	460c      	mov	r4, r1
 8012ce2:	4601      	mov	r1, r0
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	4615      	mov	r5, r2
 8012ce8:	461e      	mov	r6, r3
 8012cea:	f7ff ffd4 	bl	8012c96 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012cee:	4633      	mov	r3, r6
 8012cf0:	4601      	mov	r1, r0
 8012cf2:	462a      	mov	r2, r5
 8012cf4:	4620      	mov	r0, r4
 8012cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012cfa:	f7ff bf86 	b.w	8012c0a <_ZL28read_encoded_value_with_basehjPKhPj>

08012cfe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8012cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d00:	460c      	mov	r4, r1
 8012d02:	4615      	mov	r5, r2
 8012d04:	4606      	mov	r6, r0
 8012d06:	b328      	cbz	r0, 8012d54 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8012d08:	f7ee fd9e 	bl	8001848 <_Unwind_GetRegionStart>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	4620      	mov	r0, r4
 8012d10:	602b      	str	r3, [r5, #0]
 8012d12:	f810 1b01 	ldrb.w	r1, [r0], #1
 8012d16:	29ff      	cmp	r1, #255	; 0xff
 8012d18:	d01e      	beq.n	8012d58 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	1d2b      	adds	r3, r5, #4
 8012d1e:	4630      	mov	r0, r6
 8012d20:	f7ff ffdd 	bl	8012cde <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012d24:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012d28:	2bff      	cmp	r3, #255	; 0xff
 8012d2a:	752b      	strb	r3, [r5, #20]
 8012d2c:	d016      	beq.n	8012d5c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8012d2e:	2310      	movs	r3, #16
 8012d30:	a901      	add	r1, sp, #4
 8012d32:	752b      	strb	r3, [r5, #20]
 8012d34:	f7ff ff42 	bl	8012bbc <_ZL12read_uleb128PKhPm>
 8012d38:	9b01      	ldr	r3, [sp, #4]
 8012d3a:	4403      	add	r3, r0
 8012d3c:	60eb      	str	r3, [r5, #12]
 8012d3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012d42:	a901      	add	r1, sp, #4
 8012d44:	756b      	strb	r3, [r5, #21]
 8012d46:	f7ff ff39 	bl	8012bbc <_ZL12read_uleb128PKhPm>
 8012d4a:	9b01      	ldr	r3, [sp, #4]
 8012d4c:	4403      	add	r3, r0
 8012d4e:	612b      	str	r3, [r5, #16]
 8012d50:	b002      	add	sp, #8
 8012d52:	bd70      	pop	{r4, r5, r6, pc}
 8012d54:	4603      	mov	r3, r0
 8012d56:	e7da      	b.n	8012d0e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 8012d58:	606b      	str	r3, [r5, #4]
 8012d5a:	e7e3      	b.n	8012d24 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	e7ed      	b.n	8012d3c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08012d60 <_Unwind_GetGR>:
 8012d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d62:	ab03      	add	r3, sp, #12
 8012d64:	9300      	str	r3, [sp, #0]
 8012d66:	2300      	movs	r3, #0
 8012d68:	460a      	mov	r2, r1
 8012d6a:	4619      	mov	r1, r3
 8012d6c:	f7ed ffc2 	bl	8000cf4 <_Unwind_VRS_Get>
 8012d70:	9803      	ldr	r0, [sp, #12]
 8012d72:	b005      	add	sp, #20
 8012d74:	f85d fb04 	ldr.w	pc, [sp], #4

08012d78 <__gxx_personality_v0>:
 8012d78:	2300      	movs	r3, #0
 8012d7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7e:	b091      	sub	sp, #68	; 0x44
 8012d80:	9305      	str	r3, [sp, #20]
 8012d82:	f000 0303 	and.w	r3, r0, #3
 8012d86:	2b01      	cmp	r3, #1
 8012d88:	4606      	mov	r6, r0
 8012d8a:	460c      	mov	r4, r1
 8012d8c:	4617      	mov	r7, r2
 8012d8e:	d00e      	beq.n	8012dae <__gxx_personality_v0+0x36>
 8012d90:	2b02      	cmp	r3, #2
 8012d92:	d003      	beq.n	8012d9c <__gxx_personality_v0+0x24>
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d13b      	bne.n	8012e10 <__gxx_personality_v0+0x98>
 8012d98:	0701      	lsls	r1, r0, #28
 8012d9a:	d53b      	bpl.n	8012e14 <__gxx_personality_v0+0x9c>
 8012d9c:	4639      	mov	r1, r7
 8012d9e:	4620      	mov	r0, r4
 8012da0:	f7ee fd3a 	bl	8001818 <__gnu_unwind_frame>
 8012da4:	b390      	cbz	r0, 8012e0c <__gxx_personality_v0+0x94>
 8012da6:	2009      	movs	r0, #9
 8012da8:	b011      	add	sp, #68	; 0x44
 8012daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dae:	0702      	lsls	r2, r0, #28
 8012db0:	d406      	bmi.n	8012dc0 <__gxx_personality_v0+0x48>
 8012db2:	6a0d      	ldr	r5, [r1, #32]
 8012db4:	4638      	mov	r0, r7
 8012db6:	210d      	movs	r1, #13
 8012db8:	f7ff ffd2 	bl	8012d60 <_Unwind_GetGR>
 8012dbc:	4285      	cmp	r5, r0
 8012dbe:	d02b      	beq.n	8012e18 <__gxx_personality_v0+0xa0>
 8012dc0:	2002      	movs	r0, #2
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	f006 0608 	and.w	r6, r6, #8
 8012dc8:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8012dcc:	4306      	orrs	r6, r0
 8012dce:	220c      	movs	r2, #12
 8012dd0:	4619      	mov	r1, r3
 8012dd2:	4638      	mov	r0, r7
 8012dd4:	f8cd a000 	str.w	sl, [sp]
 8012dd8:	940a      	str	r4, [sp, #40]	; 0x28
 8012dda:	f7ed ffb1 	bl	8000d40 <_Unwind_VRS_Set>
 8012dde:	2e06      	cmp	r6, #6
 8012de0:	d11c      	bne.n	8012e1c <__gxx_personality_v0+0xa4>
 8012de2:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 8012de6:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8012dea:	f1b8 0f00 	cmp.w	r8, #0
 8012dee:	bf0c      	ite	eq
 8012df0:	f04f 0b01 	moveq.w	fp, #1
 8012df4:	f04f 0b03 	movne.w	fp, #3
 8012df8:	f016 0608 	ands.w	r6, r6, #8
 8012dfc:	f000 8107 	beq.w	801300e <__gxx_personality_v0+0x296>
 8012e00:	f1bb 0f01 	cmp.w	fp, #1
 8012e04:	f040 80ff 	bne.w	8013006 <__gxx_personality_v0+0x28e>
 8012e08:	f000 f95e 	bl	80130c8 <_ZSt9terminatev>
 8012e0c:	2008      	movs	r0, #8
 8012e0e:	e7cb      	b.n	8012da8 <__gxx_personality_v0+0x30>
 8012e10:	f000 fbb0 	bl	8013574 <abort>
 8012e14:	2001      	movs	r0, #1
 8012e16:	e7d4      	b.n	8012dc2 <__gxx_personality_v0+0x4a>
 8012e18:	2006      	movs	r0, #6
 8012e1a:	e7d2      	b.n	8012dc2 <__gxx_personality_v0+0x4a>
 8012e1c:	4638      	mov	r0, r7
 8012e1e:	f7ee fd19 	bl	8001854 <_Unwind_GetLanguageSpecificData>
 8012e22:	4681      	mov	r9, r0
 8012e24:	2800      	cmp	r0, #0
 8012e26:	d0b9      	beq.n	8012d9c <__gxx_personality_v0+0x24>
 8012e28:	4652      	mov	r2, sl
 8012e2a:	4601      	mov	r1, r0
 8012e2c:	4638      	mov	r0, r7
 8012e2e:	f7ff ff66 	bl	8012cfe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8012e32:	4639      	mov	r1, r7
 8012e34:	4605      	mov	r5, r0
 8012e36:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8012e3a:	f7ff ff2c 	bl	8012c96 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8012e3e:	210f      	movs	r1, #15
 8012e40:	900c      	str	r0, [sp, #48]	; 0x30
 8012e42:	4638      	mov	r0, r7
 8012e44:	f7ff ff8c 	bl	8012d60 <_Unwind_GetGR>
 8012e48:	f020 0801 	bic.w	r8, r0, #1
 8012e4c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e52:	42ab      	cmp	r3, r5
 8012e54:	f240 80bf 	bls.w	8012fd6 <__gxx_personality_v0+0x25e>
 8012e58:	462a      	mov	r2, r5
 8012e5a:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8012e5e:	ab06      	add	r3, sp, #24
 8012e60:	2000      	movs	r0, #0
 8012e62:	f7ff ff3c 	bl	8012cde <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012e66:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8012e6a:	4602      	mov	r2, r0
 8012e6c:	ab07      	add	r3, sp, #28
 8012e6e:	2000      	movs	r0, #0
 8012e70:	f7ff ff35 	bl	8012cde <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012e74:	ab08      	add	r3, sp, #32
 8012e76:	4602      	mov	r2, r0
 8012e78:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8012e7c:	2000      	movs	r0, #0
 8012e7e:	f7ff ff2e 	bl	8012cde <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8012e82:	a909      	add	r1, sp, #36	; 0x24
 8012e84:	f7ff fe9a 	bl	8012bbc <_ZL12read_uleb128PKhPm>
 8012e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e8a:	9a06      	ldr	r2, [sp, #24]
 8012e8c:	4605      	mov	r5, r0
 8012e8e:	4413      	add	r3, r2
 8012e90:	4543      	cmp	r3, r8
 8012e92:	d901      	bls.n	8012e98 <__gxx_personality_v0+0x120>
 8012e94:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8012e96:	e7db      	b.n	8012e50 <__gxx_personality_v0+0xd8>
 8012e98:	9a07      	ldr	r2, [sp, #28]
 8012e9a:	4413      	add	r3, r2
 8012e9c:	4543      	cmp	r3, r8
 8012e9e:	d9d7      	bls.n	8012e50 <__gxx_personality_v0+0xd8>
 8012ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ea4:	f1b8 0f00 	cmp.w	r8, #0
 8012ea8:	d001      	beq.n	8012eae <__gxx_personality_v0+0x136>
 8012eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012eac:	4498      	add	r8, r3
 8012eae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012eb0:	b115      	cbz	r5, 8012eb8 <__gxx_personality_v0+0x140>
 8012eb2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012eb4:	3d01      	subs	r5, #1
 8012eb6:	4405      	add	r5, r0
 8012eb8:	f1b8 0f00 	cmp.w	r8, #0
 8012ebc:	f43f af6e 	beq.w	8012d9c <__gxx_personality_v0+0x24>
 8012ec0:	2d00      	cmp	r5, #0
 8012ec2:	f000 80f2 	beq.w	80130aa <__gxx_personality_v0+0x332>
 8012ec6:	f016 0308 	ands.w	r3, r6, #8
 8012eca:	9302      	str	r3, [sp, #8]
 8012ecc:	d034      	beq.n	8012f38 <__gxx_personality_v0+0x1c0>
 8012ece:	2347      	movs	r3, #71	; 0x47
 8012ed0:	7023      	strb	r3, [r4, #0]
 8012ed2:	234e      	movs	r3, #78	; 0x4e
 8012ed4:	7063      	strb	r3, [r4, #1]
 8012ed6:	2355      	movs	r3, #85	; 0x55
 8012ed8:	70a3      	strb	r3, [r4, #2]
 8012eda:	2343      	movs	r3, #67	; 0x43
 8012edc:	70e3      	strb	r3, [r4, #3]
 8012ede:	2346      	movs	r3, #70	; 0x46
 8012ee0:	7123      	strb	r3, [r4, #4]
 8012ee2:	234f      	movs	r3, #79	; 0x4f
 8012ee4:	7163      	strb	r3, [r4, #5]
 8012ee6:	2352      	movs	r3, #82	; 0x52
 8012ee8:	71a3      	strb	r3, [r4, #6]
 8012eea:	2300      	movs	r3, #0
 8012eec:	71e3      	strb	r3, [r4, #7]
 8012eee:	f04f 0b00 	mov.w	fp, #0
 8012ef2:	a907      	add	r1, sp, #28
 8012ef4:	4628      	mov	r0, r5
 8012ef6:	f7ff fe70 	bl	8012bda <_ZL12read_sleb128PKhPl>
 8012efa:	a908      	add	r1, sp, #32
 8012efc:	9003      	str	r0, [sp, #12]
 8012efe:	f7ff fe6c 	bl	8012bda <_ZL12read_sleb128PKhPl>
 8012f02:	9907      	ldr	r1, [sp, #28]
 8012f04:	2900      	cmp	r1, #0
 8012f06:	d063      	beq.n	8012fd0 <__gxx_personality_v0+0x258>
 8012f08:	dd3a      	ble.n	8012f80 <__gxx_personality_v0+0x208>
 8012f0a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8012f0e:	28ff      	cmp	r0, #255	; 0xff
 8012f10:	d032      	beq.n	8012f78 <__gxx_personality_v0+0x200>
 8012f12:	f000 0307 	and.w	r3, r0, #7
 8012f16:	2b04      	cmp	r3, #4
 8012f18:	f63f af7a 	bhi.w	8012e10 <__gxx_personality_v0+0x98>
 8012f1c:	a201      	add	r2, pc, #4	; (adr r2, 8012f24 <__gxx_personality_v0+0x1ac>)
 8012f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f22:	bf00      	nop
 8012f24:	08012f7d 	.word	0x08012f7d
 8012f28:	08012e11 	.word	0x08012e11
 8012f2c:	08012f4b 	.word	0x08012f4b
 8012f30:	08012f7d 	.word	0x08012f7d
 8012f34:	08012f75 	.word	0x08012f75
 8012f38:	79e3      	ldrb	r3, [r4, #7]
 8012f3a:	2b01      	cmp	r3, #1
 8012f3c:	bf0c      	ite	eq
 8012f3e:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8012f42:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8012f46:	9305      	str	r3, [sp, #20]
 8012f48:	e7d1      	b.n	8012eee <__gxx_personality_v0+0x176>
 8012f4a:	2502      	movs	r5, #2
 8012f4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012f4e:	ab09      	add	r3, sp, #36	; 0x24
 8012f50:	fb05 2211 	mls	r2, r5, r1, r2
 8012f54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012f56:	f7ff fe58 	bl	8012c0a <_ZL28read_encoded_value_with_basehjPKhPj>
 8012f5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f5c:	b131      	cbz	r1, 8012f6c <__gxx_personality_v0+0x1f4>
 8012f5e:	b35c      	cbz	r4, 8012fb8 <__gxx_personality_v0+0x240>
 8012f60:	2200      	movs	r2, #0
 8012f62:	4620      	mov	r0, r4
 8012f64:	ab05      	add	r3, sp, #20
 8012f66:	f7ff fd15 	bl	8012994 <__cxa_type_match>
 8012f6a:	b328      	cbz	r0, 8012fb8 <__gxx_personality_v0+0x240>
 8012f6c:	f04f 0b03 	mov.w	fp, #3
 8012f70:	9d07      	ldr	r5, [sp, #28]
 8012f72:	e034      	b.n	8012fde <__gxx_personality_v0+0x266>
 8012f74:	2508      	movs	r5, #8
 8012f76:	e7e9      	b.n	8012f4c <__gxx_personality_v0+0x1d4>
 8012f78:	2500      	movs	r5, #0
 8012f7a:	e7e7      	b.n	8012f4c <__gxx_personality_v0+0x1d4>
 8012f7c:	2504      	movs	r5, #4
 8012f7e:	e7e5      	b.n	8012f4c <__gxx_personality_v0+0x1d4>
 8012f80:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 8012f84:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 8012f88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f8a:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8012f8e:	313f      	adds	r1, #63	; 0x3f
 8012f90:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8012f94:	b1bc      	cbz	r4, 8012fc6 <__gxx_personality_v0+0x24e>
 8012f96:	9a02      	ldr	r2, [sp, #8]
 8012f98:	b9aa      	cbnz	r2, 8012fc6 <__gxx_personality_v0+0x24e>
 8012f9a:	9b05      	ldr	r3, [sp, #20]
 8012f9c:	3d04      	subs	r5, #4
 8012f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8012fa0:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8012fa4:	2900      	cmp	r1, #0
 8012fa6:	d0e1      	beq.n	8012f6c <__gxx_personality_v0+0x1f4>
 8012fa8:	2200      	movs	r2, #0
 8012faa:	4620      	mov	r0, r4
 8012fac:	ab09      	add	r3, sp, #36	; 0x24
 8012fae:	4429      	add	r1, r5
 8012fb0:	f7ff fcf0 	bl	8012994 <__cxa_type_match>
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	d0f3      	beq.n	8012fa0 <__gxx_personality_v0+0x228>
 8012fb8:	9d08      	ldr	r5, [sp, #32]
 8012fba:	2d00      	cmp	r5, #0
 8012fbc:	d071      	beq.n	80130a2 <__gxx_personality_v0+0x32a>
 8012fbe:	9b03      	ldr	r3, [sp, #12]
 8012fc0:	442b      	add	r3, r5
 8012fc2:	461d      	mov	r5, r3
 8012fc4:	e795      	b.n	8012ef2 <__gxx_personality_v0+0x17a>
 8012fc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d1f4      	bne.n	8012fb8 <__gxx_personality_v0+0x240>
 8012fce:	e7cd      	b.n	8012f6c <__gxx_personality_v0+0x1f4>
 8012fd0:	f04f 0b01 	mov.w	fp, #1
 8012fd4:	e7f0      	b.n	8012fb8 <__gxx_personality_v0+0x240>
 8012fd6:	2500      	movs	r5, #0
 8012fd8:	f04f 0b01 	mov.w	fp, #1
 8012fdc:	46a8      	mov	r8, r5
 8012fde:	07f3      	lsls	r3, r6, #31
 8012fe0:	f57f af0a 	bpl.w	8012df8 <__gxx_personality_v0+0x80>
 8012fe4:	f1bb 0f02 	cmp.w	fp, #2
 8012fe8:	f43f aed8 	beq.w	8012d9c <__gxx_personality_v0+0x24>
 8012fec:	210d      	movs	r1, #13
 8012fee:	4638      	mov	r0, r7
 8012ff0:	9e05      	ldr	r6, [sp, #20]
 8012ff2:	f7ff feb5 	bl	8012d60 <_Unwind_GetGR>
 8012ff6:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 8012ffa:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8012ffe:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8013002:	2006      	movs	r0, #6
 8013004:	e6d0      	b.n	8012da8 <__gxx_personality_v0+0x30>
 8013006:	2d00      	cmp	r5, #0
 8013008:	da22      	bge.n	8013050 <__gxx_personality_v0+0x2d8>
 801300a:	f000 f86f 	bl	80130ec <_ZSt10unexpectedv>
 801300e:	f1bb 0f01 	cmp.w	fp, #1
 8013012:	d102      	bne.n	801301a <__gxx_personality_v0+0x2a2>
 8013014:	4620      	mov	r0, r4
 8013016:	f000 fa70 	bl	80134fa <__cxa_call_terminate>
 801301a:	2d00      	cmp	r5, #0
 801301c:	da18      	bge.n	8013050 <__gxx_personality_v0+0x2d8>
 801301e:	4652      	mov	r2, sl
 8013020:	4649      	mov	r1, r9
 8013022:	4638      	mov	r0, r7
 8013024:	f7ff fe6b 	bl	8012cfe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8013028:	4639      	mov	r1, r7
 801302a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801302e:	f7ff fe32 	bl	8012c96 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8013032:	43eb      	mvns	r3, r5
 8013034:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013036:	900c      	str	r0, [sp, #48]	; 0x30
 8013038:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801303c:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8013040:	b10a      	cbz	r2, 8013046 <__gxx_personality_v0+0x2ce>
 8013042:	3601      	adds	r6, #1
 8013044:	e7fa      	b.n	801303c <__gxx_personality_v0+0x2c4>
 8013046:	2204      	movs	r2, #4
 8013048:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 801304c:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8013050:	2300      	movs	r3, #0
 8013052:	ae09      	add	r6, sp, #36	; 0x24
 8013054:	461a      	mov	r2, r3
 8013056:	4619      	mov	r1, r3
 8013058:	4638      	mov	r0, r7
 801305a:	9600      	str	r6, [sp, #0]
 801305c:	9409      	str	r4, [sp, #36]	; 0x24
 801305e:	f7ed fe6f 	bl	8000d40 <_Unwind_VRS_Set>
 8013062:	2300      	movs	r3, #0
 8013064:	2201      	movs	r2, #1
 8013066:	4619      	mov	r1, r3
 8013068:	4638      	mov	r0, r7
 801306a:	9600      	str	r6, [sp, #0]
 801306c:	9509      	str	r5, [sp, #36]	; 0x24
 801306e:	f7ed fe67 	bl	8000d40 <_Unwind_VRS_Set>
 8013072:	210f      	movs	r1, #15
 8013074:	4638      	mov	r0, r7
 8013076:	f7ff fe73 	bl	8012d60 <_Unwind_GetGR>
 801307a:	2300      	movs	r3, #0
 801307c:	f000 0001 	and.w	r0, r0, #1
 8013080:	ea40 0008 	orr.w	r0, r0, r8
 8013084:	9009      	str	r0, [sp, #36]	; 0x24
 8013086:	220f      	movs	r2, #15
 8013088:	4619      	mov	r1, r3
 801308a:	4638      	mov	r0, r7
 801308c:	9600      	str	r6, [sp, #0]
 801308e:	f7ed fe57 	bl	8000d40 <_Unwind_VRS_Set>
 8013092:	f1bb 0f02 	cmp.w	fp, #2
 8013096:	d102      	bne.n	801309e <__gxx_personality_v0+0x326>
 8013098:	4620      	mov	r0, r4
 801309a:	f7ff fcd9 	bl	8012a50 <__cxa_begin_cleanup>
 801309e:	2007      	movs	r0, #7
 80130a0:	e682      	b.n	8012da8 <__gxx_personality_v0+0x30>
 80130a2:	f1bb 0f00 	cmp.w	fp, #0
 80130a6:	f43f ae79 	beq.w	8012d9c <__gxx_personality_v0+0x24>
 80130aa:	f04f 0b02 	mov.w	fp, #2
 80130ae:	e796      	b.n	8012fde <__gxx_personality_v0+0x266>

080130b0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80130b0:	b508      	push	{r3, lr}
 80130b2:	4780      	blx	r0
 80130b4:	f000 fa5e 	bl	8013574 <abort>

080130b8 <_ZSt13get_terminatev>:
 80130b8:	4b02      	ldr	r3, [pc, #8]	; (80130c4 <_ZSt13get_terminatev+0xc>)
 80130ba:	6818      	ldr	r0, [r3, #0]
 80130bc:	f3bf 8f5b 	dmb	ish
 80130c0:	4770      	bx	lr
 80130c2:	bf00      	nop
 80130c4:	20000980 	.word	0x20000980

080130c8 <_ZSt9terminatev>:
 80130c8:	b508      	push	{r3, lr}
 80130ca:	f7ff fff5 	bl	80130b8 <_ZSt13get_terminatev>
 80130ce:	f7ff ffef 	bl	80130b0 <_ZN10__cxxabiv111__terminateEPFvvE>

080130d2 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80130d2:	b508      	push	{r3, lr}
 80130d4:	4780      	blx	r0
 80130d6:	f7ff fff7 	bl	80130c8 <_ZSt9terminatev>
	...

080130dc <_ZSt14get_unexpectedv>:
 80130dc:	4b02      	ldr	r3, [pc, #8]	; (80130e8 <_ZSt14get_unexpectedv+0xc>)
 80130de:	6818      	ldr	r0, [r3, #0]
 80130e0:	f3bf 8f5b 	dmb	ish
 80130e4:	4770      	bx	lr
 80130e6:	bf00      	nop
 80130e8:	2000097c 	.word	0x2000097c

080130ec <_ZSt10unexpectedv>:
 80130ec:	b508      	push	{r3, lr}
 80130ee:	f7ff fff5 	bl	80130dc <_ZSt14get_unexpectedv>
 80130f2:	f7ff ffee 	bl	80130d2 <_ZN10__cxxabiv112__unexpectedEPFvvE>

080130f6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 80130f6:	2801      	cmp	r0, #1
 80130f8:	b510      	push	{r4, lr}
 80130fa:	d903      	bls.n	8013104 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 80130fc:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8013100:	f7ff ffd6 	bl	80130b0 <_ZN10__cxxabiv111__terminateEPFvvE>
 8013104:	f3bf 8f5b 	dmb	ish
 8013108:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 801310c:	e853 2f00 	ldrex	r2, [r3]
 8013110:	3a01      	subs	r2, #1
 8013112:	e843 2000 	strex	r0, r2, [r3]
 8013116:	2800      	cmp	r0, #0
 8013118:	d1f8      	bne.n	801310c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 801311a:	f3bf 8f5b 	dmb	ish
 801311e:	b95a      	cbnz	r2, 8013138 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x42>
 8013120:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8013124:	f101 0458 	add.w	r4, r1, #88	; 0x58
 8013128:	b10b      	cbz	r3, 801312e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x38>
 801312a:	4620      	mov	r0, r4
 801312c:	4798      	blx	r3
 801312e:	4620      	mov	r0, r4
 8013130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013134:	f7ff bbe6 	b.w	8012904 <__cxa_free_exception>
 8013138:	bd10      	pop	{r4, pc}
	...

0801313c <__cxa_init_primary_exception>:
 801313c:	b538      	push	{r3, r4, r5, lr}
 801313e:	2500      	movs	r5, #0
 8013140:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 8013144:	f840 5c80 	str.w	r5, [r0, #-128]
 8013148:	4604      	mov	r4, r0
 801314a:	f7ff ffc7 	bl	80130dc <_ZSt14get_unexpectedv>
 801314e:	f844 0c70 	str.w	r0, [r4, #-112]
 8013152:	f7ff ffb1 	bl	80130b8 <_ZSt13get_terminatev>
 8013156:	2347      	movs	r3, #71	; 0x47
 8013158:	f804 3c58 	strb.w	r3, [r4, #-88]
 801315c:	234e      	movs	r3, #78	; 0x4e
 801315e:	f804 3c57 	strb.w	r3, [r4, #-87]
 8013162:	2355      	movs	r3, #85	; 0x55
 8013164:	f804 3c56 	strb.w	r3, [r4, #-86]
 8013168:	2343      	movs	r3, #67	; 0x43
 801316a:	f804 3c55 	strb.w	r3, [r4, #-85]
 801316e:	f804 3c54 	strb.w	r3, [r4, #-84]
 8013172:	232b      	movs	r3, #43	; 0x2b
 8013174:	f804 3c53 	strb.w	r3, [r4, #-83]
 8013178:	f804 3c52 	strb.w	r3, [r4, #-82]
 801317c:	4b04      	ldr	r3, [pc, #16]	; (8013190 <__cxa_init_primary_exception+0x54>)
 801317e:	f844 0c6c 	str.w	r0, [r4, #-108]
 8013182:	f804 5c51 	strb.w	r5, [r4, #-81]
 8013186:	f844 3c50 	str.w	r3, [r4, #-80]
 801318a:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 801318e:	bd38      	pop	{r3, r4, r5, pc}
 8013190:	080130f7 	.word	0x080130f7

08013194 <__cxa_throw>:
 8013194:	b508      	push	{r3, lr}
 8013196:	4604      	mov	r4, r0
 8013198:	460d      	mov	r5, r1
 801319a:	4616      	mov	r6, r2
 801319c:	f7ff fd0a 	bl	8012bb4 <__cxa_get_globals>
 80131a0:	6843      	ldr	r3, [r0, #4]
 80131a2:	4632      	mov	r2, r6
 80131a4:	3301      	adds	r3, #1
 80131a6:	4629      	mov	r1, r5
 80131a8:	6043      	str	r3, [r0, #4]
 80131aa:	4620      	mov	r0, r4
 80131ac:	f7ff ffc6 	bl	801313c <__cxa_init_primary_exception>
 80131b0:	2301      	movs	r3, #1
 80131b2:	4604      	mov	r4, r0
 80131b4:	f844 3b28 	str.w	r3, [r4], #40
 80131b8:	4620      	mov	r0, r4
 80131ba:	f7ee f935 	bl	8001428 <_Unwind_RaiseException>
 80131be:	4620      	mov	r0, r4
 80131c0:	f7ff fc99 	bl	8012af6 <__cxa_begin_catch>
 80131c4:	f7ff ff80 	bl	80130c8 <_ZSt9terminatev>

080131c8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80131c8:	b510      	push	{r4, lr}
 80131ca:	4604      	mov	r4, r0
 80131cc:	4b02      	ldr	r3, [pc, #8]	; (80131d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80131ce:	6003      	str	r3, [r0, #0]
 80131d0:	f7ff fad2 	bl	8012778 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80131d4:	4620      	mov	r0, r4
 80131d6:	bd10      	pop	{r4, pc}
 80131d8:	08015244 	.word	0x08015244

080131dc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80131dc:	b510      	push	{r4, lr}
 80131de:	4604      	mov	r4, r0
 80131e0:	f7ff fff2 	bl	80131c8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80131e4:	4620      	mov	r0, r4
 80131e6:	210c      	movs	r1, #12
 80131e8:	f7ff fb1a 	bl	8012820 <_ZdlPvj>
 80131ec:	4620      	mov	r0, r4
 80131ee:	bd10      	pop	{r4, pc}

080131f0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80131f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131f4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80131f8:	4606      	mov	r6, r0
 80131fa:	4590      	cmp	r8, r2
 80131fc:	460f      	mov	r7, r1
 80131fe:	4615      	mov	r5, r2
 8013200:	461c      	mov	r4, r3
 8013202:	d00b      	beq.n	801321c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8013204:	68b0      	ldr	r0, [r6, #8]
 8013206:	462a      	mov	r2, r5
 8013208:	6803      	ldr	r3, [r0, #0]
 801320a:	f8cd 8018 	str.w	r8, [sp, #24]
 801320e:	6a1e      	ldr	r6, [r3, #32]
 8013210:	4639      	mov	r1, r7
 8013212:	4623      	mov	r3, r4
 8013214:	46b4      	mov	ip, r6
 8013216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801321a:	4760      	bx	ip
 801321c:	4619      	mov	r1, r3
 801321e:	f000 f857 	bl	80132d0 <_ZNKSt9type_infoeqERKS_>
 8013222:	2800      	cmp	r0, #0
 8013224:	d0ee      	beq.n	8013204 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8013226:	2006      	movs	r0, #6
 8013228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801322c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801322c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013230:	460d      	mov	r5, r1
 8013232:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8013236:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 801323a:	4619      	mov	r1, r3
 801323c:	4681      	mov	r9, r0
 801323e:	4617      	mov	r7, r2
 8013240:	4698      	mov	r8, r3
 8013242:	f000 f845 	bl	80132d0 <_ZNKSt9type_infoeqERKS_>
 8013246:	b190      	cbz	r0, 801326e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8013248:	2d00      	cmp	r5, #0
 801324a:	6034      	str	r4, [r6, #0]
 801324c:	7137      	strb	r7, [r6, #4]
 801324e:	db09      	blt.n	8013264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8013250:	442c      	add	r4, r5
 8013252:	45a2      	cmp	sl, r4
 8013254:	bf0c      	ite	eq
 8013256:	2406      	moveq	r4, #6
 8013258:	2401      	movne	r4, #1
 801325a:	71b4      	strb	r4, [r6, #6]
 801325c:	2000      	movs	r0, #0
 801325e:	b001      	add	sp, #4
 8013260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013264:	3502      	adds	r5, #2
 8013266:	d1f9      	bne.n	801325c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8013268:	2301      	movs	r3, #1
 801326a:	71b3      	strb	r3, [r6, #6]
 801326c:	e7f6      	b.n	801325c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801326e:	4554      	cmp	r4, sl
 8013270:	d106      	bne.n	8013280 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8013272:	4659      	mov	r1, fp
 8013274:	4648      	mov	r0, r9
 8013276:	f000 f82b 	bl	80132d0 <_ZNKSt9type_infoeqERKS_>
 801327a:	b108      	cbz	r0, 8013280 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801327c:	7177      	strb	r7, [r6, #5]
 801327e:	e7ed      	b.n	801325c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8013280:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8013284:	463a      	mov	r2, r7
 8013286:	6803      	ldr	r3, [r0, #0]
 8013288:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 801328c:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8013290:	69dc      	ldr	r4, [r3, #28]
 8013292:	4629      	mov	r1, r5
 8013294:	4643      	mov	r3, r8
 8013296:	46a4      	mov	ip, r4
 8013298:	b001      	add	sp, #4
 801329a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801329e:	4760      	bx	ip

080132a0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80132a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132a4:	4607      	mov	r7, r0
 80132a6:	460c      	mov	r4, r1
 80132a8:	4615      	mov	r5, r2
 80132aa:	461e      	mov	r6, r3
 80132ac:	f7ff fa97 	bl	80127de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80132b0:	b948      	cbnz	r0, 80132c6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80132b2:	68b8      	ldr	r0, [r7, #8]
 80132b4:	462a      	mov	r2, r5
 80132b6:	6803      	ldr	r3, [r0, #0]
 80132b8:	4621      	mov	r1, r4
 80132ba:	699f      	ldr	r7, [r3, #24]
 80132bc:	4633      	mov	r3, r6
 80132be:	46bc      	mov	ip, r7
 80132c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132c4:	4760      	bx	ip
 80132c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132ca <_ZNSt9type_infoD1Ev>:
 80132ca:	4770      	bx	lr

080132cc <_ZNKSt9type_info14__is_pointer_pEv>:
 80132cc:	2000      	movs	r0, #0
 80132ce:	4770      	bx	lr

080132d0 <_ZNKSt9type_infoeqERKS_>:
 80132d0:	4281      	cmp	r1, r0
 80132d2:	b508      	push	{r3, lr}
 80132d4:	d00e      	beq.n	80132f4 <_ZNKSt9type_infoeqERKS_+0x24>
 80132d6:	6840      	ldr	r0, [r0, #4]
 80132d8:	7803      	ldrb	r3, [r0, #0]
 80132da:	2b2a      	cmp	r3, #42	; 0x2a
 80132dc:	d00c      	beq.n	80132f8 <_ZNKSt9type_infoeqERKS_+0x28>
 80132de:	6849      	ldr	r1, [r1, #4]
 80132e0:	780b      	ldrb	r3, [r1, #0]
 80132e2:	2b2a      	cmp	r3, #42	; 0x2a
 80132e4:	bf08      	it	eq
 80132e6:	3101      	addeq	r1, #1
 80132e8:	f7ec ff30 	bl	800014c <strcmp>
 80132ec:	fab0 f080 	clz	r0, r0
 80132f0:	0940      	lsrs	r0, r0, #5
 80132f2:	bd08      	pop	{r3, pc}
 80132f4:	2001      	movs	r0, #1
 80132f6:	e7fc      	b.n	80132f2 <_ZNKSt9type_infoeqERKS_+0x22>
 80132f8:	2000      	movs	r0, #0
 80132fa:	e7fa      	b.n	80132f2 <_ZNKSt9type_infoeqERKS_+0x22>

080132fc <_ZNKSt11logic_error4whatEv>:
 80132fc:	6840      	ldr	r0, [r0, #4]
 80132fe:	4770      	bx	lr

08013300 <_ZNSt13runtime_errorD1Ev>:
 8013300:	b513      	push	{r0, r1, r4, lr}
 8013302:	4604      	mov	r4, r0
 8013304:	4b06      	ldr	r3, [pc, #24]	; (8013320 <_ZNSt13runtime_errorD1Ev+0x20>)
 8013306:	a901      	add	r1, sp, #4
 8013308:	6003      	str	r3, [r0, #0]
 801330a:	6840      	ldr	r0, [r0, #4]
 801330c:	380c      	subs	r0, #12
 801330e:	f000 f8bb 	bl	8013488 <_ZNSs4_Rep10_M_disposeERKSaIcE>
 8013312:	4620      	mov	r0, r4
 8013314:	f7ff fc3c 	bl	8012b90 <_ZNSt9exceptionD1Ev>
 8013318:	4620      	mov	r0, r4
 801331a:	b002      	add	sp, #8
 801331c:	bd10      	pop	{r4, pc}
 801331e:	bf00      	nop
 8013320:	080152d8 	.word	0x080152d8

08013324 <_ZNSt13runtime_errorD0Ev>:
 8013324:	b510      	push	{r4, lr}
 8013326:	4604      	mov	r4, r0
 8013328:	f7ff ffea 	bl	8013300 <_ZNSt13runtime_errorD1Ev>
 801332c:	4620      	mov	r0, r4
 801332e:	f000 f8c5 	bl	80134bc <_ZdlPv>
 8013332:	4620      	mov	r0, r4
 8013334:	bd10      	pop	{r4, pc}
	...

08013338 <_ZNSt11range_errorD1Ev>:
 8013338:	b510      	push	{r4, lr}
 801333a:	4604      	mov	r4, r0
 801333c:	4b02      	ldr	r3, [pc, #8]	; (8013348 <_ZNSt11range_errorD1Ev+0x10>)
 801333e:	6003      	str	r3, [r0, #0]
 8013340:	f7ff ffde 	bl	8013300 <_ZNSt13runtime_errorD1Ev>
 8013344:	4620      	mov	r0, r4
 8013346:	bd10      	pop	{r4, pc}
 8013348:	080152c4 	.word	0x080152c4

0801334c <_ZNSt11range_errorD0Ev>:
 801334c:	b510      	push	{r4, lr}
 801334e:	4604      	mov	r4, r0
 8013350:	f7ff fff2 	bl	8013338 <_ZNSt11range_errorD1Ev>
 8013354:	4620      	mov	r0, r4
 8013356:	f000 f8b1 	bl	80134bc <_ZdlPv>
 801335a:	4620      	mov	r0, r4
 801335c:	bd10      	pop	{r4, pc}
	...

08013360 <_ZNSsC2EPKcRKSaIcE.isra.0>:
 8013360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013364:	4607      	mov	r7, r0
 8013366:	4615      	mov	r5, r2
 8013368:	460c      	mov	r4, r1
 801336a:	b1d9      	cbz	r1, 80133a4 <_ZNSsC2EPKcRKSaIcE.isra.0+0x44>
 801336c:	4608      	mov	r0, r1
 801336e:	f7ec fef7 	bl	8000160 <strlen>
 8013372:	eb04 0900 	add.w	r9, r4, r0
 8013376:	454c      	cmp	r4, r9
 8013378:	4606      	mov	r6, r0
 801337a:	d016      	beq.n	80133aa <_ZNSsC2EPKcRKSaIcE.isra.0+0x4a>
 801337c:	462a      	mov	r2, r5
 801337e:	2100      	movs	r1, #0
 8013380:	f000 f850 	bl	8013424 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8013384:	4605      	mov	r5, r0
 8013386:	f100 080c 	add.w	r8, r0, #12
 801338a:	4621      	mov	r1, r4
 801338c:	4640      	mov	r0, r8
 801338e:	464a      	mov	r2, r9
 8013390:	f000 f836 	bl	8013400 <_ZNSs13_S_copy_charsEPcPKcS1_>
 8013394:	4631      	mov	r1, r6
 8013396:	4628      	mov	r0, r5
 8013398:	f000 f838 	bl	801340c <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 801339c:	f8c7 8000 	str.w	r8, [r7]
 80133a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133a4:	4802      	ldr	r0, [pc, #8]	; (80133b0 <_ZNSsC2EPKcRKSaIcE.isra.0+0x50>)
 80133a6:	f000 f880 	bl	80134aa <_ZSt19__throw_logic_errorPKc>
 80133aa:	f8df 8008 	ldr.w	r8, [pc, #8]	; 80133b4 <_ZNSsC2EPKcRKSaIcE.isra.0+0x54>
 80133ae:	e7f5      	b.n	801339c <_ZNSsC2EPKcRKSaIcE.isra.0+0x3c>
 80133b0:	080152e4 	.word	0x080152e4
 80133b4:	2000268c 	.word	0x2000268c

080133b8 <_ZNSt13runtime_errorC1EPKc>:
 80133b8:	b513      	push	{r0, r1, r4, lr}
 80133ba:	4604      	mov	r4, r0
 80133bc:	4b04      	ldr	r3, [pc, #16]	; (80133d0 <_ZNSt13runtime_errorC1EPKc+0x18>)
 80133be:	aa01      	add	r2, sp, #4
 80133c0:	f840 3b04 	str.w	r3, [r0], #4
 80133c4:	f7ff ffcc 	bl	8013360 <_ZNSsC2EPKcRKSaIcE.isra.0>
 80133c8:	4620      	mov	r0, r4
 80133ca:	b002      	add	sp, #8
 80133cc:	bd10      	pop	{r4, pc}
 80133ce:	bf00      	nop
 80133d0:	080152d8 	.word	0x080152d8

080133d4 <_ZNSt11range_errorC1EPKc>:
 80133d4:	b510      	push	{r4, lr}
 80133d6:	4604      	mov	r4, r0
 80133d8:	f7ff ffee 	bl	80133b8 <_ZNSt13runtime_errorC1EPKc>
 80133dc:	4b01      	ldr	r3, [pc, #4]	; (80133e4 <_ZNSt11range_errorC1EPKc+0x10>)
 80133de:	4620      	mov	r0, r4
 80133e0:	6023      	str	r3, [r4, #0]
 80133e2:	bd10      	pop	{r4, pc}
 80133e4:	080152c4 	.word	0x080152c4

080133e8 <_ZNSs7_M_copyEPcPKcj>:
 80133e8:	2a01      	cmp	r2, #1
 80133ea:	b430      	push	{r4, r5}
 80133ec:	d103      	bne.n	80133f6 <_ZNSs7_M_copyEPcPKcj+0xe>
 80133ee:	780b      	ldrb	r3, [r1, #0]
 80133f0:	7003      	strb	r3, [r0, #0]
 80133f2:	bc30      	pop	{r4, r5}
 80133f4:	4770      	bx	lr
 80133f6:	2a00      	cmp	r2, #0
 80133f8:	d0fb      	beq.n	80133f2 <_ZNSs7_M_copyEPcPKcj+0xa>
 80133fa:	bc30      	pop	{r4, r5}
 80133fc:	f000 b90a 	b.w	8013614 <memcpy>

08013400 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 8013400:	b508      	push	{r3, lr}
 8013402:	1a52      	subs	r2, r2, r1
 8013404:	f7ff fff0 	bl	80133e8 <_ZNSs7_M_copyEPcPKcj>
 8013408:	bd08      	pop	{r3, pc}
	...

0801340c <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 801340c:	4b04      	ldr	r3, [pc, #16]	; (8013420 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 801340e:	4298      	cmp	r0, r3
 8013410:	d004      	beq.n	801341c <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 8013412:	2300      	movs	r3, #0
 8013414:	6001      	str	r1, [r0, #0]
 8013416:	6083      	str	r3, [r0, #8]
 8013418:	4408      	add	r0, r1
 801341a:	7303      	strb	r3, [r0, #12]
 801341c:	4770      	bx	lr
 801341e:	bf00      	nop
 8013420:	20002680 	.word	0x20002680

08013424 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8013424:	4b15      	ldr	r3, [pc, #84]	; (801347c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8013426:	b510      	push	{r4, lr}
 8013428:	4298      	cmp	r0, r3
 801342a:	4604      	mov	r4, r0
 801342c:	d902      	bls.n	8013434 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 801342e:	4814      	ldr	r0, [pc, #80]	; (8013480 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 8013430:	f000 f83e 	bl	80134b0 <_ZSt20__throw_length_errorPKc>
 8013434:	4288      	cmp	r0, r1
 8013436:	d903      	bls.n	8013440 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8013438:	004b      	lsls	r3, r1, #1
 801343a:	4298      	cmp	r0, r3
 801343c:	bf38      	it	cc
 801343e:	461c      	movcc	r4, r3
 8013440:	f104 031d 	add.w	r3, r4, #29
 8013444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013448:	f104 000d 	add.w	r0, r4, #13
 801344c:	d90c      	bls.n	8013468 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 801344e:	428c      	cmp	r4, r1
 8013450:	d90a      	bls.n	8013468 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8013452:	480a      	ldr	r0, [pc, #40]	; (801347c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 8013454:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8013458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801345c:	1ae4      	subs	r4, r4, r3
 801345e:	4284      	cmp	r4, r0
 8013460:	bf28      	it	cs
 8013462:	4604      	movcs	r4, r0
 8013464:	f104 000d 	add.w	r0, r4, #13
 8013468:	2800      	cmp	r0, #0
 801346a:	da01      	bge.n	8013470 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 801346c:	f000 f81a 	bl	80134a4 <_ZSt17__throw_bad_allocv>
 8013470:	f000 f866 	bl	8013540 <_Znwj>
 8013474:	2200      	movs	r2, #0
 8013476:	6044      	str	r4, [r0, #4]
 8013478:	6082      	str	r2, [r0, #8]
 801347a:	bd10      	pop	{r4, pc}
 801347c:	3ffffffc 	.word	0x3ffffffc
 8013480:	0801530e 	.word	0x0801530e

08013484 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 8013484:	f000 b81a 	b.w	80134bc <_ZdlPv>

08013488 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 8013488:	4a05      	ldr	r2, [pc, #20]	; (80134a0 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x18>)
 801348a:	b510      	push	{r4, lr}
 801348c:	4290      	cmp	r0, r2
 801348e:	d006      	beq.n	801349e <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8013490:	6882      	ldr	r2, [r0, #8]
 8013492:	1e54      	subs	r4, r2, #1
 8013494:	2a00      	cmp	r2, #0
 8013496:	6084      	str	r4, [r0, #8]
 8013498:	dc01      	bgt.n	801349e <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 801349a:	f7ff fff3 	bl	8013484 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 801349e:	bd10      	pop	{r4, pc}
 80134a0:	20002680 	.word	0x20002680

080134a4 <_ZSt17__throw_bad_allocv>:
 80134a4:	b508      	push	{r3, lr}
 80134a6:	f000 f865 	bl	8013574 <abort>

080134aa <_ZSt19__throw_logic_errorPKc>:
 80134aa:	b508      	push	{r3, lr}
 80134ac:	f000 f862 	bl	8013574 <abort>

080134b0 <_ZSt20__throw_length_errorPKc>:
 80134b0:	b508      	push	{r3, lr}
 80134b2:	f000 f85f 	bl	8013574 <abort>

080134b6 <_ZSt25__throw_bad_function_callv>:
 80134b6:	b508      	push	{r3, lr}
 80134b8:	f000 f85c 	bl	8013574 <abort>

080134bc <_ZdlPv>:
 80134bc:	f000 b894 	b.w	80135e8 <free>

080134c0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80134c0:	7803      	ldrb	r3, [r0, #0]
 80134c2:	2b47      	cmp	r3, #71	; 0x47
 80134c4:	d117      	bne.n	80134f6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80134c6:	7843      	ldrb	r3, [r0, #1]
 80134c8:	2b4e      	cmp	r3, #78	; 0x4e
 80134ca:	d114      	bne.n	80134f6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80134cc:	7883      	ldrb	r3, [r0, #2]
 80134ce:	2b55      	cmp	r3, #85	; 0x55
 80134d0:	d111      	bne.n	80134f6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80134d2:	78c3      	ldrb	r3, [r0, #3]
 80134d4:	2b43      	cmp	r3, #67	; 0x43
 80134d6:	d10e      	bne.n	80134f6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80134d8:	7903      	ldrb	r3, [r0, #4]
 80134da:	2b43      	cmp	r3, #67	; 0x43
 80134dc:	d10b      	bne.n	80134f6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80134de:	7943      	ldrb	r3, [r0, #5]
 80134e0:	2b2b      	cmp	r3, #43	; 0x2b
 80134e2:	d108      	bne.n	80134f6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80134e4:	7983      	ldrb	r3, [r0, #6]
 80134e6:	2b2b      	cmp	r3, #43	; 0x2b
 80134e8:	d105      	bne.n	80134f6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80134ea:	79c0      	ldrb	r0, [r0, #7]
 80134ec:	2801      	cmp	r0, #1
 80134ee:	bf8c      	ite	hi
 80134f0:	2000      	movhi	r0, #0
 80134f2:	2001      	movls	r0, #1
 80134f4:	4770      	bx	lr
 80134f6:	2000      	movs	r0, #0
 80134f8:	4770      	bx	lr

080134fa <__cxa_call_terminate>:
 80134fa:	b510      	push	{r4, lr}
 80134fc:	4604      	mov	r4, r0
 80134fe:	b148      	cbz	r0, 8013514 <__cxa_call_terminate+0x1a>
 8013500:	f7ff faf9 	bl	8012af6 <__cxa_begin_catch>
 8013504:	4620      	mov	r0, r4
 8013506:	f7ff ffdb 	bl	80134c0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 801350a:	b118      	cbz	r0, 8013514 <__cxa_call_terminate+0x1a>
 801350c:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8013510:	f7ff fdce 	bl	80130b0 <_ZN10__cxxabiv111__terminateEPFvvE>
 8013514:	f7ff fdd8 	bl	80130c8 <_ZSt9terminatev>

08013518 <__cxa_call_unexpected>:
 8013518:	b538      	push	{r3, r4, r5, lr}
 801351a:	4602      	mov	r2, r0
 801351c:	f7ff ffd0 	bl	80134c0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8013520:	4604      	mov	r4, r0
 8013522:	b140      	cbz	r0, 8013536 <__cxa_call_unexpected+0x1e>
 8013524:	2500      	movs	r5, #0
 8013526:	f852 4c18 	ldr.w	r4, [r2, #-24]
 801352a:	4610      	mov	r0, r2
 801352c:	f7ff fae3 	bl	8012af6 <__cxa_begin_catch>
 8013530:	b11d      	cbz	r5, 801353a <__cxa_call_unexpected+0x22>
 8013532:	f7ff fddb 	bl	80130ec <_ZSt10unexpectedv>
 8013536:	2501      	movs	r5, #1
 8013538:	e7f7      	b.n	801352a <__cxa_call_unexpected+0x12>
 801353a:	4620      	mov	r0, r4
 801353c:	f7ff fdc9 	bl	80130d2 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08013540 <_Znwj>:
 8013540:	2801      	cmp	r0, #1
 8013542:	bf38      	it	cc
 8013544:	2001      	movcc	r0, #1
 8013546:	b510      	push	{r4, lr}
 8013548:	4604      	mov	r4, r0
 801354a:	4620      	mov	r0, r4
 801354c:	f000 f844 	bl	80135d8 <malloc>
 8013550:	b930      	cbnz	r0, 8013560 <_Znwj+0x20>
 8013552:	f000 f807 	bl	8013564 <_ZSt15get_new_handlerv>
 8013556:	b908      	cbnz	r0, 801355c <_Znwj+0x1c>
 8013558:	f000 f80c 	bl	8013574 <abort>
 801355c:	4780      	blx	r0
 801355e:	e7f4      	b.n	801354a <_Znwj+0xa>
 8013560:	bd10      	pop	{r4, pc}
	...

08013564 <_ZSt15get_new_handlerv>:
 8013564:	4b02      	ldr	r3, [pc, #8]	; (8013570 <_ZSt15get_new_handlerv+0xc>)
 8013566:	6818      	ldr	r0, [r3, #0]
 8013568:	f3bf 8f5b 	dmb	ish
 801356c:	4770      	bx	lr
 801356e:	bf00      	nop
 8013570:	20002690 	.word	0x20002690

08013574 <abort>:
 8013574:	2006      	movs	r0, #6
 8013576:	b508      	push	{r3, lr}
 8013578:	f000 f990 	bl	801389c <raise>
 801357c:	2001      	movs	r0, #1
 801357e:	f7f1 f834 	bl	80045ea <_exit>
	...

08013584 <__errno>:
 8013584:	4b01      	ldr	r3, [pc, #4]	; (801358c <__errno+0x8>)
 8013586:	6818      	ldr	r0, [r3, #0]
 8013588:	4770      	bx	lr
 801358a:	bf00      	nop
 801358c:	20000984 	.word	0x20000984

08013590 <__libc_init_array>:
 8013590:	b570      	push	{r4, r5, r6, lr}
 8013592:	2600      	movs	r6, #0
 8013594:	4d0c      	ldr	r5, [pc, #48]	; (80135c8 <__libc_init_array+0x38>)
 8013596:	4c0d      	ldr	r4, [pc, #52]	; (80135cc <__libc_init_array+0x3c>)
 8013598:	1b64      	subs	r4, r4, r5
 801359a:	10a4      	asrs	r4, r4, #2
 801359c:	42a6      	cmp	r6, r4
 801359e:	d109      	bne.n	80135b4 <__libc_init_array+0x24>
 80135a0:	f000 fcf6 	bl	8013f90 <_init>
 80135a4:	2600      	movs	r6, #0
 80135a6:	4d0a      	ldr	r5, [pc, #40]	; (80135d0 <__libc_init_array+0x40>)
 80135a8:	4c0a      	ldr	r4, [pc, #40]	; (80135d4 <__libc_init_array+0x44>)
 80135aa:	1b64      	subs	r4, r4, r5
 80135ac:	10a4      	asrs	r4, r4, #2
 80135ae:	42a6      	cmp	r6, r4
 80135b0:	d105      	bne.n	80135be <__libc_init_array+0x2e>
 80135b2:	bd70      	pop	{r4, r5, r6, pc}
 80135b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80135b8:	4798      	blx	r3
 80135ba:	3601      	adds	r6, #1
 80135bc:	e7ee      	b.n	801359c <__libc_init_array+0xc>
 80135be:	f855 3b04 	ldr.w	r3, [r5], #4
 80135c2:	4798      	blx	r3
 80135c4:	3601      	adds	r6, #1
 80135c6:	e7f2      	b.n	80135ae <__libc_init_array+0x1e>
 80135c8:	080158f8 	.word	0x080158f8
 80135cc:	080158f8 	.word	0x080158f8
 80135d0:	080158f8 	.word	0x080158f8
 80135d4:	08015904 	.word	0x08015904

080135d8 <malloc>:
 80135d8:	4b02      	ldr	r3, [pc, #8]	; (80135e4 <malloc+0xc>)
 80135da:	4601      	mov	r1, r0
 80135dc:	6818      	ldr	r0, [r3, #0]
 80135de:	f000 b8b1 	b.w	8013744 <_malloc_r>
 80135e2:	bf00      	nop
 80135e4:	20000984 	.word	0x20000984

080135e8 <free>:
 80135e8:	4b02      	ldr	r3, [pc, #8]	; (80135f4 <free+0xc>)
 80135ea:	4601      	mov	r1, r0
 80135ec:	6818      	ldr	r0, [r3, #0]
 80135ee:	f000 b841 	b.w	8013674 <_free_r>
 80135f2:	bf00      	nop
 80135f4:	20000984 	.word	0x20000984

080135f8 <memchr>:
 80135f8:	4603      	mov	r3, r0
 80135fa:	b510      	push	{r4, lr}
 80135fc:	b2c9      	uxtb	r1, r1
 80135fe:	4402      	add	r2, r0
 8013600:	4293      	cmp	r3, r2
 8013602:	4618      	mov	r0, r3
 8013604:	d101      	bne.n	801360a <memchr+0x12>
 8013606:	2000      	movs	r0, #0
 8013608:	e003      	b.n	8013612 <memchr+0x1a>
 801360a:	7804      	ldrb	r4, [r0, #0]
 801360c:	3301      	adds	r3, #1
 801360e:	428c      	cmp	r4, r1
 8013610:	d1f6      	bne.n	8013600 <memchr+0x8>
 8013612:	bd10      	pop	{r4, pc}

08013614 <memcpy>:
 8013614:	440a      	add	r2, r1
 8013616:	4291      	cmp	r1, r2
 8013618:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801361c:	d100      	bne.n	8013620 <memcpy+0xc>
 801361e:	4770      	bx	lr
 8013620:	b510      	push	{r4, lr}
 8013622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013626:	4291      	cmp	r1, r2
 8013628:	f803 4f01 	strb.w	r4, [r3, #1]!
 801362c:	d1f9      	bne.n	8013622 <memcpy+0xe>
 801362e:	bd10      	pop	{r4, pc}

08013630 <memmove>:
 8013630:	4288      	cmp	r0, r1
 8013632:	b510      	push	{r4, lr}
 8013634:	eb01 0402 	add.w	r4, r1, r2
 8013638:	d902      	bls.n	8013640 <memmove+0x10>
 801363a:	4284      	cmp	r4, r0
 801363c:	4623      	mov	r3, r4
 801363e:	d807      	bhi.n	8013650 <memmove+0x20>
 8013640:	1e43      	subs	r3, r0, #1
 8013642:	42a1      	cmp	r1, r4
 8013644:	d008      	beq.n	8013658 <memmove+0x28>
 8013646:	f811 2b01 	ldrb.w	r2, [r1], #1
 801364a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801364e:	e7f8      	b.n	8013642 <memmove+0x12>
 8013650:	4601      	mov	r1, r0
 8013652:	4402      	add	r2, r0
 8013654:	428a      	cmp	r2, r1
 8013656:	d100      	bne.n	801365a <memmove+0x2a>
 8013658:	bd10      	pop	{r4, pc}
 801365a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801365e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013662:	e7f7      	b.n	8013654 <memmove+0x24>

08013664 <memset>:
 8013664:	4603      	mov	r3, r0
 8013666:	4402      	add	r2, r0
 8013668:	4293      	cmp	r3, r2
 801366a:	d100      	bne.n	801366e <memset+0xa>
 801366c:	4770      	bx	lr
 801366e:	f803 1b01 	strb.w	r1, [r3], #1
 8013672:	e7f9      	b.n	8013668 <memset+0x4>

08013674 <_free_r>:
 8013674:	b538      	push	{r3, r4, r5, lr}
 8013676:	4605      	mov	r5, r0
 8013678:	2900      	cmp	r1, #0
 801367a:	d040      	beq.n	80136fe <_free_r+0x8a>
 801367c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013680:	1f0c      	subs	r4, r1, #4
 8013682:	2b00      	cmp	r3, #0
 8013684:	bfb8      	it	lt
 8013686:	18e4      	addlt	r4, r4, r3
 8013688:	f000 f944 	bl	8013914 <__malloc_lock>
 801368c:	4a1c      	ldr	r2, [pc, #112]	; (8013700 <_free_r+0x8c>)
 801368e:	6813      	ldr	r3, [r2, #0]
 8013690:	b933      	cbnz	r3, 80136a0 <_free_r+0x2c>
 8013692:	6063      	str	r3, [r4, #4]
 8013694:	6014      	str	r4, [r2, #0]
 8013696:	4628      	mov	r0, r5
 8013698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801369c:	f000 b940 	b.w	8013920 <__malloc_unlock>
 80136a0:	42a3      	cmp	r3, r4
 80136a2:	d908      	bls.n	80136b6 <_free_r+0x42>
 80136a4:	6820      	ldr	r0, [r4, #0]
 80136a6:	1821      	adds	r1, r4, r0
 80136a8:	428b      	cmp	r3, r1
 80136aa:	bf01      	itttt	eq
 80136ac:	6819      	ldreq	r1, [r3, #0]
 80136ae:	685b      	ldreq	r3, [r3, #4]
 80136b0:	1809      	addeq	r1, r1, r0
 80136b2:	6021      	streq	r1, [r4, #0]
 80136b4:	e7ed      	b.n	8013692 <_free_r+0x1e>
 80136b6:	461a      	mov	r2, r3
 80136b8:	685b      	ldr	r3, [r3, #4]
 80136ba:	b10b      	cbz	r3, 80136c0 <_free_r+0x4c>
 80136bc:	42a3      	cmp	r3, r4
 80136be:	d9fa      	bls.n	80136b6 <_free_r+0x42>
 80136c0:	6811      	ldr	r1, [r2, #0]
 80136c2:	1850      	adds	r0, r2, r1
 80136c4:	42a0      	cmp	r0, r4
 80136c6:	d10b      	bne.n	80136e0 <_free_r+0x6c>
 80136c8:	6820      	ldr	r0, [r4, #0]
 80136ca:	4401      	add	r1, r0
 80136cc:	1850      	adds	r0, r2, r1
 80136ce:	4283      	cmp	r3, r0
 80136d0:	6011      	str	r1, [r2, #0]
 80136d2:	d1e0      	bne.n	8013696 <_free_r+0x22>
 80136d4:	6818      	ldr	r0, [r3, #0]
 80136d6:	685b      	ldr	r3, [r3, #4]
 80136d8:	4401      	add	r1, r0
 80136da:	6011      	str	r1, [r2, #0]
 80136dc:	6053      	str	r3, [r2, #4]
 80136de:	e7da      	b.n	8013696 <_free_r+0x22>
 80136e0:	d902      	bls.n	80136e8 <_free_r+0x74>
 80136e2:	230c      	movs	r3, #12
 80136e4:	602b      	str	r3, [r5, #0]
 80136e6:	e7d6      	b.n	8013696 <_free_r+0x22>
 80136e8:	6820      	ldr	r0, [r4, #0]
 80136ea:	1821      	adds	r1, r4, r0
 80136ec:	428b      	cmp	r3, r1
 80136ee:	bf01      	itttt	eq
 80136f0:	6819      	ldreq	r1, [r3, #0]
 80136f2:	685b      	ldreq	r3, [r3, #4]
 80136f4:	1809      	addeq	r1, r1, r0
 80136f6:	6021      	streq	r1, [r4, #0]
 80136f8:	6063      	str	r3, [r4, #4]
 80136fa:	6054      	str	r4, [r2, #4]
 80136fc:	e7cb      	b.n	8013696 <_free_r+0x22>
 80136fe:	bd38      	pop	{r3, r4, r5, pc}
 8013700:	20002694 	.word	0x20002694

08013704 <sbrk_aligned>:
 8013704:	b570      	push	{r4, r5, r6, lr}
 8013706:	4e0e      	ldr	r6, [pc, #56]	; (8013740 <sbrk_aligned+0x3c>)
 8013708:	460c      	mov	r4, r1
 801370a:	6831      	ldr	r1, [r6, #0]
 801370c:	4605      	mov	r5, r0
 801370e:	b911      	cbnz	r1, 8013716 <sbrk_aligned+0x12>
 8013710:	f000 f88c 	bl	801382c <_sbrk_r>
 8013714:	6030      	str	r0, [r6, #0]
 8013716:	4621      	mov	r1, r4
 8013718:	4628      	mov	r0, r5
 801371a:	f000 f887 	bl	801382c <_sbrk_r>
 801371e:	1c43      	adds	r3, r0, #1
 8013720:	d00a      	beq.n	8013738 <sbrk_aligned+0x34>
 8013722:	1cc4      	adds	r4, r0, #3
 8013724:	f024 0403 	bic.w	r4, r4, #3
 8013728:	42a0      	cmp	r0, r4
 801372a:	d007      	beq.n	801373c <sbrk_aligned+0x38>
 801372c:	1a21      	subs	r1, r4, r0
 801372e:	4628      	mov	r0, r5
 8013730:	f000 f87c 	bl	801382c <_sbrk_r>
 8013734:	3001      	adds	r0, #1
 8013736:	d101      	bne.n	801373c <sbrk_aligned+0x38>
 8013738:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801373c:	4620      	mov	r0, r4
 801373e:	bd70      	pop	{r4, r5, r6, pc}
 8013740:	20002698 	.word	0x20002698

08013744 <_malloc_r>:
 8013744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013748:	1ccd      	adds	r5, r1, #3
 801374a:	f025 0503 	bic.w	r5, r5, #3
 801374e:	3508      	adds	r5, #8
 8013750:	2d0c      	cmp	r5, #12
 8013752:	bf38      	it	cc
 8013754:	250c      	movcc	r5, #12
 8013756:	2d00      	cmp	r5, #0
 8013758:	4607      	mov	r7, r0
 801375a:	db01      	blt.n	8013760 <_malloc_r+0x1c>
 801375c:	42a9      	cmp	r1, r5
 801375e:	d905      	bls.n	801376c <_malloc_r+0x28>
 8013760:	230c      	movs	r3, #12
 8013762:	2600      	movs	r6, #0
 8013764:	603b      	str	r3, [r7, #0]
 8013766:	4630      	mov	r0, r6
 8013768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801376c:	4e2e      	ldr	r6, [pc, #184]	; (8013828 <_malloc_r+0xe4>)
 801376e:	f000 f8d1 	bl	8013914 <__malloc_lock>
 8013772:	6833      	ldr	r3, [r6, #0]
 8013774:	461c      	mov	r4, r3
 8013776:	bb34      	cbnz	r4, 80137c6 <_malloc_r+0x82>
 8013778:	4629      	mov	r1, r5
 801377a:	4638      	mov	r0, r7
 801377c:	f7ff ffc2 	bl	8013704 <sbrk_aligned>
 8013780:	1c43      	adds	r3, r0, #1
 8013782:	4604      	mov	r4, r0
 8013784:	d14d      	bne.n	8013822 <_malloc_r+0xde>
 8013786:	6834      	ldr	r4, [r6, #0]
 8013788:	4626      	mov	r6, r4
 801378a:	2e00      	cmp	r6, #0
 801378c:	d140      	bne.n	8013810 <_malloc_r+0xcc>
 801378e:	6823      	ldr	r3, [r4, #0]
 8013790:	4631      	mov	r1, r6
 8013792:	4638      	mov	r0, r7
 8013794:	eb04 0803 	add.w	r8, r4, r3
 8013798:	f000 f848 	bl	801382c <_sbrk_r>
 801379c:	4580      	cmp	r8, r0
 801379e:	d13a      	bne.n	8013816 <_malloc_r+0xd2>
 80137a0:	6821      	ldr	r1, [r4, #0]
 80137a2:	3503      	adds	r5, #3
 80137a4:	1a6d      	subs	r5, r5, r1
 80137a6:	f025 0503 	bic.w	r5, r5, #3
 80137aa:	3508      	adds	r5, #8
 80137ac:	2d0c      	cmp	r5, #12
 80137ae:	bf38      	it	cc
 80137b0:	250c      	movcc	r5, #12
 80137b2:	4638      	mov	r0, r7
 80137b4:	4629      	mov	r1, r5
 80137b6:	f7ff ffa5 	bl	8013704 <sbrk_aligned>
 80137ba:	3001      	adds	r0, #1
 80137bc:	d02b      	beq.n	8013816 <_malloc_r+0xd2>
 80137be:	6823      	ldr	r3, [r4, #0]
 80137c0:	442b      	add	r3, r5
 80137c2:	6023      	str	r3, [r4, #0]
 80137c4:	e00e      	b.n	80137e4 <_malloc_r+0xa0>
 80137c6:	6822      	ldr	r2, [r4, #0]
 80137c8:	1b52      	subs	r2, r2, r5
 80137ca:	d41e      	bmi.n	801380a <_malloc_r+0xc6>
 80137cc:	2a0b      	cmp	r2, #11
 80137ce:	d916      	bls.n	80137fe <_malloc_r+0xba>
 80137d0:	1961      	adds	r1, r4, r5
 80137d2:	42a3      	cmp	r3, r4
 80137d4:	6025      	str	r5, [r4, #0]
 80137d6:	bf18      	it	ne
 80137d8:	6059      	strne	r1, [r3, #4]
 80137da:	6863      	ldr	r3, [r4, #4]
 80137dc:	bf08      	it	eq
 80137de:	6031      	streq	r1, [r6, #0]
 80137e0:	5162      	str	r2, [r4, r5]
 80137e2:	604b      	str	r3, [r1, #4]
 80137e4:	4638      	mov	r0, r7
 80137e6:	f104 060b 	add.w	r6, r4, #11
 80137ea:	f000 f899 	bl	8013920 <__malloc_unlock>
 80137ee:	f026 0607 	bic.w	r6, r6, #7
 80137f2:	1d23      	adds	r3, r4, #4
 80137f4:	1af2      	subs	r2, r6, r3
 80137f6:	d0b6      	beq.n	8013766 <_malloc_r+0x22>
 80137f8:	1b9b      	subs	r3, r3, r6
 80137fa:	50a3      	str	r3, [r4, r2]
 80137fc:	e7b3      	b.n	8013766 <_malloc_r+0x22>
 80137fe:	6862      	ldr	r2, [r4, #4]
 8013800:	42a3      	cmp	r3, r4
 8013802:	bf0c      	ite	eq
 8013804:	6032      	streq	r2, [r6, #0]
 8013806:	605a      	strne	r2, [r3, #4]
 8013808:	e7ec      	b.n	80137e4 <_malloc_r+0xa0>
 801380a:	4623      	mov	r3, r4
 801380c:	6864      	ldr	r4, [r4, #4]
 801380e:	e7b2      	b.n	8013776 <_malloc_r+0x32>
 8013810:	4634      	mov	r4, r6
 8013812:	6876      	ldr	r6, [r6, #4]
 8013814:	e7b9      	b.n	801378a <_malloc_r+0x46>
 8013816:	230c      	movs	r3, #12
 8013818:	4638      	mov	r0, r7
 801381a:	603b      	str	r3, [r7, #0]
 801381c:	f000 f880 	bl	8013920 <__malloc_unlock>
 8013820:	e7a1      	b.n	8013766 <_malloc_r+0x22>
 8013822:	6025      	str	r5, [r4, #0]
 8013824:	e7de      	b.n	80137e4 <_malloc_r+0xa0>
 8013826:	bf00      	nop
 8013828:	20002694 	.word	0x20002694

0801382c <_sbrk_r>:
 801382c:	b538      	push	{r3, r4, r5, lr}
 801382e:	2300      	movs	r3, #0
 8013830:	4d05      	ldr	r5, [pc, #20]	; (8013848 <_sbrk_r+0x1c>)
 8013832:	4604      	mov	r4, r0
 8013834:	4608      	mov	r0, r1
 8013836:	602b      	str	r3, [r5, #0]
 8013838:	f7f0 fee2 	bl	8004600 <_sbrk>
 801383c:	1c43      	adds	r3, r0, #1
 801383e:	d102      	bne.n	8013846 <_sbrk_r+0x1a>
 8013840:	682b      	ldr	r3, [r5, #0]
 8013842:	b103      	cbz	r3, 8013846 <_sbrk_r+0x1a>
 8013844:	6023      	str	r3, [r4, #0]
 8013846:	bd38      	pop	{r3, r4, r5, pc}
 8013848:	2000269c 	.word	0x2000269c

0801384c <_raise_r>:
 801384c:	291f      	cmp	r1, #31
 801384e:	b538      	push	{r3, r4, r5, lr}
 8013850:	4604      	mov	r4, r0
 8013852:	460d      	mov	r5, r1
 8013854:	d904      	bls.n	8013860 <_raise_r+0x14>
 8013856:	2316      	movs	r3, #22
 8013858:	6003      	str	r3, [r0, #0]
 801385a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801385e:	bd38      	pop	{r3, r4, r5, pc}
 8013860:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013862:	b112      	cbz	r2, 801386a <_raise_r+0x1e>
 8013864:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013868:	b94b      	cbnz	r3, 801387e <_raise_r+0x32>
 801386a:	4620      	mov	r0, r4
 801386c:	f000 f830 	bl	80138d0 <_getpid_r>
 8013870:	462a      	mov	r2, r5
 8013872:	4601      	mov	r1, r0
 8013874:	4620      	mov	r0, r4
 8013876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801387a:	f000 b817 	b.w	80138ac <_kill_r>
 801387e:	2b01      	cmp	r3, #1
 8013880:	d00a      	beq.n	8013898 <_raise_r+0x4c>
 8013882:	1c59      	adds	r1, r3, #1
 8013884:	d103      	bne.n	801388e <_raise_r+0x42>
 8013886:	2316      	movs	r3, #22
 8013888:	6003      	str	r3, [r0, #0]
 801388a:	2001      	movs	r0, #1
 801388c:	e7e7      	b.n	801385e <_raise_r+0x12>
 801388e:	2400      	movs	r4, #0
 8013890:	4628      	mov	r0, r5
 8013892:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013896:	4798      	blx	r3
 8013898:	2000      	movs	r0, #0
 801389a:	e7e0      	b.n	801385e <_raise_r+0x12>

0801389c <raise>:
 801389c:	4b02      	ldr	r3, [pc, #8]	; (80138a8 <raise+0xc>)
 801389e:	4601      	mov	r1, r0
 80138a0:	6818      	ldr	r0, [r3, #0]
 80138a2:	f7ff bfd3 	b.w	801384c <_raise_r>
 80138a6:	bf00      	nop
 80138a8:	20000984 	.word	0x20000984

080138ac <_kill_r>:
 80138ac:	b538      	push	{r3, r4, r5, lr}
 80138ae:	2300      	movs	r3, #0
 80138b0:	4d06      	ldr	r5, [pc, #24]	; (80138cc <_kill_r+0x20>)
 80138b2:	4604      	mov	r4, r0
 80138b4:	4608      	mov	r0, r1
 80138b6:	4611      	mov	r1, r2
 80138b8:	602b      	str	r3, [r5, #0]
 80138ba:	f7f0 fe86 	bl	80045ca <_kill>
 80138be:	1c43      	adds	r3, r0, #1
 80138c0:	d102      	bne.n	80138c8 <_kill_r+0x1c>
 80138c2:	682b      	ldr	r3, [r5, #0]
 80138c4:	b103      	cbz	r3, 80138c8 <_kill_r+0x1c>
 80138c6:	6023      	str	r3, [r4, #0]
 80138c8:	bd38      	pop	{r3, r4, r5, pc}
 80138ca:	bf00      	nop
 80138cc:	2000269c 	.word	0x2000269c

080138d0 <_getpid_r>:
 80138d0:	f7f0 be74 	b.w	80045bc <_getpid>

080138d4 <siprintf>:
 80138d4:	b40e      	push	{r1, r2, r3}
 80138d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80138da:	b500      	push	{lr}
 80138dc:	b09c      	sub	sp, #112	; 0x70
 80138de:	ab1d      	add	r3, sp, #116	; 0x74
 80138e0:	9002      	str	r0, [sp, #8]
 80138e2:	9006      	str	r0, [sp, #24]
 80138e4:	9107      	str	r1, [sp, #28]
 80138e6:	9104      	str	r1, [sp, #16]
 80138e8:	4808      	ldr	r0, [pc, #32]	; (801390c <siprintf+0x38>)
 80138ea:	4909      	ldr	r1, [pc, #36]	; (8013910 <siprintf+0x3c>)
 80138ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80138f0:	9105      	str	r1, [sp, #20]
 80138f2:	6800      	ldr	r0, [r0, #0]
 80138f4:	a902      	add	r1, sp, #8
 80138f6:	9301      	str	r3, [sp, #4]
 80138f8:	f000 f874 	bl	80139e4 <_svfiprintf_r>
 80138fc:	2200      	movs	r2, #0
 80138fe:	9b02      	ldr	r3, [sp, #8]
 8013900:	701a      	strb	r2, [r3, #0]
 8013902:	b01c      	add	sp, #112	; 0x70
 8013904:	f85d eb04 	ldr.w	lr, [sp], #4
 8013908:	b003      	add	sp, #12
 801390a:	4770      	bx	lr
 801390c:	20000984 	.word	0x20000984
 8013910:	ffff0208 	.word	0xffff0208

08013914 <__malloc_lock>:
 8013914:	4801      	ldr	r0, [pc, #4]	; (801391c <__malloc_lock+0x8>)
 8013916:	f000 bafb 	b.w	8013f10 <__retarget_lock_acquire_recursive>
 801391a:	bf00      	nop
 801391c:	200026a0 	.word	0x200026a0

08013920 <__malloc_unlock>:
 8013920:	4801      	ldr	r0, [pc, #4]	; (8013928 <__malloc_unlock+0x8>)
 8013922:	f000 baf6 	b.w	8013f12 <__retarget_lock_release_recursive>
 8013926:	bf00      	nop
 8013928:	200026a0 	.word	0x200026a0

0801392c <__ssputs_r>:
 801392c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013930:	688e      	ldr	r6, [r1, #8]
 8013932:	4682      	mov	sl, r0
 8013934:	429e      	cmp	r6, r3
 8013936:	460c      	mov	r4, r1
 8013938:	4690      	mov	r8, r2
 801393a:	461f      	mov	r7, r3
 801393c:	d838      	bhi.n	80139b0 <__ssputs_r+0x84>
 801393e:	898a      	ldrh	r2, [r1, #12]
 8013940:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013944:	d032      	beq.n	80139ac <__ssputs_r+0x80>
 8013946:	6825      	ldr	r5, [r4, #0]
 8013948:	6909      	ldr	r1, [r1, #16]
 801394a:	3301      	adds	r3, #1
 801394c:	eba5 0901 	sub.w	r9, r5, r1
 8013950:	6965      	ldr	r5, [r4, #20]
 8013952:	444b      	add	r3, r9
 8013954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801395c:	106d      	asrs	r5, r5, #1
 801395e:	429d      	cmp	r5, r3
 8013960:	bf38      	it	cc
 8013962:	461d      	movcc	r5, r3
 8013964:	0553      	lsls	r3, r2, #21
 8013966:	d531      	bpl.n	80139cc <__ssputs_r+0xa0>
 8013968:	4629      	mov	r1, r5
 801396a:	f7ff feeb 	bl	8013744 <_malloc_r>
 801396e:	4606      	mov	r6, r0
 8013970:	b950      	cbnz	r0, 8013988 <__ssputs_r+0x5c>
 8013972:	230c      	movs	r3, #12
 8013974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013978:	f8ca 3000 	str.w	r3, [sl]
 801397c:	89a3      	ldrh	r3, [r4, #12]
 801397e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013982:	81a3      	strh	r3, [r4, #12]
 8013984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013988:	464a      	mov	r2, r9
 801398a:	6921      	ldr	r1, [r4, #16]
 801398c:	f7ff fe42 	bl	8013614 <memcpy>
 8013990:	89a3      	ldrh	r3, [r4, #12]
 8013992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801399a:	81a3      	strh	r3, [r4, #12]
 801399c:	6126      	str	r6, [r4, #16]
 801399e:	444e      	add	r6, r9
 80139a0:	6026      	str	r6, [r4, #0]
 80139a2:	463e      	mov	r6, r7
 80139a4:	6165      	str	r5, [r4, #20]
 80139a6:	eba5 0509 	sub.w	r5, r5, r9
 80139aa:	60a5      	str	r5, [r4, #8]
 80139ac:	42be      	cmp	r6, r7
 80139ae:	d900      	bls.n	80139b2 <__ssputs_r+0x86>
 80139b0:	463e      	mov	r6, r7
 80139b2:	4632      	mov	r2, r6
 80139b4:	4641      	mov	r1, r8
 80139b6:	6820      	ldr	r0, [r4, #0]
 80139b8:	f7ff fe3a 	bl	8013630 <memmove>
 80139bc:	68a3      	ldr	r3, [r4, #8]
 80139be:	2000      	movs	r0, #0
 80139c0:	1b9b      	subs	r3, r3, r6
 80139c2:	60a3      	str	r3, [r4, #8]
 80139c4:	6823      	ldr	r3, [r4, #0]
 80139c6:	4433      	add	r3, r6
 80139c8:	6023      	str	r3, [r4, #0]
 80139ca:	e7db      	b.n	8013984 <__ssputs_r+0x58>
 80139cc:	462a      	mov	r2, r5
 80139ce:	f000 faa1 	bl	8013f14 <_realloc_r>
 80139d2:	4606      	mov	r6, r0
 80139d4:	2800      	cmp	r0, #0
 80139d6:	d1e1      	bne.n	801399c <__ssputs_r+0x70>
 80139d8:	4650      	mov	r0, sl
 80139da:	6921      	ldr	r1, [r4, #16]
 80139dc:	f7ff fe4a 	bl	8013674 <_free_r>
 80139e0:	e7c7      	b.n	8013972 <__ssputs_r+0x46>
	...

080139e4 <_svfiprintf_r>:
 80139e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139e8:	4698      	mov	r8, r3
 80139ea:	898b      	ldrh	r3, [r1, #12]
 80139ec:	4607      	mov	r7, r0
 80139ee:	061b      	lsls	r3, r3, #24
 80139f0:	460d      	mov	r5, r1
 80139f2:	4614      	mov	r4, r2
 80139f4:	b09d      	sub	sp, #116	; 0x74
 80139f6:	d50e      	bpl.n	8013a16 <_svfiprintf_r+0x32>
 80139f8:	690b      	ldr	r3, [r1, #16]
 80139fa:	b963      	cbnz	r3, 8013a16 <_svfiprintf_r+0x32>
 80139fc:	2140      	movs	r1, #64	; 0x40
 80139fe:	f7ff fea1 	bl	8013744 <_malloc_r>
 8013a02:	6028      	str	r0, [r5, #0]
 8013a04:	6128      	str	r0, [r5, #16]
 8013a06:	b920      	cbnz	r0, 8013a12 <_svfiprintf_r+0x2e>
 8013a08:	230c      	movs	r3, #12
 8013a0a:	603b      	str	r3, [r7, #0]
 8013a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a10:	e0d1      	b.n	8013bb6 <_svfiprintf_r+0x1d2>
 8013a12:	2340      	movs	r3, #64	; 0x40
 8013a14:	616b      	str	r3, [r5, #20]
 8013a16:	2300      	movs	r3, #0
 8013a18:	9309      	str	r3, [sp, #36]	; 0x24
 8013a1a:	2320      	movs	r3, #32
 8013a1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a20:	2330      	movs	r3, #48	; 0x30
 8013a22:	f04f 0901 	mov.w	r9, #1
 8013a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013bd0 <_svfiprintf_r+0x1ec>
 8013a2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a32:	4623      	mov	r3, r4
 8013a34:	469a      	mov	sl, r3
 8013a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a3a:	b10a      	cbz	r2, 8013a40 <_svfiprintf_r+0x5c>
 8013a3c:	2a25      	cmp	r2, #37	; 0x25
 8013a3e:	d1f9      	bne.n	8013a34 <_svfiprintf_r+0x50>
 8013a40:	ebba 0b04 	subs.w	fp, sl, r4
 8013a44:	d00b      	beq.n	8013a5e <_svfiprintf_r+0x7a>
 8013a46:	465b      	mov	r3, fp
 8013a48:	4622      	mov	r2, r4
 8013a4a:	4629      	mov	r1, r5
 8013a4c:	4638      	mov	r0, r7
 8013a4e:	f7ff ff6d 	bl	801392c <__ssputs_r>
 8013a52:	3001      	adds	r0, #1
 8013a54:	f000 80aa 	beq.w	8013bac <_svfiprintf_r+0x1c8>
 8013a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a5a:	445a      	add	r2, fp
 8013a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8013a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	f000 80a2 	beq.w	8013bac <_svfiprintf_r+0x1c8>
 8013a68:	2300      	movs	r3, #0
 8013a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a72:	f10a 0a01 	add.w	sl, sl, #1
 8013a76:	9304      	str	r3, [sp, #16]
 8013a78:	9307      	str	r3, [sp, #28]
 8013a7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a7e:	931a      	str	r3, [sp, #104]	; 0x68
 8013a80:	4654      	mov	r4, sl
 8013a82:	2205      	movs	r2, #5
 8013a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a88:	4851      	ldr	r0, [pc, #324]	; (8013bd0 <_svfiprintf_r+0x1ec>)
 8013a8a:	f7ff fdb5 	bl	80135f8 <memchr>
 8013a8e:	9a04      	ldr	r2, [sp, #16]
 8013a90:	b9d8      	cbnz	r0, 8013aca <_svfiprintf_r+0xe6>
 8013a92:	06d0      	lsls	r0, r2, #27
 8013a94:	bf44      	itt	mi
 8013a96:	2320      	movmi	r3, #32
 8013a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a9c:	0711      	lsls	r1, r2, #28
 8013a9e:	bf44      	itt	mi
 8013aa0:	232b      	movmi	r3, #43	; 0x2b
 8013aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8013aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8013aac:	d015      	beq.n	8013ada <_svfiprintf_r+0xf6>
 8013aae:	4654      	mov	r4, sl
 8013ab0:	2000      	movs	r0, #0
 8013ab2:	f04f 0c0a 	mov.w	ip, #10
 8013ab6:	9a07      	ldr	r2, [sp, #28]
 8013ab8:	4621      	mov	r1, r4
 8013aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013abe:	3b30      	subs	r3, #48	; 0x30
 8013ac0:	2b09      	cmp	r3, #9
 8013ac2:	d94e      	bls.n	8013b62 <_svfiprintf_r+0x17e>
 8013ac4:	b1b0      	cbz	r0, 8013af4 <_svfiprintf_r+0x110>
 8013ac6:	9207      	str	r2, [sp, #28]
 8013ac8:	e014      	b.n	8013af4 <_svfiprintf_r+0x110>
 8013aca:	eba0 0308 	sub.w	r3, r0, r8
 8013ace:	fa09 f303 	lsl.w	r3, r9, r3
 8013ad2:	4313      	orrs	r3, r2
 8013ad4:	46a2      	mov	sl, r4
 8013ad6:	9304      	str	r3, [sp, #16]
 8013ad8:	e7d2      	b.n	8013a80 <_svfiprintf_r+0x9c>
 8013ada:	9b03      	ldr	r3, [sp, #12]
 8013adc:	1d19      	adds	r1, r3, #4
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	9103      	str	r1, [sp, #12]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	bfbb      	ittet	lt
 8013ae6:	425b      	neglt	r3, r3
 8013ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8013aec:	9307      	strge	r3, [sp, #28]
 8013aee:	9307      	strlt	r3, [sp, #28]
 8013af0:	bfb8      	it	lt
 8013af2:	9204      	strlt	r2, [sp, #16]
 8013af4:	7823      	ldrb	r3, [r4, #0]
 8013af6:	2b2e      	cmp	r3, #46	; 0x2e
 8013af8:	d10c      	bne.n	8013b14 <_svfiprintf_r+0x130>
 8013afa:	7863      	ldrb	r3, [r4, #1]
 8013afc:	2b2a      	cmp	r3, #42	; 0x2a
 8013afe:	d135      	bne.n	8013b6c <_svfiprintf_r+0x188>
 8013b00:	9b03      	ldr	r3, [sp, #12]
 8013b02:	3402      	adds	r4, #2
 8013b04:	1d1a      	adds	r2, r3, #4
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	9203      	str	r2, [sp, #12]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	bfb8      	it	lt
 8013b0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013b12:	9305      	str	r3, [sp, #20]
 8013b14:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013bd4 <_svfiprintf_r+0x1f0>
 8013b18:	2203      	movs	r2, #3
 8013b1a:	4650      	mov	r0, sl
 8013b1c:	7821      	ldrb	r1, [r4, #0]
 8013b1e:	f7ff fd6b 	bl	80135f8 <memchr>
 8013b22:	b140      	cbz	r0, 8013b36 <_svfiprintf_r+0x152>
 8013b24:	2340      	movs	r3, #64	; 0x40
 8013b26:	eba0 000a 	sub.w	r0, r0, sl
 8013b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8013b2e:	9b04      	ldr	r3, [sp, #16]
 8013b30:	3401      	adds	r4, #1
 8013b32:	4303      	orrs	r3, r0
 8013b34:	9304      	str	r3, [sp, #16]
 8013b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b3a:	2206      	movs	r2, #6
 8013b3c:	4826      	ldr	r0, [pc, #152]	; (8013bd8 <_svfiprintf_r+0x1f4>)
 8013b3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b42:	f7ff fd59 	bl	80135f8 <memchr>
 8013b46:	2800      	cmp	r0, #0
 8013b48:	d038      	beq.n	8013bbc <_svfiprintf_r+0x1d8>
 8013b4a:	4b24      	ldr	r3, [pc, #144]	; (8013bdc <_svfiprintf_r+0x1f8>)
 8013b4c:	bb1b      	cbnz	r3, 8013b96 <_svfiprintf_r+0x1b2>
 8013b4e:	9b03      	ldr	r3, [sp, #12]
 8013b50:	3307      	adds	r3, #7
 8013b52:	f023 0307 	bic.w	r3, r3, #7
 8013b56:	3308      	adds	r3, #8
 8013b58:	9303      	str	r3, [sp, #12]
 8013b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b5c:	4433      	add	r3, r6
 8013b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8013b60:	e767      	b.n	8013a32 <_svfiprintf_r+0x4e>
 8013b62:	460c      	mov	r4, r1
 8013b64:	2001      	movs	r0, #1
 8013b66:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b6a:	e7a5      	b.n	8013ab8 <_svfiprintf_r+0xd4>
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	f04f 0c0a 	mov.w	ip, #10
 8013b72:	4619      	mov	r1, r3
 8013b74:	3401      	adds	r4, #1
 8013b76:	9305      	str	r3, [sp, #20]
 8013b78:	4620      	mov	r0, r4
 8013b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b7e:	3a30      	subs	r2, #48	; 0x30
 8013b80:	2a09      	cmp	r2, #9
 8013b82:	d903      	bls.n	8013b8c <_svfiprintf_r+0x1a8>
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d0c5      	beq.n	8013b14 <_svfiprintf_r+0x130>
 8013b88:	9105      	str	r1, [sp, #20]
 8013b8a:	e7c3      	b.n	8013b14 <_svfiprintf_r+0x130>
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	2301      	movs	r3, #1
 8013b90:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b94:	e7f0      	b.n	8013b78 <_svfiprintf_r+0x194>
 8013b96:	ab03      	add	r3, sp, #12
 8013b98:	9300      	str	r3, [sp, #0]
 8013b9a:	462a      	mov	r2, r5
 8013b9c:	4638      	mov	r0, r7
 8013b9e:	4b10      	ldr	r3, [pc, #64]	; (8013be0 <_svfiprintf_r+0x1fc>)
 8013ba0:	a904      	add	r1, sp, #16
 8013ba2:	f3af 8000 	nop.w
 8013ba6:	1c42      	adds	r2, r0, #1
 8013ba8:	4606      	mov	r6, r0
 8013baa:	d1d6      	bne.n	8013b5a <_svfiprintf_r+0x176>
 8013bac:	89ab      	ldrh	r3, [r5, #12]
 8013bae:	065b      	lsls	r3, r3, #25
 8013bb0:	f53f af2c 	bmi.w	8013a0c <_svfiprintf_r+0x28>
 8013bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013bb6:	b01d      	add	sp, #116	; 0x74
 8013bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bbc:	ab03      	add	r3, sp, #12
 8013bbe:	9300      	str	r3, [sp, #0]
 8013bc0:	462a      	mov	r2, r5
 8013bc2:	4638      	mov	r0, r7
 8013bc4:	4b06      	ldr	r3, [pc, #24]	; (8013be0 <_svfiprintf_r+0x1fc>)
 8013bc6:	a904      	add	r1, sp, #16
 8013bc8:	f000 f87c 	bl	8013cc4 <_printf_i>
 8013bcc:	e7eb      	b.n	8013ba6 <_svfiprintf_r+0x1c2>
 8013bce:	bf00      	nop
 8013bd0:	08015326 	.word	0x08015326
 8013bd4:	0801532c 	.word	0x0801532c
 8013bd8:	08015330 	.word	0x08015330
 8013bdc:	00000000 	.word	0x00000000
 8013be0:	0801392d 	.word	0x0801392d

08013be4 <_printf_common>:
 8013be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013be8:	4616      	mov	r6, r2
 8013bea:	4699      	mov	r9, r3
 8013bec:	688a      	ldr	r2, [r1, #8]
 8013bee:	690b      	ldr	r3, [r1, #16]
 8013bf0:	4607      	mov	r7, r0
 8013bf2:	4293      	cmp	r3, r2
 8013bf4:	bfb8      	it	lt
 8013bf6:	4613      	movlt	r3, r2
 8013bf8:	6033      	str	r3, [r6, #0]
 8013bfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013bfe:	460c      	mov	r4, r1
 8013c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013c04:	b10a      	cbz	r2, 8013c0a <_printf_common+0x26>
 8013c06:	3301      	adds	r3, #1
 8013c08:	6033      	str	r3, [r6, #0]
 8013c0a:	6823      	ldr	r3, [r4, #0]
 8013c0c:	0699      	lsls	r1, r3, #26
 8013c0e:	bf42      	ittt	mi
 8013c10:	6833      	ldrmi	r3, [r6, #0]
 8013c12:	3302      	addmi	r3, #2
 8013c14:	6033      	strmi	r3, [r6, #0]
 8013c16:	6825      	ldr	r5, [r4, #0]
 8013c18:	f015 0506 	ands.w	r5, r5, #6
 8013c1c:	d106      	bne.n	8013c2c <_printf_common+0x48>
 8013c1e:	f104 0a19 	add.w	sl, r4, #25
 8013c22:	68e3      	ldr	r3, [r4, #12]
 8013c24:	6832      	ldr	r2, [r6, #0]
 8013c26:	1a9b      	subs	r3, r3, r2
 8013c28:	42ab      	cmp	r3, r5
 8013c2a:	dc28      	bgt.n	8013c7e <_printf_common+0x9a>
 8013c2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013c30:	1e13      	subs	r3, r2, #0
 8013c32:	6822      	ldr	r2, [r4, #0]
 8013c34:	bf18      	it	ne
 8013c36:	2301      	movne	r3, #1
 8013c38:	0692      	lsls	r2, r2, #26
 8013c3a:	d42d      	bmi.n	8013c98 <_printf_common+0xb4>
 8013c3c:	4649      	mov	r1, r9
 8013c3e:	4638      	mov	r0, r7
 8013c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013c44:	47c0      	blx	r8
 8013c46:	3001      	adds	r0, #1
 8013c48:	d020      	beq.n	8013c8c <_printf_common+0xa8>
 8013c4a:	6823      	ldr	r3, [r4, #0]
 8013c4c:	68e5      	ldr	r5, [r4, #12]
 8013c4e:	f003 0306 	and.w	r3, r3, #6
 8013c52:	2b04      	cmp	r3, #4
 8013c54:	bf18      	it	ne
 8013c56:	2500      	movne	r5, #0
 8013c58:	6832      	ldr	r2, [r6, #0]
 8013c5a:	f04f 0600 	mov.w	r6, #0
 8013c5e:	68a3      	ldr	r3, [r4, #8]
 8013c60:	bf08      	it	eq
 8013c62:	1aad      	subeq	r5, r5, r2
 8013c64:	6922      	ldr	r2, [r4, #16]
 8013c66:	bf08      	it	eq
 8013c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c6c:	4293      	cmp	r3, r2
 8013c6e:	bfc4      	itt	gt
 8013c70:	1a9b      	subgt	r3, r3, r2
 8013c72:	18ed      	addgt	r5, r5, r3
 8013c74:	341a      	adds	r4, #26
 8013c76:	42b5      	cmp	r5, r6
 8013c78:	d11a      	bne.n	8013cb0 <_printf_common+0xcc>
 8013c7a:	2000      	movs	r0, #0
 8013c7c:	e008      	b.n	8013c90 <_printf_common+0xac>
 8013c7e:	2301      	movs	r3, #1
 8013c80:	4652      	mov	r2, sl
 8013c82:	4649      	mov	r1, r9
 8013c84:	4638      	mov	r0, r7
 8013c86:	47c0      	blx	r8
 8013c88:	3001      	adds	r0, #1
 8013c8a:	d103      	bne.n	8013c94 <_printf_common+0xb0>
 8013c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c94:	3501      	adds	r5, #1
 8013c96:	e7c4      	b.n	8013c22 <_printf_common+0x3e>
 8013c98:	2030      	movs	r0, #48	; 0x30
 8013c9a:	18e1      	adds	r1, r4, r3
 8013c9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013ca0:	1c5a      	adds	r2, r3, #1
 8013ca2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013ca6:	4422      	add	r2, r4
 8013ca8:	3302      	adds	r3, #2
 8013caa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013cae:	e7c5      	b.n	8013c3c <_printf_common+0x58>
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	4622      	mov	r2, r4
 8013cb4:	4649      	mov	r1, r9
 8013cb6:	4638      	mov	r0, r7
 8013cb8:	47c0      	blx	r8
 8013cba:	3001      	adds	r0, #1
 8013cbc:	d0e6      	beq.n	8013c8c <_printf_common+0xa8>
 8013cbe:	3601      	adds	r6, #1
 8013cc0:	e7d9      	b.n	8013c76 <_printf_common+0x92>
	...

08013cc4 <_printf_i>:
 8013cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013cc8:	7e0f      	ldrb	r7, [r1, #24]
 8013cca:	4691      	mov	r9, r2
 8013ccc:	2f78      	cmp	r7, #120	; 0x78
 8013cce:	4680      	mov	r8, r0
 8013cd0:	460c      	mov	r4, r1
 8013cd2:	469a      	mov	sl, r3
 8013cd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013cd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013cda:	d807      	bhi.n	8013cec <_printf_i+0x28>
 8013cdc:	2f62      	cmp	r7, #98	; 0x62
 8013cde:	d80a      	bhi.n	8013cf6 <_printf_i+0x32>
 8013ce0:	2f00      	cmp	r7, #0
 8013ce2:	f000 80d9 	beq.w	8013e98 <_printf_i+0x1d4>
 8013ce6:	2f58      	cmp	r7, #88	; 0x58
 8013ce8:	f000 80a4 	beq.w	8013e34 <_printf_i+0x170>
 8013cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013cf4:	e03a      	b.n	8013d6c <_printf_i+0xa8>
 8013cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013cfa:	2b15      	cmp	r3, #21
 8013cfc:	d8f6      	bhi.n	8013cec <_printf_i+0x28>
 8013cfe:	a101      	add	r1, pc, #4	; (adr r1, 8013d04 <_printf_i+0x40>)
 8013d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013d04:	08013d5d 	.word	0x08013d5d
 8013d08:	08013d71 	.word	0x08013d71
 8013d0c:	08013ced 	.word	0x08013ced
 8013d10:	08013ced 	.word	0x08013ced
 8013d14:	08013ced 	.word	0x08013ced
 8013d18:	08013ced 	.word	0x08013ced
 8013d1c:	08013d71 	.word	0x08013d71
 8013d20:	08013ced 	.word	0x08013ced
 8013d24:	08013ced 	.word	0x08013ced
 8013d28:	08013ced 	.word	0x08013ced
 8013d2c:	08013ced 	.word	0x08013ced
 8013d30:	08013e7f 	.word	0x08013e7f
 8013d34:	08013da1 	.word	0x08013da1
 8013d38:	08013e61 	.word	0x08013e61
 8013d3c:	08013ced 	.word	0x08013ced
 8013d40:	08013ced 	.word	0x08013ced
 8013d44:	08013ea1 	.word	0x08013ea1
 8013d48:	08013ced 	.word	0x08013ced
 8013d4c:	08013da1 	.word	0x08013da1
 8013d50:	08013ced 	.word	0x08013ced
 8013d54:	08013ced 	.word	0x08013ced
 8013d58:	08013e69 	.word	0x08013e69
 8013d5c:	682b      	ldr	r3, [r5, #0]
 8013d5e:	1d1a      	adds	r2, r3, #4
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	602a      	str	r2, [r5, #0]
 8013d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	e0a4      	b.n	8013eba <_printf_i+0x1f6>
 8013d70:	6820      	ldr	r0, [r4, #0]
 8013d72:	6829      	ldr	r1, [r5, #0]
 8013d74:	0606      	lsls	r6, r0, #24
 8013d76:	f101 0304 	add.w	r3, r1, #4
 8013d7a:	d50a      	bpl.n	8013d92 <_printf_i+0xce>
 8013d7c:	680e      	ldr	r6, [r1, #0]
 8013d7e:	602b      	str	r3, [r5, #0]
 8013d80:	2e00      	cmp	r6, #0
 8013d82:	da03      	bge.n	8013d8c <_printf_i+0xc8>
 8013d84:	232d      	movs	r3, #45	; 0x2d
 8013d86:	4276      	negs	r6, r6
 8013d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d8c:	230a      	movs	r3, #10
 8013d8e:	485e      	ldr	r0, [pc, #376]	; (8013f08 <_printf_i+0x244>)
 8013d90:	e019      	b.n	8013dc6 <_printf_i+0x102>
 8013d92:	680e      	ldr	r6, [r1, #0]
 8013d94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d98:	602b      	str	r3, [r5, #0]
 8013d9a:	bf18      	it	ne
 8013d9c:	b236      	sxthne	r6, r6
 8013d9e:	e7ef      	b.n	8013d80 <_printf_i+0xbc>
 8013da0:	682b      	ldr	r3, [r5, #0]
 8013da2:	6820      	ldr	r0, [r4, #0]
 8013da4:	1d19      	adds	r1, r3, #4
 8013da6:	6029      	str	r1, [r5, #0]
 8013da8:	0601      	lsls	r1, r0, #24
 8013daa:	d501      	bpl.n	8013db0 <_printf_i+0xec>
 8013dac:	681e      	ldr	r6, [r3, #0]
 8013dae:	e002      	b.n	8013db6 <_printf_i+0xf2>
 8013db0:	0646      	lsls	r6, r0, #25
 8013db2:	d5fb      	bpl.n	8013dac <_printf_i+0xe8>
 8013db4:	881e      	ldrh	r6, [r3, #0]
 8013db6:	2f6f      	cmp	r7, #111	; 0x6f
 8013db8:	bf0c      	ite	eq
 8013dba:	2308      	moveq	r3, #8
 8013dbc:	230a      	movne	r3, #10
 8013dbe:	4852      	ldr	r0, [pc, #328]	; (8013f08 <_printf_i+0x244>)
 8013dc0:	2100      	movs	r1, #0
 8013dc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013dc6:	6865      	ldr	r5, [r4, #4]
 8013dc8:	2d00      	cmp	r5, #0
 8013dca:	bfa8      	it	ge
 8013dcc:	6821      	ldrge	r1, [r4, #0]
 8013dce:	60a5      	str	r5, [r4, #8]
 8013dd0:	bfa4      	itt	ge
 8013dd2:	f021 0104 	bicge.w	r1, r1, #4
 8013dd6:	6021      	strge	r1, [r4, #0]
 8013dd8:	b90e      	cbnz	r6, 8013dde <_printf_i+0x11a>
 8013dda:	2d00      	cmp	r5, #0
 8013ddc:	d04d      	beq.n	8013e7a <_printf_i+0x1b6>
 8013dde:	4615      	mov	r5, r2
 8013de0:	fbb6 f1f3 	udiv	r1, r6, r3
 8013de4:	fb03 6711 	mls	r7, r3, r1, r6
 8013de8:	5dc7      	ldrb	r7, [r0, r7]
 8013dea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013dee:	4637      	mov	r7, r6
 8013df0:	42bb      	cmp	r3, r7
 8013df2:	460e      	mov	r6, r1
 8013df4:	d9f4      	bls.n	8013de0 <_printf_i+0x11c>
 8013df6:	2b08      	cmp	r3, #8
 8013df8:	d10b      	bne.n	8013e12 <_printf_i+0x14e>
 8013dfa:	6823      	ldr	r3, [r4, #0]
 8013dfc:	07de      	lsls	r6, r3, #31
 8013dfe:	d508      	bpl.n	8013e12 <_printf_i+0x14e>
 8013e00:	6923      	ldr	r3, [r4, #16]
 8013e02:	6861      	ldr	r1, [r4, #4]
 8013e04:	4299      	cmp	r1, r3
 8013e06:	bfde      	ittt	le
 8013e08:	2330      	movle	r3, #48	; 0x30
 8013e0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013e0e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013e12:	1b52      	subs	r2, r2, r5
 8013e14:	6122      	str	r2, [r4, #16]
 8013e16:	464b      	mov	r3, r9
 8013e18:	4621      	mov	r1, r4
 8013e1a:	4640      	mov	r0, r8
 8013e1c:	f8cd a000 	str.w	sl, [sp]
 8013e20:	aa03      	add	r2, sp, #12
 8013e22:	f7ff fedf 	bl	8013be4 <_printf_common>
 8013e26:	3001      	adds	r0, #1
 8013e28:	d14c      	bne.n	8013ec4 <_printf_i+0x200>
 8013e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e2e:	b004      	add	sp, #16
 8013e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e34:	4834      	ldr	r0, [pc, #208]	; (8013f08 <_printf_i+0x244>)
 8013e36:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013e3a:	6829      	ldr	r1, [r5, #0]
 8013e3c:	6823      	ldr	r3, [r4, #0]
 8013e3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8013e42:	6029      	str	r1, [r5, #0]
 8013e44:	061d      	lsls	r5, r3, #24
 8013e46:	d514      	bpl.n	8013e72 <_printf_i+0x1ae>
 8013e48:	07df      	lsls	r7, r3, #31
 8013e4a:	bf44      	itt	mi
 8013e4c:	f043 0320 	orrmi.w	r3, r3, #32
 8013e50:	6023      	strmi	r3, [r4, #0]
 8013e52:	b91e      	cbnz	r6, 8013e5c <_printf_i+0x198>
 8013e54:	6823      	ldr	r3, [r4, #0]
 8013e56:	f023 0320 	bic.w	r3, r3, #32
 8013e5a:	6023      	str	r3, [r4, #0]
 8013e5c:	2310      	movs	r3, #16
 8013e5e:	e7af      	b.n	8013dc0 <_printf_i+0xfc>
 8013e60:	6823      	ldr	r3, [r4, #0]
 8013e62:	f043 0320 	orr.w	r3, r3, #32
 8013e66:	6023      	str	r3, [r4, #0]
 8013e68:	2378      	movs	r3, #120	; 0x78
 8013e6a:	4828      	ldr	r0, [pc, #160]	; (8013f0c <_printf_i+0x248>)
 8013e6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013e70:	e7e3      	b.n	8013e3a <_printf_i+0x176>
 8013e72:	0659      	lsls	r1, r3, #25
 8013e74:	bf48      	it	mi
 8013e76:	b2b6      	uxthmi	r6, r6
 8013e78:	e7e6      	b.n	8013e48 <_printf_i+0x184>
 8013e7a:	4615      	mov	r5, r2
 8013e7c:	e7bb      	b.n	8013df6 <_printf_i+0x132>
 8013e7e:	682b      	ldr	r3, [r5, #0]
 8013e80:	6826      	ldr	r6, [r4, #0]
 8013e82:	1d18      	adds	r0, r3, #4
 8013e84:	6961      	ldr	r1, [r4, #20]
 8013e86:	6028      	str	r0, [r5, #0]
 8013e88:	0635      	lsls	r5, r6, #24
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	d501      	bpl.n	8013e92 <_printf_i+0x1ce>
 8013e8e:	6019      	str	r1, [r3, #0]
 8013e90:	e002      	b.n	8013e98 <_printf_i+0x1d4>
 8013e92:	0670      	lsls	r0, r6, #25
 8013e94:	d5fb      	bpl.n	8013e8e <_printf_i+0x1ca>
 8013e96:	8019      	strh	r1, [r3, #0]
 8013e98:	2300      	movs	r3, #0
 8013e9a:	4615      	mov	r5, r2
 8013e9c:	6123      	str	r3, [r4, #16]
 8013e9e:	e7ba      	b.n	8013e16 <_printf_i+0x152>
 8013ea0:	682b      	ldr	r3, [r5, #0]
 8013ea2:	2100      	movs	r1, #0
 8013ea4:	1d1a      	adds	r2, r3, #4
 8013ea6:	602a      	str	r2, [r5, #0]
 8013ea8:	681d      	ldr	r5, [r3, #0]
 8013eaa:	6862      	ldr	r2, [r4, #4]
 8013eac:	4628      	mov	r0, r5
 8013eae:	f7ff fba3 	bl	80135f8 <memchr>
 8013eb2:	b108      	cbz	r0, 8013eb8 <_printf_i+0x1f4>
 8013eb4:	1b40      	subs	r0, r0, r5
 8013eb6:	6060      	str	r0, [r4, #4]
 8013eb8:	6863      	ldr	r3, [r4, #4]
 8013eba:	6123      	str	r3, [r4, #16]
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ec2:	e7a8      	b.n	8013e16 <_printf_i+0x152>
 8013ec4:	462a      	mov	r2, r5
 8013ec6:	4649      	mov	r1, r9
 8013ec8:	4640      	mov	r0, r8
 8013eca:	6923      	ldr	r3, [r4, #16]
 8013ecc:	47d0      	blx	sl
 8013ece:	3001      	adds	r0, #1
 8013ed0:	d0ab      	beq.n	8013e2a <_printf_i+0x166>
 8013ed2:	6823      	ldr	r3, [r4, #0]
 8013ed4:	079b      	lsls	r3, r3, #30
 8013ed6:	d413      	bmi.n	8013f00 <_printf_i+0x23c>
 8013ed8:	68e0      	ldr	r0, [r4, #12]
 8013eda:	9b03      	ldr	r3, [sp, #12]
 8013edc:	4298      	cmp	r0, r3
 8013ede:	bfb8      	it	lt
 8013ee0:	4618      	movlt	r0, r3
 8013ee2:	e7a4      	b.n	8013e2e <_printf_i+0x16a>
 8013ee4:	2301      	movs	r3, #1
 8013ee6:	4632      	mov	r2, r6
 8013ee8:	4649      	mov	r1, r9
 8013eea:	4640      	mov	r0, r8
 8013eec:	47d0      	blx	sl
 8013eee:	3001      	adds	r0, #1
 8013ef0:	d09b      	beq.n	8013e2a <_printf_i+0x166>
 8013ef2:	3501      	adds	r5, #1
 8013ef4:	68e3      	ldr	r3, [r4, #12]
 8013ef6:	9903      	ldr	r1, [sp, #12]
 8013ef8:	1a5b      	subs	r3, r3, r1
 8013efa:	42ab      	cmp	r3, r5
 8013efc:	dcf2      	bgt.n	8013ee4 <_printf_i+0x220>
 8013efe:	e7eb      	b.n	8013ed8 <_printf_i+0x214>
 8013f00:	2500      	movs	r5, #0
 8013f02:	f104 0619 	add.w	r6, r4, #25
 8013f06:	e7f5      	b.n	8013ef4 <_printf_i+0x230>
 8013f08:	08015337 	.word	0x08015337
 8013f0c:	08015348 	.word	0x08015348

08013f10 <__retarget_lock_acquire_recursive>:
 8013f10:	4770      	bx	lr

08013f12 <__retarget_lock_release_recursive>:
 8013f12:	4770      	bx	lr

08013f14 <_realloc_r>:
 8013f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f18:	4680      	mov	r8, r0
 8013f1a:	4614      	mov	r4, r2
 8013f1c:	460e      	mov	r6, r1
 8013f1e:	b921      	cbnz	r1, 8013f2a <_realloc_r+0x16>
 8013f20:	4611      	mov	r1, r2
 8013f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f26:	f7ff bc0d 	b.w	8013744 <_malloc_r>
 8013f2a:	b92a      	cbnz	r2, 8013f38 <_realloc_r+0x24>
 8013f2c:	f7ff fba2 	bl	8013674 <_free_r>
 8013f30:	4625      	mov	r5, r4
 8013f32:	4628      	mov	r0, r5
 8013f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f38:	f000 f81b 	bl	8013f72 <_malloc_usable_size_r>
 8013f3c:	4284      	cmp	r4, r0
 8013f3e:	4607      	mov	r7, r0
 8013f40:	d802      	bhi.n	8013f48 <_realloc_r+0x34>
 8013f42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013f46:	d812      	bhi.n	8013f6e <_realloc_r+0x5a>
 8013f48:	4621      	mov	r1, r4
 8013f4a:	4640      	mov	r0, r8
 8013f4c:	f7ff fbfa 	bl	8013744 <_malloc_r>
 8013f50:	4605      	mov	r5, r0
 8013f52:	2800      	cmp	r0, #0
 8013f54:	d0ed      	beq.n	8013f32 <_realloc_r+0x1e>
 8013f56:	42bc      	cmp	r4, r7
 8013f58:	4622      	mov	r2, r4
 8013f5a:	4631      	mov	r1, r6
 8013f5c:	bf28      	it	cs
 8013f5e:	463a      	movcs	r2, r7
 8013f60:	f7ff fb58 	bl	8013614 <memcpy>
 8013f64:	4631      	mov	r1, r6
 8013f66:	4640      	mov	r0, r8
 8013f68:	f7ff fb84 	bl	8013674 <_free_r>
 8013f6c:	e7e1      	b.n	8013f32 <_realloc_r+0x1e>
 8013f6e:	4635      	mov	r5, r6
 8013f70:	e7df      	b.n	8013f32 <_realloc_r+0x1e>

08013f72 <_malloc_usable_size_r>:
 8013f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f76:	1f18      	subs	r0, r3, #4
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	bfbc      	itt	lt
 8013f7c:	580b      	ldrlt	r3, [r1, r0]
 8013f7e:	18c0      	addlt	r0, r0, r3
 8013f80:	4770      	bx	lr

08013f82 <_Unwind_GetDataRelBase>:
 8013f82:	b508      	push	{r3, lr}
 8013f84:	f7ff faf6 	bl	8013574 <abort>

08013f88 <_Unwind_GetTextRelBase>:
 8013f88:	b508      	push	{r3, lr}
 8013f8a:	f7ff fffa 	bl	8013f82 <_Unwind_GetDataRelBase>
	...

08013f90 <_init>:
 8013f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f92:	bf00      	nop
 8013f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f96:	bc08      	pop	{r3}
 8013f98:	469e      	mov	lr, r3
 8013f9a:	4770      	bx	lr

08013f9c <_fini>:
 8013f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f9e:	bf00      	nop
 8013fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fa2:	bc08      	pop	{r3}
 8013fa4:	469e      	mov	lr, r3
 8013fa6:	4770      	bx	lr
